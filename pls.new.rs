#![allow
(
    ambiguous_glob_reexports,
    dead_code,
    deprecated,
    elided_named_lifetimes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    private_interfaces,
    stable_features,
    unknown_lints,
    unreachable_patterns,
    unused_assignments,
    unused_imports,
    unused_macros,
    unused_mut,
    unused_unsafe,
    unused_variables,
)]
/*
#[macro_use] extern crate lazy_static;
extern crate rand;
extern crate fnv;
extern crate memchr;
extern crate nix;
extern crate regex as re;
extern crate smallvec;
extern crate time as timed;
extern crate unicode_normalization;
extern crate unicode_width; */

#[macro_use] pub mod macros
{
    /// The main macro provided by this crate. See crate documentation for more information.
    #[macro_export] macro_rules! cfg_if
    {
        (
            $(
                if #[cfg( $i_meta:meta )] { $( $i_tokens:tt )* }
            ) else+
            else { $( $e_tokens:tt )* }
        ) =>
        {
            ::cfg_if!
            {
                @__items () ;
                $(
                    (( $i_meta ) ( $( $i_tokens )* )) ,
                )+
                (() ( $( $e_tokens )* )) ,
            }
        };
        
        (
            if #[cfg( $i_meta:meta )] { $( $i_tokens:tt )* }
            $(
                else if #[cfg( $e_meta:meta )] { $( $e_tokens:tt )* }
            )*
        ) =>
        {
            ::cfg_if!
            {
                @__items () ;
                (( $i_meta ) ( $( $i_tokens )* )) ,
                $(
                    (( $e_meta ) ( $( $e_tokens )* )) ,
                )*
            }
        };
        
        (@__items ( $( $_:meta , )* ) ; ) => {};
        (
            @__items ( $( $no:meta , )* ) ;
            (( $( $yes:meta )? ) ( $( $tokens:tt )* )) ,
            $( $rest:tt , )*
        ) =>
        {
            #[cfg(all
            (
                $( $yes , )?
                not(any( $( $no ),* ))
            ))]
            ::cfg_if! { @__identity $( $tokens )* }
            
            ::cfg_if!
            {
                @__items ( $( $no , )* $( $yes , )? ) ;
                $( $rest , )*
            }
        };
        
        (@__identity $( $tokens:tt )* ) => { $( $tokens )* };
    }
    /// Implement `Clone` and `Copy` for a struct,
    /// as well as `Debug`, `Eq`, `Hash`, and `PartialEq` if the `extra_traits` feature is enabled.
    #[macro_export] macro_rules! s
    {
        ($(
            $(#[$attr:meta])*
            pub $t:ident $i:ident { $($field:tt)* }
        )*) => 
        ($(
            s!(it: $(#[$attr])* pub $t $i { $($field)* });
        )*);

        (it: $(#[$attr:meta])* pub union $i:ident { $($field:tt)* }) => 
        (
            compile_error!("unions cannot derive extra traits, use s_no_extra_traits instead");
        );

        (it: $(#[$attr:meta])* pub struct $i:ident { $($field:tt)* }) => 
        (
            __item! 
            {
                #[repr(C)]
                #[cfg_attr
                (
                    feature = "extra_traits", derive( Debug, Eq, Hash, PartialEq )
                )]
                #[derive( Clone, Copy )] 
                $(#[$attr])*
                pub struct $i { $($field)* }
            }
        );
    }
    /// Implement `Clone` and `Copy` for a tuple struct,
    /// as well as `Debug`, `Eq`, `Hash`, and `PartialEq` if the `extra_traits` feature is enabled.
    #[macro_export] macro_rules! s_paren
    {
        ($(
            $(#[$attr:meta])*
            pub struct $i:ident ( $($field:tt)* );
        )*) => ($(
            __item! {
                #[cfg_attr(
                    feature = "extra_traits",
                    derive(Debug, Eq, Hash, PartialEq)
                )]
                #[derive(Clone, Copy)]
                $(#[$attr])*
                pub struct $i ( $($field)* );
            }
        )*);
    }
    /// Implement `Clone` and `Copy` for a struct with no `extra_traits` feature, 
    /// as well as `Debug` with `extra_traits` since that can always be derived.
    #[macro_export] macro_rules! s_no_extra_traits
    {
        ($(
            $(#[$attr:meta])*
            pub $t:ident $i:ident { $($field:tt)* }
        )*) => ($(
            s_no_extra_traits!(it: $(#[$attr])* pub $t $i { $($field)* });
        )*);

        (it: $(#[$attr:meta])* pub union $i:ident { $($field:tt)* }) => (
            __item! {
                #[repr(C)]
                #[derive(Clone, Copy)]
                $(#[$attr])*
                pub union $i { $($field)* }
            }

            #[cfg(feature = "extra_traits")]
            impl ::core::fmt::Debug for $i {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct(::core::stringify!($i)).finish_non_exhaustive()
                }
            }
        );

        (it: $(#[$attr:meta])* pub struct $i:ident { $($field:tt)* }) =>
        (
            __item!
            {
                #[repr( C )] #[derive( Clone, Copy, Debug )]
                $(#[$attr])*
                pub struct $i { $($field)* }
            }
        );
    }
    /// Specify that an enum should have no traits that aren't specified in the macro invocation.
    #[macro_export] macro_rules! missing
    {
        ($(
            $(#[$attr:meta])*
            pub enum $i:ident {}
        )*) => ($(
            $(#[$attr])*
            #[allow(missing_copy_implementations)]
            pub enum $i { }
        )*);
    }
    /// Implement `Clone` and `Copy` for an enum, 
    /// as well as `Debug`, `Eq`, `Hash`, and `PartialEq` if the `extra_traits` feature is enabled.
    #[macro_export] macro_rules! e
    {
        ($(
            $(#[$attr:meta])*
            pub enum $i:ident { $($field:tt)* }
        )*) => ($(
            __item! {
                #[cfg_attr(
                    feature = "extra_traits",
                    derive(Debug, Eq, Hash, PartialEq)
                )]
                #[derive(Clone, Copy)]
                $(#[$attr])*
                pub enum $i { $($field)* }
            }
        )*);
    }
    /// Represent a C enum as Rust constants and a type.
    #[macro_export] macro_rules! c_enum
    {
        (
            $(#[repr($repr:ty)])?
            enum $ty_name:ident {
                $($variant:ident $(= $value:literal)?,)+
            }
        ) => {
            pub type $ty_name = c_enum!(@ty $($repr)?);
            c_enum!(@one; $ty_name; 0; $($variant $(= $value)?,)+);
        };

        (@one; $_ty_name:ident; $_idx:expr;) => {};
        (
            @one; $ty_name:ident; $default_val:expr;
            $variant:ident $(= $value:literal)?,
            $($tail:tt)*
        ) => {
            pub const $variant: $ty_name = 
            {
                #[allow(unused_variables)]
                let r = $default_val;
                $(let r = $value;)?
                r
            };
            
            c_enum!(@one; $ty_name; $variant + 1; $($tail)*);
        };
        
        (@ty $repr:ty) => { $repr };
        (@ty) => { c_uint };
    }

    cfg_if!
    {
        if #[cfg(libc_const_extern_fn)] 
        {
            /// Define an `unsafe` function that is const as long as `libc_const_extern_fn` is enabled.
            macro_rules! f
            {
                ($(
                    $(#[$attr:meta])*
                    pub $({$constness:ident})* fn $i:ident($($arg:ident: $argty:ty),* $(,)*) -> $ret:ty
                        $body:block
                )*) => ($(
                    #[inline]
                    $(#[$attr])*
                    pub $($constness)* unsafe extern "C" fn $i($($arg: $argty),*) -> $ret
                        $body
                )*)
            }
            /// Define a safe function that is const as long as `libc_const_extern_fn` is enabled.
            macro_rules! safe_f
            {
                ($(
                    $(#[$attr:meta])*
                    pub $({$constness:ident})* fn $i:ident($($arg:ident: $argty:ty),* $(,)*) -> $ret:ty
                        $body:block
                )*) => ($(
                    #[inline]
                    $(#[$attr])*
                    pub $($constness)* extern "C" fn $i($($arg: $argty),*) -> $ret
                        $body
                )*)
            }
            /// A nonpublic function that is const as long as `libc_const_extern_fn` is enabled.
            macro_rules! const_fn
            {
                ($(
                    $(#[$attr:meta])*
                    $({$constness:ident})* fn $i:ident($($arg:ident: $argty:ty),* $(,)*) -> $ret:ty
                        $body:block
                )*) => ($(
                    #[inline]
                    $(#[$attr])*
                    $($constness)* fn $i($($arg: $argty),*) -> $ret
                        $body
                )*)
            }
        }
        
        else
        {
            /// Define an `unsafe` function that is const as long as `libc_const_extern_fn` is enabled.
            macro_rules! f 
           
            {
                ($(
                    $(#[$attr:meta])*
                    pub $({$constness:ident})* fn $i:ident($($arg:ident: $argty:ty),* $(,)*) -> $ret:ty
                        $body:block
                )*) => ($(
                    #[inline]
                    $(#[$attr])*
                    pub unsafe extern "C" fn $i($($arg: $argty),*) -> $ret
                        $body
                )*)
            }
            /// Define a safe function that is const as long as `libc_const_extern_fn` is enabled.
            macro_rules! safe_f 
           
            {
                ($(
                    $(#[$attr:meta])*
                    pub $({$constness:ident})* fn $i:ident($($arg:ident: $argty:ty),* $(,)*) -> $ret:ty
                        $body:block
                )*) => ($(
                    #[inline]
                    $(#[$attr])*
                    pub extern "C" fn $i($($arg: $argty),*) -> $ret
                        $body
                )*)
            }
            /// A nonpublic function that is const as long as `libc_const_extern_fn` is enabled.
            macro_rules! const_fn
           
            {
                ($(
                    $(#[$attr:meta])*
                    $({$constness:ident})* fn $i:ident($($arg:ident: $argty:ty),* $(,)*) -> $ret:ty
                        $body:block
                )*) => ($(
                    #[inline]
                    $(#[$attr])*
                    fn $i($($arg: $argty),*) -> $ret
                        $body
                )*)
            }
        }
    }
    /// Cascade an out-of-bounds value.
    #[macro_export] macro_rules! cascade
    {
        (@ordinal ordinal) => {};
        (@year year) => {};
        
        ($from:ident in $min:literal.. $max:expr => $to:tt) =>
        {
            let min = $min;
            let max = $max;
            if $from >= max {
                $from -= max - min;
                $to += 1;
            } else if $from < min {
                $from += max - min;
                $to -= 1;
            }
        };
        
        ($ordinal:ident => $year:ident) =>
        {
            cascade!(@ordinal $ordinal);
            cascade!(@year $year);
            if $ordinal > ::time::days_in_year($year) as i16 {
                $ordinal -= ::time::days_in_year($year) as i16;
                $year += 1;
            } else if $ordinal < 1 {
                $year -= 1;
                $ordinal += ::time::days_in_year($year) as i16;
            }
        };
    }

    #[macro_export] macro_rules! __item
    {
        ($i:item) => { $i };
    }

    #[macro_export] macro_rules! println_stderr
    {
        ($fmt:expr) => 
        (
            match writeln!( &mut ::io::stderr(), $fmt )
            {
                Ok(_) => {}
                Err(e) => println!("write to stderr failed: {:?}", e)
            }
        );

        ($fmt:expr, $($arg:tt)*) => 
        (
            match writeln!( &mut ::io::stderr(), $fmt, $($arg)*) 
            {
                Ok(_) => {}
                Err(e) => println!("write to stderr failed: {:?}", e)
            }
        );
    } 

    #[macro_export] macro_rules! log 
    {
        ($fmt:expr) =>
        (
            let log_file = if let Ok(x) = ::env::var("CICADA_LOG_FILE") { x.clone() }
            else { String::new() };

            if !log_file.is_empty()
            {
                use ::io::Write as _;

                let msg = $fmt;
                match ::fs::OpenOptions::new().append(true).create(true).open(&log_file)
                {
                    Ok(mut cfile) => 
                    {
                        let pid = ::process::pid();
                        let now = ::libc::time::DateTime::now();
                        let msg = format!("[{}][{}] {}", now, pid, msg);
                        let msg = if msg.ends_with('\n') { msg } else { format!("{}\n", msg) };
                        match cfile.write_all(msg.as_bytes()) 
                        {
                            Ok(_) => {}
                            Err(_) => println!("tlog: write_all error")
                        }
                    }

                    Err(_) => println!("tlog: open file error"),
                }

            }
        );

        ($fmt:expr, $($arg:tt)*) => (
            let msg = format!($fmt, $($arg)*);
            log!(&msg);
        );
    }
    /// Implement PartialEq & Eq traits
    #[macro_export] macro_rules! impl_eq_partial_eq
    {
        ($type:ident($property:ident)) =>
        {
            impl PartialEq for $type
            {
                fn eq( &self, other:&$type ) -> bool 
                {
                    self.$property == other.$property
                }
            }

            impl Eq for $type {}
        };
    }
    /// Implement Debug trait
    #[macro_export] macro_rules! impl_debug
    {
        ($type:ident,) =>
        {
            impl ::fmt::Debug for $type
            {
                fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                {
                    unsafe { write!(f, "{:?}", self ) }
                }
            }
        };
        ($type:ident) =>
        {
            impl ::fmt::Debug for $type
            {
                fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                {
                    unsafe { write!(f, "{:?}", self ) }
                }
            }
        };
    }
    /// Implement Debug property trait
    #[macro_export] macro_rules! impl_debug_property
    {
        ($type:ident($property:ident), ) =>
        {
            impl ::fmt::Debug for $type
            {
                fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                {
                    unsafe { write!(f, "{:?}", self.$property ) }
                }
            }
        };
        ($type:ident($property:ident)) =>
        {
            impl ::fmt::Debug for $type
            {
                fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                {
                    unsafe { write!(f, "{:?}", self.$property ) }
                }
            }
        };
    }
    /// Implement Debug property trait
    #[macro_export] macro_rules! impl_hash
    {
        ($type:ident($property:ident), ) =>
        {
            impl ::hash::Hash for $type 
            {
                fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                {
                    self.$property.hash(state);
                }
            } 
        };
        ($type:ident($property:ident)) =>
        {
            impl ::hash::Hash for $type 
            {
                fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                {
                    self.$property.hash(state);
                }
            } 
        };
    }
    /// Try to unwrap an expression, returning if not possible.
    #[macro_export] macro_rules! const_try
    {
        ($e:expr) =>
        {
            match $e
            {
                Ok(value) => value,
                Err(error) => return Err(error),
            }
        };
    }
    /// Try to unwrap an expression, returning if not possible.
    #[macro_export] macro_rules! const_try_opt
    {
        ($e:expr) =>
        {
            match $e
            {
                Some(value) => value,
                None => return None,
            }
        };
    }
    /// Try to unwrap an expression, panicking if not possible.
    macro_rules! expect_opt
    {
        ($e:expr, $message:literal) =>
        {
            match $e
            {
                Some(value) => value,
                None => ::error::expect_failed($message),
            }
        };
    }
    /// Division of integers, rounding the resulting value towards negative infinity.
    #[macro_export] macro_rules! div_floor
    {
        ($self:expr, $rhs:expr) =>
        {
            match ($self, $rhs)
            {
                (this, rhs) =>
                {
                    let d = this / rhs;
                    let r = this % rhs;
                    
                    let correction = (this ^ rhs) >> ( size_of_val(&this) * 8 - 1 );
                    if r != 0 { d + correction } else { d }
                }
            }
        };
    }
    /// Constructs a ranged integer, returning a `ComponentRange` error if the value is out of range.
    #[macro_export] macro_rules! ensure_ranged 
    {
        ($type:ty : $value:ident) => 
        {
            match <$type>::new($value) 
            {
                Some(val) => val,
                None => 
                {
                    // UNSTABLE
                    // ::hint::cold_path();
                    
                    return Err( ::error::time::ComponentRange 
                    {
                        name: stringify!($value),
                        minimum: <$type>::MIN.get() as i64,
                        maximum: <$type>::MAX.get() as i64,
                        value: $value as i64,
                        conditional_message: None,
                    });
                }
            }
        };

        ($type:ty : $value:ident $(as $as_type:ident)? * $factor:expr) =>
        {
            match ($value $(as $as_type)?).checked_mul($factor)
            {
                Some(val) => match <$type>::new(val)
                {
                    Some(val) => val,
                    None => 
                    {
                        ::hint::cold_path();
                        return Err( ::error::time::ComponentRange {
                            name: stringify!($value),
                            minimum: <$type>::MIN.get() as i64 / $factor as i64,
                            maximum: <$type>::MAX.get() as i64 / $factor as i64,
                            value: $value as i64,
                            conditional_message: None,
                        });
                    }
                },
                None =>
                {
                    ::hint::cold_path();
                    return Err( ::error::time::ComponentRange 
                    {
                        name: stringify!($value),
                        minimum: <$type>::MIN.get() as i64 / $factor as i64,
                        maximum: <$type>::MAX.get() as i64 / $factor as i64,
                        value: $value as i64,
                        conditional_message: None,
                    });
                }
            }
        };
    }
}

pub mod borrow
{
    pub use std::borrow::{ * };
}

pub mod boxed
{
    pub use std::boxed::{ * };
}

pub mod clone
{
    pub use std::clone::{ * };
}

pub mod cmp
{
    pub use std::cmp::{ * };
}

pub mod collections
{
    pub use std::collections::{ * };
}

pub mod convert
{
    pub use std::convert::{ * };
}

pub mod env
{
    pub use std::env::{ * };

    pub unsafe fn initialize_paths() -> ::result::Result<Vec<String>, Box<dyn std::error::Error>>
    {
        use ::path::{ * };
        let mut paths: Vec<String> = vec![];

        for x in 
        [
            "/usr/local/sbin",
            "/usr/local/bin",
            "/usr/sbin",
            "/usr/bin",
            "/sbin",
            "/bin",
        ]
        {
            if Path::new(x).exists() { paths.push(x.to_string()); }
        }

        if let Ok(env_path) = var("PATH") 
        {
            for x in env_path.split(":")
            {
                if !paths.contains(&x.to_string()) { paths.push(x.to_string()); }
            }
        }

        set_var("PATH", paths.join(":"));
        Ok( paths.clone() )
    }

    pub fn get_user_home() -> String
    {
        match var("HOME")
        {
            Ok(x) => x,
            Err(e) =>
            {
                println_stderr!("cicada: env HOME error: {}", e);
                String::new()
            }
        }
    }

    pub fn get_rc_file() -> String
    {
        use ::path::{ * };

        let dir_config = ::path::get_configuration();
        let rc_file = format!("{}/cicadarc", dir_config);

        if Path::new(&rc_file).exists() { return rc_file; }
        
        let home = get_user_home();
        let rc_file_home = format!("{}/{}", home, ".cicadarc");
        
        if Path::new(&rc_file_home).exists() { return rc_file_home; }
        
        rc_file
    }
    // pub fn load_rc_files(sh: &mut shell::Shell)
    pub fn load_rc( this:&mut ::shell::Shell )
    {
        use ::path::{ * };
        let rc_file = get_rc_file();
        if !Path::new(&rc_file).exists()  { return; }

        let args = vec!["source".to_string(), rc_file];
        ::scripts::run( this, &args );
    }
    
}

pub mod error
{
    pub use std::error::{ * };
    /// This is a separate function to reduce the code size of `expect_opt!`.
    #[inline( never )] #[cold] #[track_caller] pub const fn expect_failed( message:&str ) -> !
    {
        panic!( "{}", message )
    }

    pub mod time
    {

    }
}

pub mod fmt
{
    pub use std::fmt::{ * };
}

pub mod fs
{
    pub use std::fs::{ * };
}

pub mod hash
{
    pub use std::hash::{ * };
}

pub mod hint
{
    pub use std::hint::{ * };
}

pub mod iter
{
    pub use std::iter::{ * };
}

pub mod libc
{
    pub mod prelude
    {
        //! This module contains type aliases for C's platform-specific types and fixed-width integer types.
        //pub use ::ffi::{ c_void };
        pub use ::os::raw::{ *, c_ulong as _c_ulong };

        pub type c_schar = i8;
        pub type c_uchar = u8;
        pub type c_short = i16;
        pub type c_ushort = u16;

        pub type c_longlong = i64;
        pub type c_ulonglong = u64;

        pub type c_float = f32;
        pub type c_double = f64;

        /*cfg_if!
        {
            if #[cfg(all
            (
                not(windows),
                not(any(
                    target_os = "macos",
                    target_os = "ios",
                    target_os = "tvos",
                    target_os = "watchos",
                    target_os = "visionos",
                )),
                not(target_os = "vita"),
                any
                (
                    target_arch = "aarch64",
                    target_arch = "arm",
                    target_arch = "csky",
                    target_arch = "hexagon",
                    target_arch = "msp430",
                    target_arch = "powerpc",
                    target_arch = "powerpc64",
                    target_arch = "riscv32",
                    target_arch = "riscv64",
                    target_arch = "s390x",
                    target_arch = "xtensa",
                )
            ))] { pub type c_char = u8; }
            else { pub type c_char = i8; }
        } */

        /* cfg_if!
        {
            if #[cfg(any(target_arch = "avr", target_arch = "msp430"))]
            {
                pub type c_int = i16;
                //pub type c_uint = u16;
            }

            else
            {
                pub type c_int = i32;
               // pub type c_uint = u32;
            }
        } */

        /* cfg_if!
        {
            if #[cfg(all(target_pointer_width = "64", not(windows)))]
            {
                pub type c_long = i64;
                //pub type c_ulong = u64;
            }

            else
            {
                pub type c_long = i32;
                //pub type c_ulong = u32;
            }
        } */

        pub type int8_t = i8;
        pub type int16_t = i16;
        pub type int32_t = i32;
        pub type int64_t = i64;
        pub type uint8_t = u8;
        pub type uint16_t = u16;
        pub type uint32_t = u32;
        pub type uint64_t = u64;

        cfg_if!
        {
            if #[cfg(all
            (
                target_arch = "aarch64",
                not(any
                (
                    target_os = "windows",
                    target_os = "macos",
                    target_os = "ios",
                    target_os = "tvos",
                    target_os = "watchos"
                ))
            ))]
            {
                pub type __int128 = i128;
                pub type __uint128 = u128;
                pub type __int128_t = i128;
                pub type __uint128_t = u128;
                const _SIZE_128: usize = 16;
                const _ALIGN_128: usize = 16;
                
                // static_assert_eq!(size_of::<__int128>(), _SIZE_128);
                // static_assert_eq!(align_of::<__int128>(), _ALIGN_128);
                // static_assert_eq!(size_of::<__uint128>(), _SIZE_128);
                // static_assert_eq!(align_of::<__uint128>(), _ALIGN_128);
                // static_assert_eq!(size_of::<__int128_t>(), _SIZE_128);
                // static_assert_eq!(align_of::<__int128_t>(), _ALIGN_128);
                // static_assert_eq!(size_of::<__uint128_t>(), _SIZE_128);
                // static_assert_eq!(align_of::<__uint128_t>(), _ALIGN_128);
            }
            else if #[cfg(all
            (
                target_arch = "aarch64",
                any
                (
                    target_os = "macos",
                    target_os = "ios",
                    target_os = "tvos",
                    target_os = "watchos"
                )
            ))]
            {
                pub type __int128_t = i128;
                pub type __uint128_t = u128;
            }
        }

        pub mod time
        {
            use ::
            {
                borrow::Borrow,
                cmp::Ordering,
                error::Error as StdError,
                num::IntErrorKind,
                str::FromStr,
                time::{ Duration as StdDuration, SystemTime },
                *,
            };
            /*
            use ::cmp::Ordering;
            use ::fmt;
            use ::iter::Sum;
            use ::ops::{Add, AddAssign, Div, Mul, Neg, Sub, SubAssign};
            use ::time::Duration as StdDuration;
            use std::time::SystemTime;

            mod date;

            #[cfg(feature = "formatting")]
            use alloc::string::String;
            use ::num::{NonZeroI32, NonZeroU8};
            use ::ops::{Add, Sub};
            use ::time::Duration as StdDuration;
            use ::{cmp, fmt};
            #[cfg(feature = "formatting")]
            use std::io;

            use deranged::RangedI32;
            use num_conv::prelude::*;
            use powerfmt::ext::FormatterExt;
            use powerfmt::smart_display::{self, FormatterOptions, Metadata, SmartDisplay};

            use crate::convert::*;
            use crate::ext::DigitCount;
            #[cfg(feature = "formatting")]
            use crate::formatting::Formattable;
            use crate::internal_macros::{
                const_try, const_try_opt, div_floor, ensure_ranged, expect_opt, impl_add_assign,
                impl_sub_assign,
            };
            #[cfg(feature = "parsing")]
            use crate::parsing::Parsable;
            use crate::util::{days_in_year, is_leap_year, weeks_in_year};
            use crate::{error, Duration, Month, PrimitiveDateTime, Time, Weekday};
            */
            
            
            /*
            //! `deranged` is a proof-of-concept implementation of ranged integers.
            #![cfg_attr(docsrs, feature(doc_auto_cfg, doc_cfg_hide))]
            #![no_std]
            #![doc(test(attr(deny(warnings))))]
            #![cfg_attr(docsrs, doc(cfg_hide(docsrs)))]

            extern crate std;

            #[cfg(all(feature = "alloc", any(feature = "serde", feature = "quickcheck")))]
            extern crate alloc;

            #[cfg(test)]
            mod tests;
            mod traits;
            mod unsafe_wrapper;

            

            #[cfg(all(not(docsrs), feature = "macros"))]
            pub use deranged_macros::int;
            #[cfg(all(not(docsrs), feature = "macros"))]
            pub use deranged_macros::opt_int;
            #[cfg(feature = "powerfmt")]
            use powerfmt::smart_display;

            use crate::unsafe_wrapper::Unsafe;
            */
            
            macro_rules! impl_mul_assign
            {
                ($(impl<$($a:lifetime),*> MulAssign<$Other:ty> for BigInt;)*) =>
                {$(
                    impl<$($a),*> MulAssign<$Other> for BigInt
                    {
                        #[inline] fn mul_assign(&mut self, other: $Other)
                        {
                            let BigInt { data: y, .. } = other;
                            self.data *= y;
                            if self.data.is_zero() { self.sign = NoSign; }
                            else { self.sign = self.sign * other.sign; }
                        }
                    }
                )*}
            }
            /// Declare a series of traits that will be used for const assertions.
            macro_rules! declare_traits
            {
                ($($trait_name:ident),* $(,)?) => 
                {$(
                    pub trait $trait_name 
                    {
                        const ASSERT: ();
                    }
                )*};
            }
            /// Implements traits that are common to all integer types.
            macro_rules! impl_traits_for_all
            {
                ($($ranged_ty:ident $inner_ty:ident),* $(,)?) => 
                {$(
                    impl<const MIN: $inner_ty, const MAX: $inner_ty> RangeIsValid for $ranged_ty<MIN, MAX> 
                    {
                        const ASSERT: () = assert!(MIN <= MAX);
                    }

                    impl<
                        const CURRENT_MIN: $inner_ty,
                        const CURRENT_MAX: $inner_ty,
                        const NEW_MIN: $inner_ty,
                        const NEW_MAX: $inner_ty,
                    > ExpandIsValid for ($ranged_ty<CURRENT_MIN, CURRENT_MAX>, $ranged_ty<NEW_MIN, NEW_MAX>) 
                    {
                        const ASSERT: () = {
                            assert!(NEW_MIN <= CURRENT_MIN);
                            assert!(NEW_MAX >= CURRENT_MAX);
                        };
                    }

                    impl<
                        const CURRENT_MIN: $inner_ty,
                        const CURRENT_MAX: $inner_ty,
                        const NEW_MIN: $inner_ty,
                        const NEW_MAX: $inner_ty,
                    > NarrowIsValid for ($ranged_ty<CURRENT_MIN, CURRENT_MAX>, $ranged_ty<NEW_MIN, NEW_MAX>) 
                    {
                        const ASSERT: () = {
                            assert!(NEW_MIN >= CURRENT_MIN);
                            assert!(NEW_MAX <= CURRENT_MAX);
                        };
                    }

                    impl<
                        const VALUE: $inner_ty,
                        const MIN: $inner_ty,
                        const MAX: $inner_ty,
                    > StaticIsValid for ($ranged_ty<MIN, VALUE>, $ranged_ty<VALUE, MAX>) 
                    {
                        const ASSERT: () = {
                            assert!(VALUE >= MIN);
                            assert!(VALUE <= MAX);
                        };
                    }
                )*};
            }
            /// Implement traits that are common to all signed integer types.
            macro_rules! impl_traits_for_signed
            {
                ($($ranged_ty:ident $inner_ty:ident),* $(,)?) => 
                {$(
                    impl<const MIN: $inner_ty, const MAX: $inner_ty> AbsIsSafe for $ranged_ty<MIN, MAX> 
                    {
                        const ASSERT: () = 
                        {
                            assert!(MIN != <$inner_ty>::MIN);
                            assert!(-MIN <= MAX);
                        };
                    }

                    impl<const MIN: $inner_ty, const MAX: $inner_ty> NegIsSafe for $ranged_ty<MIN, MAX> 
                    {
                        const ASSERT: () = 
                        {
                            assert!(MIN != <$inner_ty>::MIN);
                            assert!(-MIN <= MAX);
                            assert!(-MAX >= MIN);
                        };
                    }

                    impl_traits_for_all!($ranged_ty $inner_ty);
                )*};
            }
            /// Implement traits that are common to all unsigned integer types.
            macro_rules! impl_traits_for_unsigned
            {
                ($($ranged_ty:ident $inner_ty:ident),* $(,)?) => 
                {$(
                    impl<const MIN: $inner_ty, const MAX: $inner_ty> AbsIsSafe for $ranged_ty<MIN, MAX> 
                    {
                        const ASSERT: () = ();
                    }

                    impl<const MIN: $inner_ty, const MAX: $inner_ty> NegIsSafe for $ranged_ty<MIN, MAX> 
                    {
                        const ASSERT: () = assert!(MAX == 0);
                    }

                    impl_traits_for_all!($ranged_ty $inner_ty);
                )*};
            }

            declare_traits!
            [
                RangeIsValid,
                AbsIsSafe,
                NegIsSafe,
                ExpandIsValid,
                NarrowIsValid,
                StaticIsValid,
            ];

            impl_traits_for_signed! 
            {
                RangedI8 i8,
                RangedI16 i16,
                RangedI32 i32,
                RangedI64 i64,
                RangedI128 i128,
                RangedIsize isize,
            }

            impl_traits_for_unsigned! 
            {
                RangedU8 u8,
                RangedU16 u16,
                RangedU32 u32,
                RangedU64 u64,
                RangedU128 u128,
                RangedUsize usize,
            }
            /// A value that is safe to use, but is unsafe to construct or mutate.
            #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
            pub struct Unsafe<T>(T);

            impl<T: ::fmt::Debug> ::fmt::Debug for Unsafe<T> 
            {
                #[inline] fn fmt(&self, f: &mut ::fmt::Formatter<'_>) -> ::fmt::Result { self.0.fmt(f) }
            }

            impl<T> Unsafe<T> 
            {
                /// Create a new `Unsafe`, asserting that all invariants are upheld.
                #[inline( always )] pub const unsafe fn new(value: T) -> Self { Self(value) }
                /// Get a reference to the inner value.
                #[inline( always )] pub const fn get(&self) -> &T { &self.0 }
            }

            impl<T> ::ops::Deref for Unsafe<T> 
            
            {
                type Target = T;
                #[inline( always )] fn deref(&self) -> &Self::Target { &self.0 }
            }
            /// A macro to define a ranged integer with an automatically computed inner type.
            #[macro_export] macro_rules! int
            {
                ($min:literal, $max:literal) => {};
            }
            /// A macro to define an optional ranged integer with an automatically computed inner type.
            #[macro_export] macro_rules! opt_int
            {
                ($min:literal, $max:literal) => {};
            }
            /// The error type returned when a checked integral type conversion fails.
            #[derive(Debug, Clone, Copy, PartialEq, Eq)]
            pub struct TryFromIntError;

            impl fmt::Display for TryFromIntError 
            {
                #[inline] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                {
                    f.write_str("out of range integral type conversion attempted")
                }
            }
            impl ::error::Error for TryFromIntError {}
            /// An error which can be returned when parsing an integer.
            #[derive(Debug, Clone, PartialEq, Eq)]
            pub struct ParseIntError 
            {
                kind: IntErrorKind,
            }

            impl ParseIntError 
            {
                /// Outputs the detailed cause of parsing an integer failing.
                #[allow(clippy::missing_const_for_fn)]
                #[inline( always )] pub fn kind(&self) -> &IntErrorKind {
                    &self.kind
                }
            }

            impl fmt::Display for ParseIntError 
            {
                #[inline] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                {
                    match self.kind 
                    {
                        IntErrorKind::Empty => "cannot parse integer from empty string",
                        IntErrorKind::InvalidDigit => "invalid digit found in string",
                        IntErrorKind::PosOverflow => "number too large to fit in target type",
                        IntErrorKind::NegOverflow => "number too small to fit in target type",
                        IntErrorKind::Zero => "number would be zero for non-zero type",
                        _ => "Unknown Int error kind",
                    }
                    .fmt(f)
                }
            }

            impl ::error::Error for ParseIntError {}
            /// `?` for `Option` types, usable in `const` contexts.
            macro_rules! const_try_opt
            {
                ($e:expr) => {
                    match $e {
                        Some(value) => value,
                        None => return None,
                    }
                };
            }
            /// Output the given tokens if the type is signed, otherwise output nothing.
            macro_rules! if_signed 
            {
                (true $($x:tt)*) => { $($x)*};
                (false $($x:tt)*) => {};
            }
            /// Output the given tokens if the type is unsigned, otherwise output nothing.
            macro_rules! if_unsigned 
            {
                (true $($x:tt)*) => {};
                (false $($x:tt)*) => { $($x)* };
            }
            /// `"A"` if `true`, `"An"` if `false`.
            macro_rules! article 
            {
                (true) => {
                    "An"
                };
                (false) => {
                    "A"
                };
            }
            /// `Option::unwrap_unchecked`, but usable in `const` contexts.
            macro_rules! unsafe_unwrap_unchecked
            {
                ($e:expr) => {{
                    let opt = $e;
                    debug_assert!(opt.is_some());
                    match $e {
                        Some(value) => value,
                        None => ::hint::unreachable_unchecked(),
                    }
                }};
            }
            /// Informs the optimizer that a condition is always true.
            #[inline] const unsafe fn assert_unchecked(b: bool) 
            {
                debug_assert!(b);
                if !b {
                    // Safety: The caller must ensure that `b` is true.
                    unsafe { ::hint::unreachable_unchecked() }
                }
            }
            /// Output the provided code if and only if the list does not include `rand_09`.
            macro_rules! if_not_manual_rand_09 
            {
                ([rand_09 $($rest:ident)*] $($output:tt)*) => {};
                ([] $($output:tt)*) => {
                    $($output)*
                };
                ([$first:ident $($rest:ident)*] $($output:tt)*) => {
                    if_not_manual_rand_09!([$($rest)*] $($output)*);
                };
            }
            /// Implement a ranged integer type.
            macro_rules! impl_ranged
            {
                ($(
                    $type:ident 
                    {
                        mod_name: $mod_name:ident
                        internal: $internal:ident
                        signed: $is_signed:ident
                        unsigned: $unsigned_type:ident
                        optional: $optional_type:ident
                        $(manual: [$($skips:ident)+])?
                    }
                )*) => 
                {$(
                    #[repr(transparent)] #[derive(Clone, Copy, Eq, Ord, Hash)]
                    pub struct $type<const MIN: $internal, const MAX: $internal>(
                        Unsafe<$internal>,
                    );
                    /// This type is useful when you need to store an optional ranged value in a struct, but
                    /// do not want the overhead of an `Option` type.
                    #[doc = concat!("obtained with [`", stringify!($optional_type), "::get`].")]
                    #[repr(transparent)]
                    #[derive(Clone, Copy, Eq, Hash)]
                    pub struct $optional_type<const MIN: $internal, const MAX: $internal>(
                        $internal,
                    );

                    impl $type<0, 0> 
                    {
                        #[inline( always )] pub const fn exact<const VALUE: $internal>() -> $type<VALUE, VALUE> {
                            unsafe { $type::new_unchecked(VALUE) }
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> $type<MIN, MAX>
                    {
                        /// The smallest value that can be represented by this type.
                        pub const MIN: Self = Self::new_static::<MIN>();
                        /// The largest value that can be represented by this type.
                        pub const MAX: Self = Self::new_static::<MAX>();
                        /// Creates a ranged integer without checking the value.
                        #[inline( always )] pub const unsafe fn new_unchecked(value: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                assert_unchecked(MIN <= value && value <= MAX);
                                Self(Unsafe::new(value))
                            }
                        }
                        /// Returns the value as a primitive type.
                        #[inline( always )] pub const fn get(self) -> $internal 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe { assert_unchecked(MIN <= *self.0.get() && *self.0.get() <= MAX) };
                            *self.0.get()
                        }

                        #[inline( always )] pub const fn get_ref(&self) -> &$internal 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            let value = self.0.get();
                            unsafe { assert_unchecked(MIN <= *value && *value <= MAX) };
                            value
                        }
                        /// Creates a ranged integer if the given value is in the range `MIN..=MAX`.
                        #[inline( always )] pub const fn new(value: $internal) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            if value < MIN || value > MAX {
                                None
                            } else {
                                // Safety: The value is in range.
                                Some(unsafe { Self::new_unchecked(value) })
                            }
                        }
                        /// Creates a ranged integer with a statically known value.
                        #[inline( always )] pub const fn new_static<const VALUE: $internal>() -> Self
                        {
                            <($type<MIN, VALUE>, $type<VALUE, MAX>) as StaticIsValid>::ASSERT;
                            // Safety: The value is in range.
                            unsafe { Self::new_unchecked(VALUE) }
                        }
                        /// Creates a ranged integer with the given value, saturating if it is out of range.
                        #[inline] pub const fn new_saturating(value: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            if value < MIN {
                                Self::MIN
                            } else if value > MAX {
                                Self::MAX
                            } else {
                                // Safety: The value is in range.
                                unsafe { Self::new_unchecked(value) }
                            }
                        }
                        /// Expand the range that the value may be in.
                        #[inline( always )] pub const fn expand<const MINIMUM: $internal, const MAXIMUM: $internal>
                        ( self ) -> $type<MINIMUM, MAXIMUM>
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            <$type<MINIMUM, MAXIMUM> as RangeIsValid>::ASSERT;
                            <($type<MIN, MAX>, $type<MINIMUM, MAXIMUM>) as ExpandIsValid>
                                ::ASSERT;
                            // Safety: The range is widened.
                            unsafe { $type::new_unchecked(self.get()) }
                        }
                        /// Attempt to narrow the range that the value may be in.
                        #[inline( always )] pub const fn narrow
                        <
                            const MINIMUM: $internal,
                            const MAXIMUM: $internal,
                        >(self) -> Option<$type<MINIMUM, MAXIMUM>> 
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            <$type<MINIMUM, MAXIMUM> as RangeIsValid>::ASSERT;
                            <($type<MIN, MAX>, $type<MINIMUM, MAXIMUM>) as NarrowIsValid>::ASSERT;
                            $type::<MINIMUM, MAXIMUM>::new(self.get())
                        }
                        /// Converts a string slice in a given base to an integer.
                        #[inline] pub fn from_str_radix(src: &str, radix: u32) -> ::result::Result<Self, ParseIntError> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            match $internal::from_str_radix(src, radix) {
                                Ok(value) if value > MAX => {
                                    Err(ParseIntError { kind: IntErrorKind::PosOverflow })
                                }
                                Ok(value) if value < MIN => {
                                    Err(ParseIntError { kind: IntErrorKind::NegOverflow })
                                }
                                Ok(value) => Ok(unsafe { Self::new_unchecked(value) }),
                                Err(e) => Err(ParseIntError { kind: e.kind().clone() }),
                            }
                        }
                        /// Checked integer addition.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_add(self, rhs: $internal) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_add(rhs)))
                        }
                        /// Unchecked integer addition.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_add(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_add(rhs)))
                            }
                        }
                        /// Checked integer addition.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_sub(self, rhs: $internal) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_sub(rhs)))
                        }
                        /// Unchecked integer subtraction.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_sub(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_sub(rhs)))
                            }
                        }
                        /// Checked integer addition.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_mul(self, rhs: $internal) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_mul(rhs)))
                        }
                        /// Unchecked integer multiplication.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_mul(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_mul(rhs)))
                            }
                        }
                        /// Checked integer addition.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_div(self, rhs: $internal) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_div(rhs)))
                        }
                        /// Unchecked integer division.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_div(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_div(rhs)))
                            }
                        }
                        /// Checked Euclidean division.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_div_euclid(self, rhs: $internal) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_div_euclid(rhs)))
                        }
                        /// Unchecked Euclidean division.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_div_euclid(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(
                                    unsafe_unwrap_unchecked!(self.get().checked_div_euclid(rhs))
                                )
                            }
                        }

                        if_unsigned!($is_signed
                        /// Remainder.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn rem<const RHS_VALUE: $internal>(
                            self,
                            rhs: $type<RHS_VALUE, RHS_VALUE>,
                        ) -> $type<0, RHS_VALUE> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe { $type::new_unchecked(self.get() % rhs.get()) }
                        });
                        /// Checked integer remainder.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_rem(self, rhs: $internal) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_rem(rhs)))
                        }
                        /// Unchecked remainder.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_rem(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_rem(rhs)))
                            }
                        }
                        /// Checked Euclidean remainder.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_rem_euclid(self, rhs: $internal) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_rem_euclid(rhs)))
                        }
                        /// Unchecked Euclidean remainder.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_rem_euclid(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(
                                    unsafe_unwrap_unchecked!(self.get().checked_rem_euclid(rhs))
                                )
                            }
                        }
                        /// Checked negation.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_neg(self) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_neg()))
                        }
                        /// Unchecked negation.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_neg(self) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe { Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_neg())) }
                        }
                        /// Negation.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const fn neg(self) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            <Self as NegIsSafe>::ASSERT;
                            unsafe { self.unchecked_neg() }
                        }
                        /// Checked shift left.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_shl(self, rhs: u32) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_shl(rhs)))
                        }
                        /// Unchecked shift left.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_shl(self, rhs: u32) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_shl(rhs)))
                            }
                        }
                        /// Checked shift right.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_shr(self, rhs: u32) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_shr(rhs)))
                        }
                        /// Unchecked shift right.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_shr(self, rhs: u32) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_shr(rhs)))
                            }
                        }

                        if_signed!($is_signed
                        /// Checked absolute value.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_abs(self) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_abs()))
                        }
                        /// Unchecked absolute value.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_abs(self) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe { Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_abs())) }
                        }
                        /// Absolute value.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const fn abs(self) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            <Self as AbsIsSafe>::ASSERT;
                            unsafe { self.unchecked_abs() }
                        });
                        /// Checked exponentiation.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn checked_pow(self, exp: u32) -> Option<Self> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(const_try_opt!(self.get().checked_pow(exp)))
                        }
                        /// Unchecked exponentiation.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline( always )] pub const unsafe fn unchecked_pow(self, exp: u32) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            unsafe {
                                Self::new_unchecked(unsafe_unwrap_unchecked!(self.get().checked_pow(exp)))
                            }
                        }
                        /// Saturating integer addition.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn saturating_add(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new_saturating(self.get().saturating_add(rhs))
                        }
                        /// Saturating integer subtraction.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn saturating_sub(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new_saturating(self.get().saturating_sub(rhs))
                        }

                        if_signed!($is_signed
                        /// Saturating integer negation.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn saturating_neg(self) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new_saturating(self.get().saturating_neg())
                        });

                        if_signed!($is_signed
                        /// Saturating absolute value.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn saturating_abs(self) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new_saturating(self.get().saturating_abs())
                        });
                        /// Saturating integer multiplication.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn saturating_mul(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new_saturating(self.get().saturating_mul(rhs))
                        }
                        /// Saturating integer exponentiation.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn saturating_pow(self, exp: u32) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new_saturating(self.get().saturating_pow(exp))
                        }
                        
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] const fn rem_euclid_unsigned
                        (
                            rhs: $internal,
                            range_len: $unsigned_type
                        ) -> $unsigned_type 
                        {
                            if rhs >= 0 {
                                (rhs as $unsigned_type) % range_len
                            } else {
                                // Let ux refer to an n bit unsigned and ix refer to an n bit signed integer.
                                // Can't write -ux or ux::abs() method. This gets around compilation error.
                                // `wrapping_sub` is to handle rhs = ix::MIN since ix::MIN = -ix::MAX-1
                                let rhs_abs = ($internal::wrapping_sub(0, rhs)) as $unsigned_type;
                                // Largest multiple of range_len <= type::MAX is lowest if range_len * 2 > ux::MAX -> range_len >= ux::MAX / 2 + 1
                                // Also = 0 in mod range_len arithmetic.
                                // Sub from this large number rhs_abs (same as sub -rhs = -(-rhs) = add rhs) to get rhs % range_len
                                // ix::MIN = -2^(n-1) so 0 <= rhs_abs <= 2^(n-1)
                                // ux::MAX / 2 + 1 = 2^(n-1) so this subtraction will always be a >= 0 after subtraction
                                // Thus converting rhs signed negative to equivalent positive value in mod range_len arithmetic
                                ((($unsigned_type::MAX / range_len) * range_len) - (rhs_abs)) % range_len
                            }
                        }
                        /// Wrapping integer addition.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn wrapping_add(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            // Forward to internal type's impl if same as type.
                            if MIN == $internal::MIN && MAX == $internal::MAX {
                                // Safety: std's wrapping methods match ranged arithmetic when the range is the internal datatype's range.
                                return unsafe { Self::new_unchecked(self.get().wrapping_add(rhs)) }
                            }

                            let inner = self.get();

                            // Won't overflow because of std impl forwarding.
                            let range_len = MAX.abs_diff(MIN) + 1;

                            // Calculate the offset with proper handling for negative rhs
                            let offset = Self::rem_euclid_unsigned(rhs, range_len);

                            let greater_vals = MAX.abs_diff(inner);
                            // No wrap
                            if offset <= greater_vals {
                                // Safety:
                                // if inner >= 0 -> No overflow beyond range (offset <= greater_vals)
                                // if inner < 0: Same as >=0 with caveat:
                                // `(signed as unsigned).wrapping_add(unsigned) as signed` is the same as
                                // `signed::checked_add_unsigned(unsigned).unwrap()` or `wrapping_add_unsigned`
                                // (the difference doesn't matter since it won't overflow),
                                // but unsigned integers don't have either method so it won't compile that way.
                                unsafe { Self::new_unchecked(
                                    ((inner as $unsigned_type).wrapping_add(offset)) as $internal
                                ) }
                            }
                            // Wrap
                            else {
                                // Safety:
                                // - offset < range_len by rem_euclid (MIN + ... safe)
                                // - offset > greater_vals from if statement (offset - (greater_vals + 1) safe)
                                //
                                // again using `(signed as unsigned).wrapping_add(unsigned) as signed` = `checked_add_unsigned` trick
                                unsafe { Self::new_unchecked(
                                    ((MIN as $unsigned_type).wrapping_add(
                                        offset - (greater_vals + 1)
                                    )) as $internal
                                ) }
                            }
                        }
                        /// Wrapping integer subtraction.
                        #[must_use = "this returns the result of the operation, without modifying the original"]
                        #[inline] pub const fn wrapping_sub(self, rhs: $internal) -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            // Forward to internal type's impl if same as type.
                            if MIN == $internal::MIN && MAX == $internal::MAX {
                                // Safety: std's wrapping methods match ranged arithmetic when the range is the internal datatype's range.
                                return unsafe { Self::new_unchecked(self.get().wrapping_sub(rhs)) }
                            }

                            let inner = self.get();

                            // Won't overflow because of std impl forwarding.
                            let range_len = MAX.abs_diff(MIN) + 1;

                            // Calculate the offset with proper handling for negative rhs
                            let offset = Self::rem_euclid_unsigned(rhs, range_len);

                            let lesser_vals = MIN.abs_diff(inner);
                            // No wrap
                            if offset <= lesser_vals {
                                // Safety:
                                // if inner >= 0 -> No overflow beyond range (offset <= greater_vals)
                                // if inner < 0: Same as >=0 with caveat:
                                // `(signed as unsigned).wrapping_sub(unsigned) as signed` is the same as
                                // `signed::checked_sub_unsigned(unsigned).unwrap()` or `wrapping_sub_unsigned`
                                // (the difference doesn't matter since it won't overflow below 0),
                                // but unsigned integers don't have either method so it won't compile that way.
                                unsafe { Self::new_unchecked(
                                    ((inner as $unsigned_type).wrapping_sub(offset)) as $internal
                                ) }
                            }
                            // Wrap
                            else {
                                // Safety:
                                // - offset < range_len by rem_euclid (MAX - ... safe)
                                // - offset > lesser_vals from if statement (offset - (lesser_vals + 1) safe)
                                //
                                // again using `(signed as unsigned).wrapping_sub(unsigned) as signed` = `checked_sub_unsigned` trick
                                unsafe { Self::new_unchecked(
                                    ((MAX as $unsigned_type).wrapping_sub(
                                        offset - (lesser_vals + 1)
                                    )) as $internal
                                ) }
                            }
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> $optional_type<MIN, MAX> 
                    {
                        /// The value used as the niche. Must not be in the range `MIN..=MAX`.
                        const NICHE: $internal = match (MIN, MAX) {
                            ($internal::MIN, $internal::MAX) => panic!("type has no niche"),
                            ($internal::MIN, _) => $internal::MAX,
                            (_, _) => $internal::MIN,
                        };
                        /// An optional ranged value that is not present.
                        #[allow(non_upper_case_globals)]
                        pub const None: Self = Self(Self::NICHE);
                        /// Creates an optional ranged value that is present.
                        #[inline( always )] pub const fn Some(value: $type<MIN, MAX>) -> Self
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            Self(value.get())
                        }
                        /// Returns the value as the standard library's [`Option`] type.
                        #[inline( always )] pub const fn get(self) -> Option<$type<MIN, MAX>> 
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            if self.0 == Self::NICHE {
                                None
                            } else {
                                // Safety: A stored value that is not the niche is always in range.
                                Some(unsafe { $type::new_unchecked(self.0) })
                            }
                        }
                        /// Creates an optional ranged integer without checking the value.
                        #[inline( always )] pub const unsafe fn some_unchecked(value: $internal) -> Self
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            // Safety: The caller must ensure that the value is in range.
                            unsafe { assert_unchecked(MIN <= value && value <= MAX) };
                            Self(value)
                        }
                        /// Obtain the inner value of the struct. This is useful for comparisons.
                        #[inline( always )] pub const fn inner(self) -> $internal 
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            self.0
                        }
                        /// Obtain the value of the struct as an `Option` of the primitive type.
                        #[inline( always )] pub const fn get_primitive(self) -> Option<$internal> 
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            Some(const_try_opt!(self.get()).get())
                        }
                        /// Returns `true` if the value is the niche value.
                        #[inline( always )] pub const fn is_none(&self) -> bool 
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            self.get().is_none()
                        }
                        /// Returns `true` if the value is not the niche value.
                        #[inline( always )] pub const fn is_some(&self) -> bool 
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            self.get().is_some()
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> fmt::Debug for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            self.get().fmt(f)
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> fmt::Debug for $optional_type<MIN, MAX> 
                    {
                        #[inline( always )] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            self.get().fmt(f)
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> fmt::Display for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            self.get().fmt(f)
                        }
                    }
                    
                    impl<const MIN: $internal, const MAX: $internal> Default for $optional_type<MIN, MAX> 
                    {
                        #[inline( always )] fn default() -> Self
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            Self::None
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> AsRef<$internal> for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn as_ref(&self) -> &$internal 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            &self.get_ref()
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> Borrow<$internal> for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn borrow(&self) -> &$internal 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            &self.get_ref()
                        }
                    }

                    impl
                    <
                        const MIN_A: $internal,
                        const MAX_A: $internal,
                        const MIN_B: $internal,
                        const MAX_B: $internal,
                    >
                    PartialEq<$type<MIN_B, MAX_B>> for $type<MIN_A, MAX_A> 
                    {
                        #[inline( always )] fn eq(&self, other: &$type<MIN_B, MAX_B>) -> bool 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            <$type<MIN_B, MAX_B> as RangeIsValid>::ASSERT;
                            self.get() == other.get()
                        }
                    }

                    impl
                    <
                        const MIN_A: $internal,
                        const MAX_A: $internal,
                        const MIN_B: $internal,
                        const MAX_B: $internal,
                    >
                    PartialEq<$optional_type<MIN_B, MAX_B>> for $optional_type<MIN_A, MAX_A> 
                    {
                        #[inline( always )] fn eq(&self, other: &$optional_type<MIN_B, MAX_B>) -> bool 
                        {
                            <$type<MIN_A, MAX_A> as RangeIsValid>::ASSERT;
                            <$type<MIN_B, MAX_B> as RangeIsValid>::ASSERT;
                            self.inner() == other.inner()
                        }
                    }

                    impl
                    <
                        const MIN_A: $internal,
                        const MAX_A: $internal,
                        const MIN_B: $internal,
                        const MAX_B: $internal,
                    >
                    PartialOrd<$type<MIN_B, MAX_B>> for $type<MIN_A, MAX_A> 
                    {
                        #[inline( always )] fn partial_cmp(&self, other: &$type<MIN_B, MAX_B>) -> Option<Ordering> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            <$type<MIN_B, MAX_B> as RangeIsValid>::ASSERT;
                            self.get().partial_cmp(&other.get())
                        }
                    }

                    impl
                    <
                        const MIN_A: $internal,
                        const MAX_A: $internal,
                        const MIN_B: $internal,
                        const MAX_B: $internal,
                    >
                    PartialOrd<$optional_type<MIN_B, MAX_B>> for $optional_type<MIN_A, MAX_A> 
                    {
                        #[inline] fn partial_cmp(&self, other: &$optional_type<MIN_B, MAX_B>) -> Option<Ordering> 
                        {
                            <$type<MIN_A, MAX_A> as RangeIsValid>::ASSERT;
                            <$type<MIN_B, MAX_B> as RangeIsValid>::ASSERT;
                            if self.is_none() && other.is_none() {
                                Some(Ordering::Equal)
                            } else if self.is_none() {
                                Some(Ordering::Less)
                            } else if other.is_none() {
                                Some(Ordering::Greater)
                            } else {
                                self.inner().partial_cmp(&other.inner())
                            }
                        }
                    }

                    impl<const MIN:$internal, const MAX:$internal> Ord for $optional_type<MIN, MAX> 
                    {
                        #[inline] fn cmp(&self, other: &Self) -> Ordering 
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            if self.is_none() && other.is_none() {
                                Ordering::Equal
                            } else if self.is_none() {
                                Ordering::Less
                            } else if other.is_none() {
                                Ordering::Greater
                            } else {
                                self.inner().cmp(&other.inner())
                            }
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> fmt::Binary for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            self.get().fmt(f)
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> fmt::LowerHex for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            self.get().fmt(f)
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> fmt::UpperHex for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            self.get().fmt(f)
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> fmt::LowerExp for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            self.get().fmt(f)
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> fmt::UpperExp for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            self.get().fmt(f)
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> fmt::Octal for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            self.get().fmt(f)
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> From<$type<MIN, MAX>> for $internal 
                    {
                        #[inline( always )] fn from(value: $type<MIN, MAX>) -> Self
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            value.get()
                        }
                    }

                    impl<const MIN:$internal, const MAX:$internal> From<$type<MIN, MAX>> for $optional_type<MIN, MAX> 
                    {
                        #[inline( always )] fn from(value: $type<MIN, MAX>) -> Self
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            Self::Some(value)
                        }
                    }

                    impl<const MIN:$internal, const MAX:$internal> From<Option<$type<MIN, MAX>>> for 
                    $optional_type<MIN, MAX> 
                    {
                        #[inline( always )] fn from(value: Option<$type<MIN, MAX>>) -> Self
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            match value {
                                Some(value) => Self::Some(value),
                                None => Self::None,
                            }
                        }
                    }

                    impl<const MIN:$internal, const MAX:$internal> From<$optional_type<MIN, MAX>> for 
                    Option<$type<MIN, MAX>> 
                    {
                        #[inline( always )] fn from(value: $optional_type<MIN, MAX>) -> Self
                        {
                            <$type<MIN, MAX> as RangeIsValid>::ASSERT;
                            value.get()
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> ::convert::TryFrom<$internal> for $type<MIN, MAX> 
                    {
                        type Error = TryFromIntError;

                        #[inline] fn try_from(value: $internal) -> ::result::Result<Self, Self::Error> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::new(value).ok_or(TryFromIntError)
                        }
                    }

                    impl<const MIN: $internal, const MAX: $internal> FromStr for $type<MIN, MAX>
                    {
                        type Err = ParseIntError;

                        #[inline] fn from_str(s: &str) -> ::reszult::Result<Self, Self::Err> 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            let value = s.parse::<$internal>().map_err(|e| ParseIntError {
                                kind: e.kind().clone()
                            })?;
                            if value < MIN {
                                Err(ParseIntError { kind: IntErrorKind::NegOverflow })
                            } else if value > MAX {
                                Err(ParseIntError { kind: IntErrorKind::PosOverflow })
                            } else {
                                // Safety: The value was previously checked for validity.
                                Ok(unsafe { Self::new_unchecked(value) })
                            }
                        }
                    }
                    
                    impl<const MIN: $internal, const MAX: $internal> ::num::Bounded for $type<MIN, MAX> 
                    {
                        #[inline( always )] fn min_value() -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::MIN
                        }

                        #[inline( always )] fn max_value() -> Self 
                        {
                            <Self as RangeIsValid>::ASSERT;
                            Self::MAX
                        }
                    }
                )*};
            }

            impl_ranged! 
            {
                RangedU8 {
                    mod_name: ranged_u8
                    internal: u8
                    signed: false
                    unsigned: u8
                    optional: OptionRangedU8
                }
                RangedU16 {
                    mod_name: ranged_u16
                    internal: u16
                    signed: false
                    unsigned: u16
                    optional: OptionRangedU16
                }
                RangedU32 {
                    mod_name: ranged_u32
                    internal: u32
                    signed: false
                    unsigned: u32
                    optional: OptionRangedU32
                }
                RangedU64 {
                    mod_name: ranged_u64
                    internal: u64
                    signed: false
                    unsigned: u64
                    optional: OptionRangedU64
                }
                RangedU128 {
                    mod_name: ranged_u128
                    internal: u128
                    signed: false
                    unsigned: u128
                    optional: OptionRangedU128
                }
                RangedUsize {
                    mod_name: ranged_usize
                    internal: usize
                    signed: false
                    unsigned: usize
                    optional: OptionRangedUsize
                    manual: [rand_09]
                }
                RangedI8 {
                    mod_name: ranged_i8
                    internal: i8
                    signed: true
                    unsigned: u8
                    optional: OptionRangedI8
                }
                RangedI16 {
                    mod_name: ranged_i16
                    internal: i16
                    signed: true
                    unsigned: u16
                    optional: OptionRangedI16
                }
                RangedI32 {
                    mod_name: ranged_i32
                    internal: i32
                    signed: true
                    unsigned: u32
                    optional: OptionRangedI32
                }
                RangedI64 {
                    mod_name: ranged_i64
                    internal: i64
                    signed: true
                    unsigned: u64
                    optional: OptionRangedI64
                }
                RangedI128 {
                    mod_name: ranged_i128
                    internal: i128
                    signed: true
                    unsigned: u128
                    optional: OptionRangedI128
                }
                RangedIsize {
                    mod_name: ranged_isize
                    internal: isize
                    signed: true
                    unsigned: usize
                    optional: OptionRangedIsize
                    manual: [rand_09]
                }
            }
            /// The [`Date`] struct and its associated `impl`s.
            type Year = RangedI32<MIN_YEAR, MAX_YEAR>;
            /// The minimum valid year.
            pub const MIN_YEAR: i32 = -999_999;
            /// The maximum valid year.
            pub const MAX_YEAR: i32 = 999_999;
            pub const fn weeks_in_year(year: i32) -> u8
            {
                match year % 400
                {
                    -396 | -391 | -385 | -380 | -374 | -368 | -363 | -357 | -352 | -346 | -340 | -335
                    | -329 | -324 | -318 | -312 | -307 | -301 | -295 | -289 | -284 | -278 | -272 | -267
                    | -261 | -256 | -250 | -244 | -239 | -233 | -228 | -222 | -216 | -211 | -205 | -199
                    | -193 | -188 | -182 | -176 | -171 | -165 | -160 | -154 | -148 | -143 | -137 | -132
                    | -126 | -120 | -115 | -109 | -104 | -97 | -92 | -86 | -80 | -75 | -69 | -64 | -58
                    | -52 | -47 | -41 | -36 | -30 | -24 | -19 | -13 | -8 | -2 | 4 | 9 | 15 | 20 | 26 | 32
                    | 37 | 43 | 48 | 54 | 60 | 65 | 71 | 76 | 82 | 88 | 93 | 99 | 105 | 111 | 116 | 122
                    | 128 | 133 | 139 | 144 | 150 | 156 | 161 | 167 | 172 | 178 | 184 | 189 | 195 | 201
                    | 207 | 212 | 218 | 224 | 229 | 235 | 240 | 246 | 252 | 257 | 263 | 268 | 274 | 280
                    | 285 | 291 | 296 | 303 | 308 | 314 | 320 | 325 | 331 | 336 | 342 | 348 | 353 | 359
                    | 364 | 370 | 376 | 381 | 387 | 392 | 398 => 53,
                    _ => 52,
                }
            }
            /// Date in the proleptic Gregorian calendar.
            #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
            pub struct Date 
            {
                /// Bitpacked field containing the year, ordinal, and whether the year is a leap year.
                value: NonZeroI32,
            }

            impl Date 
            {
                /// The Unix epoch: 1970-01-01
                pub const UNIX_EPOCH: Self = unsafe 
                { Self::__from_ordinal_date_unchecked(1970, 1) };
                /// The minimum valid `Date`.
                pub const MIN: Self = unsafe 
                { Self::__from_ordinal_date_unchecked(MIN_YEAR, 1) };
                /// The maximum valid `Date`.
                pub const MAX: Self = unsafe 
                { Self::__from_ordinal_date_unchecked(MAX_YEAR, ::time::days_in_year(MAX_YEAR)) };
                /// Construct a `Date` from its internal representation, 
                /// the validity of which must be guaranteed by the caller.
                const unsafe fn from_parts(year: i32, is_leap_year: bool, ordinal: u16) -> Self 
                {
                    debug_assert!(year >= MIN_YEAR);
                    debug_assert!(year <= MAX_YEAR);
                    debug_assert!(ordinal != 0);
                    debug_assert!(ordinal <= ::time::days_in_year(year));
                    debug_assert!(::time::is_leap_year(year) == is_leap_year);

                    Self 
                    {
                        value: unsafe 
                        {
                            NonZeroI32::new_unchecked
                            (
                                (year << 10) | ((is_leap_year as i32) << 9) | ordinal as i32,
                            )
                        },
                    }
                }
                /// Construct a `Date` from the year and ordinal values,
                /// the validity of which must be guaranteed by the caller.
                pub const unsafe fn __from_ordinal_date_unchecked(year: i32, ordinal: u16) -> Self 
                {
                    unsafe { Self::from_parts(year, ::time::is_leap_year(year), ordinal) }
                }
                /// Attempt to create a `Date` from the year, month, and day.
                pub const fn from_calendar_date
                (
                    year: i32,
                    month: Month,
                    day: u8,
                ) -> Result<Self, error::time::ComponentRange> 
                {
                    /// Cumulative days through the beginning of a month in both common and leap years.
                    const DAYS_CUMULATIVE_COMMON_LEAP: [[u16; 12]; 2] = [
                        [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
                        [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335],
                    ];

                    ensure_ranged!(Year: year);
                    match day {
                        1..=28 => {}
                        29..=31 if day <= month.length(year) => {}
                        _ => {
                            return Err(error::ComponentRange {
                                name: "day",
                                minimum: 1,
                                maximum: month.length(year) as i64,
                                value: day as i64,
                                conditional_message: Some("for the given month and year"),
                            });
                        }
                    }

                    // Safety: `ordinal` is not zero.
                    Ok(unsafe {
                        Self::__from_ordinal_date_unchecked(
                            year,
                            DAYS_CUMULATIVE_COMMON_LEAP[is_leap_year(year) as usize][month as usize - 1]
                                + day as u16,
                        )
                    })
                }
                /// Attempt to create a `Date` from the year and ordinal day number.
                pub const fn from_ordinal_date(year: i32, ordinal: u16) -> Result<Self, error::ComponentRange> {
                    ensure_ranged!(Year: year);
                    match ordinal {
                        1..=365 => {}
                        366 if is_leap_year(year) => {}
                        _ => {
                            return Err(error::ComponentRange {
                                name: "ordinal",
                                minimum: 1,
                                maximum: days_in_year(year) as i64,
                                value: ordinal as i64,
                                conditional_message: Some("for the given year"),
                            });
                        }
                    }
                    
                    Ok(unsafe { Self::__from_ordinal_date_unchecked(year, ordinal) })
                }
                /// Attempt to create a `Date` from the ISO year, week, and weekday.
                pub const fn from_iso_week_date(
                    year: i32,
                    week: u8,
                    weekday: Weekday,
                ) -> Result<Self, error::ComponentRange> {
                    ensure_ranged!(Year: year);
                    match week {
                        1..=52 => {}
                        53 if week <= weeks_in_year(year) => {}
                        _ => {
                            return Err(error::ComponentRange {
                                name: "week",
                                minimum: 1,
                                maximum: weeks_in_year(year) as i64,
                                value: week as i64,
                                conditional_message: Some("for the given year"),
                            });
                        }
                    }

                    let adj_year = year - 1;
                    let raw = 365 * adj_year + div_floor!(adj_year, 4) - div_floor!(adj_year, 100)
                        + div_floor!(adj_year, 400);
                    let jan_4 = match (raw % 7) as i8 {
                        -6 | 1 => 8,
                        -5 | 2 => 9,
                        -4 | 3 => 10,
                        -3 | 4 => 4,
                        -2 | 5 => 5,
                        -1 | 6 => 6,
                        _ => 7,
                    };
                    let ordinal = week as i16 * 7 + weekday.number_from_monday() as i16 - jan_4;

                    Ok(if ordinal <= 0 {
                        // Safety: `ordinal` is not zero.
                        unsafe {
                            Self::__from_ordinal_date_unchecked(
                                year - 1,
                                (ordinal as u16).wrapping_add(days_in_year(year - 1)),
                            )
                        }
                    } else if ordinal > days_in_year(year) as i16 {
                        // Safety: `ordinal` is not zero.
                        unsafe {
                            Self::__from_ordinal_date_unchecked(year + 1, ordinal as u16 - days_in_year(year))
                        }
                    } else {
                        // Safety: `ordinal` is not zero.
                        unsafe { Self::__from_ordinal_date_unchecked(year, ordinal as u16) }
                    })
                }
                /// Create a `Date` from the Julian day.
                pub const fn from_julian_day(julian_day: i32) -> Result<Self, error::ComponentRange> {
                    type JulianDay = RangedI32<{ Date::MIN.to_julian_day() }, { Date::MAX.to_julian_day() }>;
                    ensure_ranged!(JulianDay: julian_day);
                    
                    Ok(unsafe { Self::from_julian_day_unchecked(julian_day) })
                }
                /// Create a `Date` from the Julian day.
                pub const unsafe fn from_julian_day_unchecked(julian_day: i32) -> Self 
                {
                    debug_assert!(julian_day >= Self::MIN.to_julian_day());
                    debug_assert!(julian_day <= Self::MAX.to_julian_day());

                    const S: i32 = 2_500;
                    const K: i32 = 719_468 + 146_097 * S;
                    const L: i32 = 400 * S;

                    let julian_day = julian_day - 2_440_588;
                    let n = (julian_day + K) as u32;

                    let n_1 = 4 * n + 3;
                    let c = n_1 / 146_097;
                    let n_c = n_1 % 146_097 / 4;

                    let n_2 = 4 * n_c + 3;
                    let p_2 = 2_939_745 * n_2 as u64;
                    let z = (p_2 >> 32) as u32;
                    let n_y = p_2 as u32 / 2_939_745 / 4;
                    let y = 100 * c + z;

                    let j = n_y >= 306;
                    let y_g = y as i32 - L + j as i32;

                    let is_leap_year = is_leap_year(y_g);
                    let ordinal = if j {
                        n_y - 305
                    } else {
                        n_y + 60 + is_leap_year as u32
                    };
                    
                    unsafe { Self::from_parts(y_g, is_leap_year, ordinal as u16) }
                }
                /// Whether `is_leap_year(self.year())` is `true`.
                const fn is_in_leap_year(self) -> bool {
                    (self.value.get() >> 9) & 1 == 1
                }
                /// Get the year of the date.
                pub const fn year(self) -> i32 {
                    self.value.get() >> 10
                }
                /// Get the month.
                pub const fn month(self) -> Month {
                    let ordinal = self.ordinal() as u32;
                    let jan_feb_len = 59 + self.is_in_leap_year() as u32;

                    let (month_adj, ordinal_adj) = if ordinal <= jan_feb_len {
                        (0, 0)
                    } else {
                        (2, jan_feb_len)
                    };

                    let ordinal = ordinal - ordinal_adj;
                    let month = ((ordinal * 268 + 8031) >> 13) + month_adj;
                    
                    unsafe {
                        match Month::from_number(NonZeroU8::new_unchecked(month as u8)) {
                            Ok(month) => month,
                            Err(_) => ::hint::unreachable_unchecked(),
                        }
                    }
                }
                /// Get the day of the month.
                pub const fn day(self) -> u8 {
                    let ordinal = self.ordinal() as u32;
                    let jan_feb_len = 59 + self.is_in_leap_year() as u32;

                    let ordinal_adj = if ordinal <= jan_feb_len {
                        0
                    } else {
                        jan_feb_len
                    };

                    let ordinal = ordinal - ordinal_adj;
                    let month = (ordinal * 268 + 8031) >> 13;
                    let days_in_preceding_months = (month * 3917 - 3866) >> 7;
                    (ordinal - days_in_preceding_months) as u8
                }
                /// Get the day of the year.
                pub const fn ordinal(self) -> u16 {
                    (self.value.get() & 0x1FF) as u16
                }
                /// Get the ISO 8601 year and week number.
                pub const fn iso_year_week(self) -> (i32, u8) {
                    let (year, ordinal) = self.to_ordinal_date();

                    match ((ordinal + 10 - self.weekday().number_from_monday() as u16) / 7) as u8 {
                        0 => (year - 1, weeks_in_year(year - 1)),
                        53 if weeks_in_year(year) == 52 => (year + 1, 1),
                        week => (year, week),
                    }
                }
                /// Get the ISO week number.
                pub const fn iso_week(self) -> u8 {
                    self.iso_year_week().1
                }
                /// Get the week number where week 1 begins on the first Sunday.
                pub const fn sunday_based_week(self) -> u8 {
                    ((self.ordinal() as i16 - self.weekday().number_days_from_sunday() as i16 + 6) / 7) as u8
                }
                /// Get the week number where week 1 begins on the first Monday.
                pub const fn monday_based_week(self) -> u8 {
                    ((self.ordinal() as i16 - self.weekday().number_days_from_monday() as i16 + 6) / 7) as u8
                }
                /// Get the year, month, and day.
                pub const fn to_calendar_date(self) -> (i32, Month, u8) {
                    let (year, ordinal) = self.to_ordinal_date();
                    let ordinal = ordinal as u32;
                    let jan_feb_len = 59 + self.is_in_leap_year() as u32;

                    let (month_adj, ordinal_adj) = if ordinal <= jan_feb_len {
                        (0, 0)
                    } else {
                        (2, jan_feb_len)
                    };

                    let ordinal = ordinal - ordinal_adj;
                    let month = (ordinal * 268 + 8031) >> 13;
                    let days_in_preceding_months = (month * 3917 - 3866) >> 7;
                    let day = ordinal - days_in_preceding_months;
                    let month = month + month_adj;

                    (
                        year,
                        unsafe {
                            match Month::from_number(NonZeroU8::new_unchecked(month as u8)) {
                                Ok(month) => month,
                                Err(_) => ::hint::unreachable_unchecked(),
                            }
                        },
                        day as u8,
                    )
                }
                /// Get the year and ordinal day number.
                pub const fn to_ordinal_date(self) -> (i32, u16) {
                    (self.year(), self.ordinal())
                }
                /// Get the ISO 8601 year, week number, and weekday.
                pub const fn to_iso_week_date(self) -> (i32, u8, Weekday) {
                    let (year, ordinal) = self.to_ordinal_date();
                    let weekday = self.weekday();

                    match ((ordinal + 10 - weekday.number_from_monday() as u16) / 7) as u8 {
                        0 => (year - 1, weeks_in_year(year - 1), weekday),
                        53 if weeks_in_year(year) == 52 => (year + 1, 1, weekday),
                        week => (year, week, weekday),
                    }
                }
                /// Get the weekday.
                pub const fn weekday(self) -> Weekday {
                    match self.to_julian_day() % 7 {
                        -6 | 1 => Weekday::Tuesday,
                        -5 | 2 => Weekday::Wednesday,
                        -4 | 3 => Weekday::Thursday,
                        -3 | 4 => Weekday::Friday,
                        -2 | 5 => Weekday::Saturday,
                        -1 | 6 => Weekday::Sunday,
                        val => {
                            debug_assert!(val == 0);
                            Weekday::Monday
                        }
                    }
                }
                /// Get the next calendar date.
                pub const fn next_day(self) -> Option<Self> {
                    if self.ordinal() == 366 || (self.ordinal() == 365 && !self.is_in_leap_year()) {
                        if self.value.get() == Self::MAX.value.get() {
                            None
                        } else {
                            // Safety: `ordinal` is not zero.
                            unsafe { Some(Self::__from_ordinal_date_unchecked(self.year() + 1, 1)) }
                        }
                    } else {
                        Some(Self {
                            // Safety: `ordinal` is not zero.
                            value: unsafe { NonZeroI32::new_unchecked(self.value.get() + 1) },
                        })
                    }
                }
                /// Get the previous calendar date.
                pub const fn previous_day(self) -> Option<Self> {
                    if self.ordinal() != 1 {
                        Some(Self {
                            // Safety: `ordinal` is not zero.
                            value: unsafe { NonZeroI32::new_unchecked(self.value.get() - 1) },
                        })
                    } else if self.value.get() == Self::MIN.value.get() {
                        None
                    } else {
                        // Safety: `ordinal` is not zero.
                        Some(unsafe {
                            Self::__from_ordinal_date_unchecked(self.year() - 1, days_in_year(self.year() - 1))
                        })
                    }
                }
                /// Calculates the first occurrence of a weekday that is strictly later than a given `Date`.
                ///
                /// # Panics
                /// Panics if an overflow occurred.
                ///
                /// # Examples
                /// ```
                /// # use time::Weekday;
                /// # use time_macros::date;
                /// assert_eq!(
                ///     date!(2023-06-28).next_occurrence(Weekday::Monday),
                ///     date!(2023-07-03)
                /// );
                /// assert_eq!(
                ///     date!(2023-06-19).next_occurrence(Weekday::Monday),
                ///     date!(2023-06-26)
                /// );
                /// ```
                pub const fn next_occurrence(self, weekday: Weekday) -> Self {
                    expect_opt!(
                        self.checked_next_occurrence(weekday),
                        "overflow calculating the next occurrence of a weekday"
                    )
                }
                /// Calculates the first occurrence of a weekday that is strictly earlier than a given `Date`.
                ///
                /// # Panics
                /// Panics if an overflow occurred.
                ///
                /// # Examples
                /// ```
                /// # use time::Weekday;
                /// # use time_macros::date;
                /// assert_eq!(
                ///     date!(2023-06-28).prev_occurrence(Weekday::Monday),
                ///     date!(2023-06-26)
                /// );
                /// assert_eq!(
                ///     date!(2023-06-19).prev_occurrence(Weekday::Monday),
                ///     date!(2023-06-12)
                /// );
                /// ```
                pub const fn prev_occurrence(self, weekday: Weekday) -> Self {
                    expect_opt!(
                        self.checked_prev_occurrence(weekday),
                        "overflow calculating the previous occurrence of a weekday"
                    )
                }
                /// Calculates the `n`th occurrence of a weekday that is strictly later than a given `Date`.
                ///
                /// # Panics
                /// Panics if an overflow occurred or if `n == 0`.
                ///
                /// # Examples
                /// ```
                /// # use time::Weekday;
                /// # use time_macros::date;
                /// assert_eq!(
                ///     date!(2023-06-25).nth_next_occurrence(Weekday::Monday, 5),
                ///     date!(2023-07-24)
                /// );
                /// assert_eq!(
                ///     date!(2023-06-26).nth_next_occurrence(Weekday::Monday, 5),
                ///     date!(2023-07-31)
                /// );
                /// ```
                pub const fn nth_next_occurrence(self, weekday: Weekday, n: u8) -> Self {
                    expect_opt!(
                        self.checked_nth_next_occurrence(weekday, n),
                        "overflow calculating the next occurrence of a weekday"
                    )
                }
                /// Calculates the `n`th occurrence of a weekday that is strictly earlier than a given `Date`.
                pub const fn nth_prev_occurrence(self, weekday: Weekday, n: u8) -> Self {
                    expect_opt!(
                        self.checked_nth_prev_occurrence(weekday, n),
                        "overflow calculating the previous occurrence of a weekday"
                    )
                }
                /// Get the Julian day for the date.
                pub const fn to_julian_day(self) -> i32 {
                    let (year, ordinal) = self.to_ordinal_date();

                    // The algorithm requires a non-negative year. Add the lowest value to make it so. This is
                    // adjusted for at the end with the final subtraction.
                    let adj_year = year + 999_999;
                    let century = adj_year / 100;

                    let days_before_year = (1461 * adj_year as i64 / 4) as i32 - century + century / 4;
                    days_before_year + ordinal as i32 - 363_521_075
                }
                /// Computes `self + duration`, returning `None` if an overflow occurred.
                pub const fn checked_add(self, duration: Duration) -> Option<Self> {
                    let whole_days = duration.whole_days();
                    if whole_days < i32::MIN as i64 || whole_days > i32::MAX as i64 {
                        return None;
                    }

                    let julian_day = const_try_opt!(self.to_julian_day().checked_add(whole_days as i32));
                    if let Ok(date) = Self::from_julian_day(julian_day) {
                        Some(date)
                    } else {
                        None
                    }
                }
                /// Computes `self + duration`, returning `None` if an overflow occurred.
                pub const fn checked_add_std(self, duration: StdDuration) -> Option<Self> {
                    let whole_days = duration.as_secs() / Second::per_t::<u64>(Day);
                    if whole_days > i32::MAX as u64 {
                        return None;
                    }

                    let julian_day = const_try_opt!(self.to_julian_day().checked_add(whole_days as i32));
                    if let Ok(date) = Self::from_julian_day(julian_day) {
                        Some(date)
                    } else {
                        None
                    }
                }
                /// Computes `self - duration`, returning `None` if an overflow occurred.
                pub const fn checked_sub(self, duration: Duration) -> Option<Self> {
                    let whole_days = duration.whole_days();
                    if whole_days < i32::MIN as i64 || whole_days > i32::MAX as i64 {
                        return None;
                    }

                    let julian_day = const_try_opt!(self.to_julian_day().checked_sub(whole_days as i32));
                    if let Ok(date) = Self::from_julian_day(julian_day) {
                        Some(date)
                    } else {
                        None
                    }
                }
                /// Computes `self - duration`, returning `None` if an overflow occurred.
                pub const fn checked_sub_std(self, duration: StdDuration) -> Option<Self> {
                    let whole_days = duration.as_secs() / Second::per_t::<u64>(Day);
                    if whole_days > i32::MAX as u64 {
                        return None;
                    }

                    let julian_day = const_try_opt!(self.to_julian_day().checked_sub(whole_days as i32));
                    if let Ok(date) = Self::from_julian_day(julian_day) {
                        Some(date)
                    } else {
                        None
                    }
                }
                /// Calculates the first occurrence of a weekday that is strictly later than a given `Date`.
                /// Returns `None` if an overflow occurred.
                pub const fn checked_next_occurrence(self, weekday: Weekday) -> Option<Self> {
                    let day_diff = match weekday as i8 - self.weekday() as i8 {
                        1 | -6 => 1,
                        2 | -5 => 2,
                        3 | -4 => 3,
                        4 | -3 => 4,
                        5 | -2 => 5,
                        6 | -1 => 6,
                        val => {
                            debug_assert!(val == 0);
                            7
                        }
                    };

                    self.checked_add(Duration::days(day_diff))
                }
                /// Calculates the first occurrence of a weekday that is strictly earlier than a given `Date`.
                /// Returns `None` if an overflow occurred.
                pub const fn checked_prev_occurrence(self, weekday: Weekday) -> Option<Self> {
                    let day_diff = match weekday as i8 - self.weekday() as i8 {
                        1 | -6 => 6,
                        2 | -5 => 5,
                        3 | -4 => 4,
                        4 | -3 => 3,
                        5 | -2 => 2,
                        6 | -1 => 1,
                        val => {
                            debug_assert!(val == 0);
                            7
                        }
                    };

                    self.checked_sub(Duration::days(day_diff))
                }
                /// Calculates the `n`th occurrence of a weekday that is strictly later than a given `Date`.
                /// Returns `None` if an overflow occurred or if `n == 0`.
                pub const fn checked_nth_next_occurrence(self, weekday: Weekday, n: u8) -> Option<Self> {
                    if n == 0 {
                        return None;
                    }

                    const_try_opt!(self.checked_next_occurrence(weekday))
                        .checked_add(Duration::weeks(n as i64 - 1))
                }
                /// Calculates the `n`th occurrence of a weekday that is strictly earlier than a given `Date`.
                /// Returns `None` if an overflow occurred or if `n == 0`.
                pub const fn checked_nth_prev_occurrence(self, weekday: Weekday, n: u8) -> Option<Self> {
                    if n == 0 {
                        return None;
                    }

                    const_try_opt!(self.checked_prev_occurrence(weekday))
                        .checked_sub(Duration::weeks(n as i64 - 1))
                }
                /// Computes `self + duration`, saturating value on overflow.
                pub const fn saturating_add(self, duration: Duration) -> Self {
                    if let Some(datetime) = self.checked_add(duration) {
                        datetime
                    } else if duration.is_negative() {
                        Self::MIN
                    } else {
                        debug_assert!(duration.is_positive());
                        Self::MAX
                    }
                }
                /// Computes `self - duration`, saturating value on overflow.
                pub const fn saturating_sub(self, duration: Duration) -> Self {
                    if let Some(datetime) = self.checked_sub(duration) {
                        datetime
                    } else if duration.is_negative() {
                        Self::MAX
                    } else {
                        debug_assert!(duration.is_positive());
                        Self::MIN
                    }
                }
                /// Replace the year. The month and day will be unchanged.
                #[must_use = "This method does not mutate the original `Date`."]
                pub const fn replace_year(self, year: i32) -> Result<Self, error::ComponentRange> {
                    ensure_ranged!(Year: year);

                    let ordinal = self.ordinal();

                    // Dates in January and February are unaffected by leap years.
                    if ordinal <= 59 {
                        // Safety: `ordinal` is not zero.
                        return Ok(unsafe { Self::__from_ordinal_date_unchecked(year, ordinal) });
                    }

                    match (self.is_in_leap_year(), is_leap_year(year)) {
                        (false, false) | (true, true) => {
                            // Safety: `ordinal` is not zero.
                            Ok(unsafe { Self::__from_ordinal_date_unchecked(year, ordinal) })
                        }
                        // February 29 does not exist in common years.
                        (true, false) if ordinal == 60 => Err(error::ComponentRange {
                            name: "day",
                            value: 29,
                            minimum: 1,
                            maximum: 28,
                            conditional_message: Some("for the given month and year"),
                        }),
                        // We're going from a common year to a leap year. Shift dates in March and later by
                        // one day.
                        // Safety: `ordinal` is not zero.
                        (false, true) => Ok(unsafe { Self::__from_ordinal_date_unchecked(year, ordinal + 1) }),
                        // We're going from a leap year to a common year. Shift dates in January and
                        // February by one day.
                        // Safety: `ordinal` is not zero.
                        (true, false) => Ok(unsafe { Self::__from_ordinal_date_unchecked(year, ordinal - 1) }),
                    }
                }
                /// Replace the month of the year.
                #[must_use = "This method does not mutate the original `Date`."]
                pub const fn replace_month(self, month: Month) -> Result<Self, error::ComponentRange> {
                    let (year, _, day) = self.to_calendar_date();
                    Self::from_calendar_date(year, month, day)
                }
                /// Replace the day of the month.
                #[must_use = "This method does not mutate the original `Date`."]
                pub const fn replace_day(self, day: u8) -> Result<Self, error::ComponentRange> {
                    match day {
                        1..=28 => {}
                        29..=31 if day <= self.month().length(self.year()) => {}
                        _ => {
                            return Err(error::ComponentRange {
                                name: "day",
                                minimum: 1,
                                maximum: self.month().length(self.year()) as i64,
                                value: day as i64,
                                conditional_message: Some("for the given month and year"),
                            });
                        }
                    }

                    // Safety: `ordinal` is not zero.
                    Ok(unsafe {
                        Self::__from_ordinal_date_unchecked(
                            self.year(),
                            (self.ordinal() as i16 - self.day() as i16 + day as i16) as u16,
                        )
                    })
                }
                /// Replace the day of the year.
                #[must_use = "This method does not mutate the original `Date`."]
                pub const fn replace_ordinal(self, ordinal: u16) -> Result<Self, error::ComponentRange> {
                    match ordinal {
                        1..=365 => {}
                        366 if self.is_in_leap_year() => {}
                        _ => {
                            return Err(error::ComponentRange {
                                name: "ordinal",
                                minimum: 1,
                                maximum: days_in_year(self.year()) as i64,
                                value: ordinal as i64,
                                conditional_message: Some("for the given year"),
                            });
                        }
                    }

                    Ok(unsafe { Self::__from_ordinal_date_unchecked(self.year(), ordinal) })
                }
                /// Create a [`PrimitiveDateTime`] using the existing date.
                pub const fn midnight(self) -> PrimitiveDateTime 
                {
                    PrimitiveDateTime::new(self, Time::MIDNIGHT)
                }
                /// Create a [`PrimitiveDateTime`] using the existing date and the provided [`Time`].
                pub const fn with_time(self, time: Time) -> PrimitiveDateTime {
                    PrimitiveDateTime::new(self, time)
                }
                /// Attempt to create a [`PrimitiveDateTime`] using the existing date and the provided time.
                pub const fn with_hms(
                    self,
                    hour: u8,
                    minute: u8,
                    second: u8,
                ) -> Result<PrimitiveDateTime, error::ComponentRange>
                {
                    Ok(PrimitiveDateTime::new(
                        self,
                        const_try!(Time::from_hms(hour, minute, second)),
                    ))
                }
                /// Attempt to create a [`PrimitiveDateTime`] using the existing date and the provided time.
                pub const fn with_hms_milli(
                    self,
                    hour: u8,
                    minute: u8,
                    second: u8,
                    millisecond: u16,
                ) -> Result<PrimitiveDateTime, error::ComponentRange>
                {
                    Ok(PrimitiveDateTime::new(
                        self,
                        const_try!(Time::from_hms_milli(hour, minute, second, millisecond)),
                    ))
                }
                /// Attempt to create a [`PrimitiveDateTime`] using the existing date and the provided time.
                pub const fn with_hms_micro(
                    self,
                    hour: u8,
                    minute: u8,
                    second: u8,
                    microsecond: u32,
                ) -> Result<PrimitiveDateTime, error::ComponentRange>
                {
                    Ok(PrimitiveDateTime::new(
                        self,
                        const_try!(Time::from_hms_micro(hour, minute, second, microsecond)),
                    ))
                }
                /// Attempt to create a [`PrimitiveDateTime`] using the existing date and the provided time.
                pub const fn with_hms_nano(
                    self,
                    hour: u8,
                    minute: u8,
                    second: u8,
                    nanosecond: u32,
                ) -> Result<PrimitiveDateTime, error::ComponentRange>
                {
                    Ok(PrimitiveDateTime::new(
                        self,
                        const_try!(Time::from_hms_nano(hour, minute, second, nanosecond)),
                    ))
                }
                
                /// Format the `Date` using the provided [format description](crate::format_description).
                pub fn format_into(
                    self,
                    output: &mut (impl io::Write + ?Sized),
                    format: &(impl Formattable + ?Sized),
                ) -> Result<usize, error::Format> {
                    format.format_into(output, Some(self), None, None)
                }
                /// Format the `Date` using the provided [format description](crate::format_description).
                pub fn format(self, format: &(impl Formattable + ?Sized)) -> Result<String, error::Format> {
                    format.format(Some(self), None, None)
                }
                
                /// Parse a `Date` from the input using the provided [format
                /// description](crate::format_description).
                pub fn parse(
                    input: &str,
                    description: &(impl Parsable + ?Sized),
                ) -> Result<Self, error::Parse> {
                    description.parse_date(input.as_bytes())
                }
            }

            #[non_exhaustive] #[derive(Debug, Clone, Copy)]
            pub struct DateMetadata 
            {
                /// The width of the year component, including the sign.
                pub year_width: u8,
                /// Whether the sign should be displayed.
                pub display_sign: bool,
                pub year: i32,
                pub month: u8,
                pub day: u8,
            }

            impl fmt::Debug for Date {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {
                    fmt::Display::fmt(self, f)
                }
            }

            impl ::ops::Add<Duration> for Date 
            
            {
                type Output = Self;
                fn add(self, duration: Duration) -> Self::Output
                {
                    self.checked_add(duration)
                        .expect("overflow adding duration to date")
                }
            }

            impl ::ops::Add<StdDuration> for Date 
            
            {
                type Output = Self;
                
                fn add(self, duration: StdDuration) -> Self::Output
                {
                    self.checked_add_std(duration)
                        .expect("overflow adding duration to date")
                }
            }

            impl_add_assign!(Date: Duration, StdDuration);

            impl ::ops::Sub<Duration> for Date
            {
                type Output = Self;
                fn sub(self, duration: Duration) -> Self::Output 
                {
                    self
                    .checked_sub(duration)
                    .expect("overflow subtracting duration from date")
                }
            }

            impl ::ops::Sub<StdDuration> for Date 
            {
                type Output = Self;
                fn sub(self, duration: StdDuration) -> Self::Output
                {
                    self
                    .checked_sub_std(duration)
                    .expect("overflow subtracting duration from date")
                }
            }

            impl_sub_assign!(Date: Duration, StdDuration);

            impl ::ops::Sub for Date
            {
                type Output = Duration;
                fn sub(self, other: Self) -> Self::Output 
                { Duration::days((self.to_julian_day() - other.to_julian_day()).extend()) }
            }
            /*
            mod duration;
            //! The [`Duration`] struct and its associated `impl`s.
            
            use deranged::RangedI32;
            use num_conv::prelude::*;

            use crate::convert::*;
            use crate::error;
            use crate::internal_macros::{
                const_try_opt, expect_opt, impl_add_assign, impl_div_assign, impl_mul_assign, impl_sub_assign,
            };
            #[allow(deprecated)]
            use crate::Instant;
            */
            /// By explicitly inserting this enum where padding is expected, the compiler is able to better perform niche value optimization.
            #[repr(u32)]
            #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
            pub enum Padding {
                Optimize,
            }
            /// The type of the `nanosecond` field of `Duration`.
            type Nanoseconds = RangedI32<{ -Nanosecond::per_t::<i32>(Second) + 1 }, { Nanosecond::per_t::<i32>(Second) - 1 }>;
            /// A span of time with nanosecond precision.
            #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
            pub struct Duration 
            {
                /// Number of whole seconds.
                seconds: i64,
                /// Number of nanoseconds within the second.
                nanoseconds: Nanoseconds,
                padding: Padding,
            }

            impl fmt::Debug for Duration
            {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                    f.debug_struct("Duration")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }

            impl Default for Duration 
            {
                fn default() -> Self {
                    Self {
                        seconds: 0,
                        nanoseconds: Nanoseconds::new_static::<0>(),
                        padding: Padding::Optimize,
                    }
                }
            }
            
            macro_rules! try_from_secs 
            {
                (
                    secs = $secs: expr,
                    mantissa_bits = $mant_bits: literal,
                    exponent_bits = $exp_bits: literal,
                    offset = $offset: literal,
                    bits_ty = $bits_ty:ty,
                    bits_ty_signed = $bits_ty_signed:ty,
                    double_ty = $double_ty:ty,
                    float_ty = $float_ty:ty,
                    is_nan = $is_nan:expr,
                    is_overflow = $is_overflow:expr,
                ) => {{
                    'value: {
                        const MIN_EXP: i16 = 1 - (1i16 << $exp_bits) / 2;
                        const MANT_MASK: $bits_ty = (1 << $mant_bits) - 1;
                        const EXP_MASK: $bits_ty = (1 << $exp_bits) - 1;
                        

                        let bits = $secs.to_bits();
                        let mant = (bits & MANT_MASK) | (MANT_MASK + 1);
                        let exp = ((bits >> $mant_bits) & EXP_MASK) as i16 + MIN_EXP;

                        let (secs, nanos) = if exp < -31 {
                            (0u64, 0u32)
                        } else if exp < 0 {
                            let t = <$double_ty>::from(mant) << ($offset + exp);
                            let nanos_offset = $mant_bits + $offset;
                            let nanos_tmp = Nanosecond::per_t::<u128>(Second) * u128::from(t);
                            let nanos = (nanos_tmp >> nanos_offset) as u32;

                            let rem_mask = (1 << nanos_offset) - 1;
                            let rem_msb_mask = 1 << (nanos_offset - 1);
                            let rem = nanos_tmp & rem_mask;
                            let is_tie = rem == rem_msb_mask;
                            let is_even = (nanos & 1) == 0;
                            let rem_msb = nanos_tmp & rem_msb_mask == 0;
                            let add_ns = !(rem_msb || (is_even && is_tie));
                            
                            let nanos = nanos + add_ns as u32;
                            if ($mant_bits == 23) || (nanos != Nanosecond::per_t(Second)) {
                                (0, nanos)
                            } else {
                                (1, 0)
                            }
                        } else if exp < $mant_bits {
                            let secs = u64::from(mant >> ($mant_bits - exp));
                            let t = <$double_ty>::from((mant << exp) & MANT_MASK);
                            let nanos_offset = $mant_bits;
                            let nanos_tmp = Nanosecond::per_t::<$double_ty>(Second) * t;
                            let nanos = (nanos_tmp >> nanos_offset) as u32;

                            let rem_mask = (1 << nanos_offset) - 1;
                            let rem_msb_mask = 1 << (nanos_offset - 1);
                            let rem = nanos_tmp & rem_mask;
                            let is_tie = rem == rem_msb_mask;
                            let is_even = (nanos & 1) == 0;
                            let rem_msb = nanos_tmp & rem_msb_mask == 0;
                            let add_ns = !(rem_msb || (is_even && is_tie));
                            
                            let nanos = nanos + add_ns as u32;
                            if ($mant_bits == 23) || (nanos != Nanosecond::per_t(Second)) {
                                (secs, nanos)
                            } else {
                                (secs + 1, 0)
                            }
                        } else if exp < 63 {
                            let secs = u64::from(mant) << (exp - $mant_bits);
                            (secs, 0)
                        } else if bits == (i64::MIN as $float_ty).to_bits() {
                            break 'value Self::new_ranged_unchecked(i64::MIN, Nanoseconds::new_static::<0>());
                        } else if $secs.is_nan() {
                            $is_nan
                        } else {
                            $is_overflow
                        };
                        
                        let mask = (bits as $bits_ty_signed) >> ($mant_bits + $exp_bits);
                        #[allow(trivial_numeric_casts)]
                        let secs_signed = ((secs as i64) ^ (mask as i64)) - (mask as i64);
                        #[allow(trivial_numeric_casts)]
                        let nanos_signed = ((nanos as i32) ^ (mask as i32)) - (mask as i32);
                        unsafe { Self::new_unchecked(secs_signed, nanos_signed) }
                    }
                }};
            }

            impl Duration 
            {
                /// Equivalent to `0.seconds()`.
                pub const ZERO: Self = Self::seconds(0);
                /// Equivalent to `1.nanoseconds()`.
                pub const NANOSECOND: Self = Self::nanoseconds(1);
                /// Equivalent to `1.microseconds()`.
                pub const MICROSECOND: Self = Self::microseconds(1);
                /// Equivalent to `1.milliseconds()`.
                pub const MILLISECOND: Self = Self::milliseconds(1);
                /// Equivalent to `1.seconds()`.
                pub const SECOND: Self = Self::seconds(1);
                /// Equivalent to `1.minutes()`.
                pub const MINUTE: Self = Self::minutes(1);
                /// Equivalent to `1.hours()`.
                pub const HOUR: Self = Self::hours(1);
                /// Equivalent to `1.days()`.
                pub const DAY: Self = Self::days(1);
                /// Equivalent to `1.weeks()`.
                pub const WEEK: Self = Self::weeks(1);
                /// The minimum possible duration. Adding any negative duration to this will cause an overflow.
                pub const MIN: Self = Self::new_ranged(i64::MIN, Nanoseconds::MIN);
                /// The maximum possible duration. Adding any positive duration to this will cause an overflow.
                pub const MAX: Self = Self::new_ranged(i64::MAX, Nanoseconds::MAX);
                /// Check if a duration is exactly zero.
                pub const fn is_zero(self) -> bool {
                    self.seconds == 0 && self.nanoseconds.get() == 0
                }
                /// Check if a duration is negative.
                pub const fn is_negative(self) -> bool {
                    self.seconds < 0 || self.nanoseconds.get() < 0
                }
                /// Check if a duration is positive.
                pub const fn is_positive(self) -> bool {
                    self.seconds > 0 || self.nanoseconds.get() > 0
                }
                /// Get the absolute value of the duration.
                pub const fn abs(self) -> Self {
                    match self.seconds.checked_abs() {
                        Some(seconds) => Self::new_ranged_unchecked(seconds, self.nanoseconds.abs()),
                        None => Self::MAX,
                    }
                }
                /// Convert the existing `Duration` to a `std::time::Duration` and its sign.
                pub const fn unsigned_abs(self) -> StdDuration {
                    StdDuration::new(
                        self.seconds.unsigned_abs(),
                        self.nanoseconds.get().unsigned_abs(),
                    )
                }
                /// Create a new `Duration` without checking the validity of the components.
                pub const unsafe fn new_unchecked(seconds: i64, nanoseconds: i32) -> Self {
                    Self::new_ranged_unchecked(
                        seconds,
                        unsafe { Nanoseconds::new_unchecked(nanoseconds) },
                    )
                }
                /// Create a new `Duration` without checking the validity of the components.
                pub const fn new_ranged_unchecked(seconds: i64, nanoseconds: Nanoseconds) -> Self {
                    if seconds < 0 {
                        debug_assert!(nanoseconds.get() <= 0);
                    } else if seconds > 0 {
                        debug_assert!(nanoseconds.get() >= 0);
                    }

                    Self {
                        seconds,
                        nanoseconds,
                        padding: Padding::Optimize,
                    }
                }
                /// Create a new `Duration` with the provided seconds and nanoseconds.
                pub const fn new(mut seconds: i64, mut nanoseconds: i32) -> Self {
                    seconds = expect_opt!(
                        seconds.checked_add(nanoseconds as i64 / Nanosecond::per_t::<i64>(Second)),
                        "overflow constructing `time::Duration`"
                    );
                    nanoseconds %= Nanosecond::per_t::<i32>(Second);

                    if seconds > 0 && nanoseconds < 0 {
                        seconds -= 1;
                        nanoseconds += Nanosecond::per_t::<i32>(Second);
                    } else if seconds < 0 && nanoseconds > 0 {
                        seconds += 1;
                        nanoseconds -= Nanosecond::per_t::<i32>(Second);
                    }
                    
                    unsafe { Self::new_unchecked(seconds, nanoseconds) }
                }
                /// Create a new `Duration` with the provided seconds and nanoseconds.
                pub const fn new_ranged(mut seconds: i64, mut nanoseconds: Nanoseconds) -> Self {
                    if seconds > 0 && nanoseconds.get() < 0 {
                        seconds -= 1;
                        nanoseconds = unsafe {
                            Nanoseconds::new_unchecked(nanoseconds.get() + Nanosecond::per_t::<i32>(Second))
                        };
                    } else if seconds < 0 && nanoseconds.get() > 0 {
                        seconds += 1;
                        nanoseconds = unsafe {
                            Nanoseconds::new_unchecked(nanoseconds.get() - Nanosecond::per_t::<i32>(Second))
                        };
                    }

                    Self::new_ranged_unchecked(seconds, nanoseconds)
                }
                /// Create a new `Duration` with the given number of weeks.
                pub const fn weeks(weeks: i64) -> Self {
                    Self::seconds(expect_opt!(
                        weeks.checked_mul(Second::per_t(Week)),
                        "overflow constructing `time::Duration`"
                    ))
                }
                /// Create a new `Duration` with the given number of days.
                pub const fn days(days: i64) -> Self {
                    Self::seconds(expect_opt!(
                        days.checked_mul(Second::per_t(Day)),
                        "overflow constructing `time::Duration`"
                    ))
                }
                /// Create a new `Duration` with the given number of hours.
                pub const fn hours(hours: i64) -> Self {
                    Self::seconds(expect_opt!(
                        hours.checked_mul(Second::per_t(Hour)),
                        "overflow constructing `time::Duration`"
                    ))
                }
                /// Create a new `Duration` with the given number of minutes.
                pub const fn minutes(minutes: i64) -> Self {
                    Self::seconds(expect_opt!(
                        minutes.checked_mul(Second::per_t(Minute)),
                        "overflow constructing `time::Duration`"
                    ))
                }
                /// Create a new `Duration` with the given number of seconds.
                pub const fn seconds(seconds: i64) -> Self {
                    Self::new_ranged_unchecked(seconds, Nanoseconds::new_static::<0>())
                }
                /// Creates a new `Duration` from the specified number of seconds represented as `f64`.
                pub fn seconds_f64(seconds: f64) -> Self {
                    try_from_secs!(
                        secs = seconds,
                        mantissa_bits = 52,
                        exponent_bits = 11,
                        offset = 44,
                        bits_ty = u64,
                        bits_ty_signed = i64,
                        double_ty = u128,
                        float_ty = f64,
                        is_nan = expect_failed("passed NaN to `time::Duration::seconds_f64`"),
                        is_overflow = expect_failed("overflow constructing `time::Duration`"),
                    )
                }
                /// Creates a new `Duration` from the specified number of seconds represented as `f32`.
                pub fn seconds_f32(seconds: f32) -> Self {
                    try_from_secs!(
                        secs = seconds,
                        mantissa_bits = 23,
                        exponent_bits = 8,
                        offset = 41,
                        bits_ty = u32,
                        bits_ty_signed = i32,
                        double_ty = u64,
                        float_ty = f32,
                        is_nan = expect_failed("passed NaN to `time::Duration::seconds_f32`"),
                        is_overflow = expect_failed("overflow constructing `time::Duration`"),
                    )
                }
                /// Creates a new `Duration` from the specified number of seconds
                /// represented as `f64`.
                pub fn saturating_seconds_f64(seconds: f64) -> Self {
                    try_from_secs!(
                        secs = seconds,
                        mantissa_bits = 52,
                        exponent_bits = 11,
                        offset = 44,
                        bits_ty = u64,
                        bits_ty_signed = i64,
                        double_ty = u128,
                        float_ty = f64,
                        is_nan = return Self::ZERO,
                        is_overflow = return if seconds < 0.0 { Self::MIN } else { Self::MAX },
                    )
                }
                /// Creates a new `Duration` from the specified number of seconds
                /// represented as `f32`.
                pub fn saturating_seconds_f32(seconds: f32) -> Self {
                    try_from_secs!(
                        secs = seconds,
                        mantissa_bits = 23,
                        exponent_bits = 8,
                        offset = 41,
                        bits_ty = u32,
                        bits_ty_signed = i32,
                        double_ty = u64,
                        float_ty = f32,
                        is_nan = return Self::ZERO,
                        is_overflow = return if seconds < 0.0 { Self::MIN } else { Self::MAX },
                    )
                }
                /// Creates a new `Duration` from the specified number of seconds
                /// represented as `f64`.
                pub fn checked_seconds_f64(seconds: f64) -> Option<Self> {
                    Some(try_from_secs!(
                        secs = seconds,
                        mantissa_bits = 52,
                        exponent_bits = 11,
                        offset = 44,
                        bits_ty = u64,
                        bits_ty_signed = i64,
                        double_ty = u128,
                        float_ty = f64,
                        is_nan = return None,
                        is_overflow = return None,
                    ))
                }
                /// Creates a new `Duration` from the specified number of seconds
                /// represented as `f32`.
                pub fn checked_seconds_f32(seconds: f32) -> Option<Self> {
                    Some(try_from_secs!(
                        secs = seconds,
                        mantissa_bits = 23,
                        exponent_bits = 8,
                        offset = 41,
                        bits_ty = u32,
                        bits_ty_signed = i32,
                        double_ty = u64,
                        float_ty = f32,
                        is_nan = return None,
                        is_overflow = return None,
                    ))
                }
                /// Create a new `Duration` with the given number of milliseconds.
                pub const fn milliseconds(milliseconds: i64) -> Self {
                    unsafe {
                        Self::new_unchecked(
                            milliseconds / Millisecond::per_t::<i64>(Second),
                            (milliseconds % Millisecond::per_t::<i64>(Second)
                                * Nanosecond::per_t::<i64>(Millisecond)) as i32,
                        )
                    }
                }
                /// Create a new `Duration` with the given number of microseconds.
                pub const fn microseconds(microseconds: i64) -> Self {
                    unsafe {
                        Self::new_unchecked(
                            microseconds / Microsecond::per_t::<i64>(Second),
                            (microseconds % Microsecond::per_t::<i64>(Second)
                                * Nanosecond::per_t::<i64>(Microsecond)) as i32,
                        )
                    }
                }
                /// Create a new `Duration` with the given number of nanoseconds.
                pub const fn nanoseconds(nanoseconds: i64) -> Self {
                    unsafe {
                        Self::new_unchecked(
                            nanoseconds / Nanosecond::per_t::<i64>(Second),
                            (nanoseconds % Nanosecond::per_t::<i64>(Second)) as i32,
                        )
                    }
                }
                /// Create a new `Duration` with the given number of nanoseconds.
                pub const fn nanoseconds_i128(nanoseconds: i128) -> Self {
                    let seconds = nanoseconds / Nanosecond::per_t::<i128>(Second);
                    let nanoseconds = nanoseconds % Nanosecond::per_t::<i128>(Second);

                    if seconds > i64::MAX as i128 || seconds < i64::MIN as i128 {
                        crate::expect_failed("overflow constructing `time::Duration`");
                    }
                    
                    unsafe { Self::new_unchecked(seconds as i64, nanoseconds as i32) }
                }
                /// Get the number of whole weeks in the duration.
                pub const fn whole_weeks(self) -> i64 {
                    self.whole_seconds() / Second::per_t::<i64>(Week)
                }
                /// Get the number of whole days in the duration.
                pub const fn whole_days(self) -> i64 {
                    self.whole_seconds() / Second::per_t::<i64>(Day)
                }
                /// Get the number of whole hours in the duration.
                pub const fn whole_hours(self) -> i64 {
                    self.whole_seconds() / Second::per_t::<i64>(Hour)
                }
                /// Get the number of whole minutes in the duration.
                pub const fn whole_minutes(self) -> i64 {
                    self.whole_seconds() / Second::per_t::<i64>(Minute)
                }
                /// Get the number of whole seconds in the duration.
                pub const fn whole_seconds(self) -> i64 {
                    self.seconds
                }
                /// Get the number of fractional seconds in the duration.
                pub fn as_seconds_f64(self) -> f64 {
                    self.seconds as f64 + self.nanoseconds.get() as f64 / Nanosecond::per_t::<f64>(Second)
                }
                /// Get the number of fractional seconds in the duration.
                pub fn as_seconds_f32(self) -> f32 {
                    self.seconds as f32 + self.nanoseconds.get() as f32 / Nanosecond::per_t::<f32>(Second)
                }
                /// Get the number of whole milliseconds in the duration.
                pub const fn whole_milliseconds(self) -> i128 {
                    self.seconds as i128 * Millisecond::per_t::<i128>(Second)
                        + self.nanoseconds.get() as i128 / Nanosecond::per_t::<i128>(Millisecond)
                }
                /// Get the number of milliseconds past the number of whole seconds.
                pub const fn subsec_milliseconds(self) -> i16 {
                    (self.nanoseconds.get() / Nanosecond::per_t::<i32>(Millisecond)) as i16
                }
                /// Get the number of whole microseconds in the duration.
                pub const fn whole_microseconds(self) -> i128 {
                    self.seconds as i128 * Microsecond::per_t::<i128>(Second)
                        + self.nanoseconds.get() as i128 / Nanosecond::per_t::<i128>(Microsecond)
                }
                /// Get the number of microseconds past the number of whole seconds.
                pub const fn subsec_microseconds(self) -> i32 {
                    self.nanoseconds.get() / Nanosecond::per_t::<i32>(Microsecond)
                }
                /// Get the number of nanoseconds in the duration.
                pub const fn whole_nanoseconds(self) -> i128 {
                    self.seconds as i128 * Nanosecond::per_t::<i128>(Second) + self.nanoseconds.get() as i128
                }
                /// Get the number of nanoseconds past the number of whole seconds.
                pub const fn subsec_nanoseconds(self) -> i32 {
                    self.nanoseconds.get()
                }
                /// Get the number of nanoseconds past the number of whole seconds.
                #[cfg(feature = "quickcheck")]
                pub const fn subsec_nanoseconds_ranged(self) -> Nanoseconds {
                    self.nanoseconds
                }
                /// Computes `self + rhs`, returning `None` if an overflow occurred.
                pub const fn checked_add(self, rhs: Self) -> Option<Self> {
                    let mut seconds = const_try_opt!(self.seconds.checked_add(rhs.seconds));
                    let mut nanoseconds = self.nanoseconds.get() + rhs.nanoseconds.get();

                    if nanoseconds >= Nanosecond::per_t(Second) || seconds < 0 && nanoseconds > 0 {
                        nanoseconds -= Nanosecond::per_t::<i32>(Second);
                        seconds = const_try_opt!(seconds.checked_add(1));
                    } else if nanoseconds <= -Nanosecond::per_t::<i32>(Second) || seconds > 0 && nanoseconds < 0
                    {
                        nanoseconds += Nanosecond::per_t::<i32>(Second);
                        seconds = const_try_opt!(seconds.checked_sub(1));
                    }
                    
                    unsafe { Some(Self::new_unchecked(seconds, nanoseconds)) }
                }
                /// Computes `self - rhs`, returning `None` if an overflow occurred.
                pub const fn checked_sub(self, rhs: Self) -> Option<Self> {
                    let mut seconds = const_try_opt!(self.seconds.checked_sub(rhs.seconds));
                    let mut nanoseconds = self.nanoseconds.get() - rhs.nanoseconds.get();

                    if nanoseconds >= Nanosecond::per_t(Second) || seconds < 0 && nanoseconds > 0 {
                        nanoseconds -= Nanosecond::per_t::<i32>(Second);
                        seconds = const_try_opt!(seconds.checked_add(1));
                    } else if nanoseconds <= -Nanosecond::per_t::<i32>(Second) || seconds > 0 && nanoseconds < 0
                    {
                        nanoseconds += Nanosecond::per_t::<i32>(Second);
                        seconds = const_try_opt!(seconds.checked_sub(1));
                    }
                    unsafe { Some(Self::new_unchecked(seconds, nanoseconds)) }
                }
                /// Computes `self * rhs`, returning `None` if an overflow occurred.
                pub const fn checked_mul(self, rhs: i32) -> Option<Self> {
                    let total_nanos = self.nanoseconds.get() as i64 * rhs as i64;
                    let extra_secs = total_nanos / Nanosecond::per_t::<i64>(Second);
                    let nanoseconds = (total_nanos % Nanosecond::per_t::<i64>(Second)) as i32;
                    let seconds = const_try_opt!(
                        const_try_opt!(self.seconds.checked_mul(rhs as i64)).checked_add(extra_secs)
                    );
                    
                    unsafe { Some(Self::new_unchecked(seconds, nanoseconds)) }
                }
                /// Computes `self / rhs`, returning `None` if `rhs == 0` or if the result would overflow.
                pub const fn checked_div(self, rhs: i32) -> Option<Self> {
                    let (secs, extra_secs) = (
                        const_try_opt!(self.seconds.checked_div(rhs as i64)),
                        self.seconds % (rhs as i64),
                    );
                    let (mut nanos, extra_nanos) = (self.nanoseconds.get() / rhs, self.nanoseconds.get() % rhs);
                    nanos += ((extra_secs * (Nanosecond::per_t::<i64>(Second)) + extra_nanos as i64)
                        / (rhs as i64)) as i32;

                    // Safety: `nanoseconds` is in range.
                    unsafe { Some(Self::new_unchecked(secs, nanos)) }
                }
                /// Computes `-self`, returning `None` if the result would overflow.
                pub const fn checked_neg(self) -> Option<Self> {
                    if self.seconds == i64::MIN {
                        None
                    } else {
                        Some(Self::new_ranged_unchecked(
                            -self.seconds,
                            self.nanoseconds.neg(),
                        ))
                    }
                }
                /// Computes `self + rhs`, saturating if an overflow occurred.
                pub const fn saturating_add(self, rhs: Self) -> Self {
                    let (mut seconds, overflow) = self.seconds.overflowing_add(rhs.seconds);
                    if overflow {
                        if self.seconds > 0 {
                            return Self::MAX;
                        }
                        return Self::MIN;
                    }
                    let mut nanoseconds = self.nanoseconds.get() + rhs.nanoseconds.get();

                    if nanoseconds >= Nanosecond::per_t(Second) || seconds < 0 && nanoseconds > 0 {
                        nanoseconds -= Nanosecond::per_t::<i32>(Second);
                        seconds = match seconds.checked_add(1) {
                            Some(seconds) => seconds,
                            None => return Self::MAX,
                        };
                    } else if nanoseconds <= -Nanosecond::per_t::<i32>(Second) || seconds > 0 && nanoseconds < 0
                    {
                        nanoseconds += Nanosecond::per_t::<i32>(Second);
                        seconds = match seconds.checked_sub(1) {
                            Some(seconds) => seconds,
                            None => return Self::MIN,
                        };
                    }
                    
                    unsafe { Self::new_unchecked(seconds, nanoseconds) }
                }
                /// Computes `self - rhs`, saturating if an overflow occurred.
                pub const fn saturating_sub(self, rhs: Self) -> Self {
                    let (mut seconds, overflow) = self.seconds.overflowing_sub(rhs.seconds);
                    if overflow {
                        if self.seconds > 0 {
                            return Self::MAX;
                        }
                        return Self::MIN;
                    }
                    let mut nanoseconds = self.nanoseconds.get() - rhs.nanoseconds.get();

                    if nanoseconds >= Nanosecond::per_t(Second) || seconds < 0 && nanoseconds > 0 {
                        nanoseconds -= Nanosecond::per_t::<i32>(Second);
                        seconds = match seconds.checked_add(1) {
                            Some(seconds) => seconds,
                            None => return Self::MAX,
                        };
                    } else if nanoseconds <= -Nanosecond::per_t::<i32>(Second) || seconds > 0 && nanoseconds < 0
                    {
                        nanoseconds += Nanosecond::per_t::<i32>(Second);
                        seconds = match seconds.checked_sub(1) {
                            Some(seconds) => seconds,
                            None => return Self::MIN,
                        };
                    }
                    
                    unsafe { Self::new_unchecked(seconds, nanoseconds) }
                }
                /// Computes `self * rhs`, saturating if an overflow occurred.
                pub const fn saturating_mul(self, rhs: i32) -> Self {
                    let total_nanos = self.nanoseconds.get() as i64 * rhs as i64;
                    let extra_secs = total_nanos / Nanosecond::per_t::<i64>(Second);
                    let nanoseconds = (total_nanos % Nanosecond::per_t::<i64>(Second)) as i32;
                    let (seconds, overflow1) = self.seconds.overflowing_mul(rhs as i64);
                    if overflow1 {
                        if self.seconds > 0 && rhs > 0 || self.seconds < 0 && rhs < 0 {
                            return Self::MAX;
                        }
                        return Self::MIN;
                    }
                    let (seconds, overflow2) = seconds.overflowing_add(extra_secs);
                    if overflow2 {
                        if self.seconds > 0 && rhs > 0 {
                            return Self::MAX;
                        }
                        return Self::MIN;
                    }
                    
                    unsafe { Self::new_unchecked(seconds, nanoseconds) }
                }
                /// Runs a closure, returning the duration of time it took to run.
                    #[deprecated(
                    since = "0.3.32",
                    note = "extremely limited use case, not intended for benchmarking"
                )]
                pub fn time_fn<T>(f: impl FnOnce() -> T) -> (Self, T) {
                    let start = Instant::now();
                    let return_value = f();
                    let end = Instant::now();

                    (end - start, return_value)
                }
            }
            /// The format returned by this implementation is not stable and must not be relied upon.
            impl fmt::Display for Duration 
            {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                {
                    if self.is_negative() {
                        f.write_str("-")?;
                    }

                    if let Some(_precision) = f.precision() {

                        if self.is_zero() {
                            return (0.).fmt(f).and_then(|_| f.write_str("s"));
                        }
                        /// Format the first item that produces a value greater than 1 and then break.
                        macro_rules! item {
                            ($name:literal, $value:expr) => {
                                let value = $value;
                                if value >= 1.0 {
                                    return value.fmt(f).and_then(|_| f.write_str($name));
                                }
                            };
                        }
                        let seconds = self.unsigned_abs().as_secs_f64();

                        item!("d", seconds / Second::per_t::<f64>(Day));
                        item!("h", seconds / Second::per_t::<f64>(Hour));
                        item!("m", seconds / Second::per_t::<f64>(Minute));
                        item!("s", seconds);
                        item!("ms", seconds * Millisecond::per_t::<f64>(Second));
                        item!("µs", seconds * Microsecond::per_t::<f64>(Second));
                        item!("ns", seconds * Nanosecond::per_t::<f64>(Second));
                    } else {

                        if self.is_zero() {
                            return f.write_str("0s");
                        }
                        /// Format a single item.
                        macro_rules! item {
                            ($name:literal, $value:expr) => {
                                match $value {
                                    0 => Ok(()),
                                    value => value.fmt(f).and_then(|_| f.write_str($name)),
                                }
                            };
                        }

                        let seconds = self.seconds.unsigned_abs();
                        let nanoseconds = self.nanoseconds.get().unsigned_abs();

                        item!("d", seconds / Second::per_t::<u64>(Day))?;
                        item!(
                            "h",
                            seconds / Second::per_t::<u64>(Hour) % Hour::per_t::<u64>(Day)
                        )?;
                        item!(
                            "m",
                            seconds / Second::per_t::<u64>(Minute) % Minute::per_t::<u64>(Hour)
                        )?;
                        item!("s", seconds % Second::per_t::<u64>(Minute))?;
                        item!("ms", nanoseconds / Nanosecond::per_t::<u32>(Millisecond))?;
                        item!(
                            "µs",
                            nanoseconds / Nanosecond::per_t::<u32>(Microsecond)
                                % Microsecond::per_t::<u32>(Millisecond)
                        )?;
                        item!("ns", nanoseconds % Nanosecond::per_t::<u32>(Microsecond))?;
                    }

                    Ok(())
                }
            }

            impl ::convert::TryFrom<StdDuration> for Duration 
            {
                type Error = error::ConversionRange;

                fn try_from(original: StdDuration) -> Result<Self, error::ConversionRange>
                {
                    Ok(Self::new(
                        original
                            .as_secs()
                            .try_into()
                            .map_err(|_| error::ConversionRange)?,
                        original.subsec_nanos().cast_signed(),
                    ))
                }
            }

            impl ::convert::TryFrom<Duration> for StdDuration 
            {
                type Error = error::ConversionRange;

                fn try_from(duration: Duration) -> Result<Self, error::ConversionRange>
                {
                    Ok(Self::new(
                        duration
                            .seconds
                            .try_into()
                            .map_err(|_| error::ConversionRange)?,
                        duration
                            .nanoseconds
                            .get()
                            .try_into()
                            .map_err(|_| error::ConversionRange)?,
                    ))
                }
            }

            impl ::ops::Add for Duration
            {
                type Output = Self;
                
                fn add(self, rhs: Self) -> Self::Output
                {
                    self.checked_add(rhs)
                        .expect("overflow when adding durations")
                }
            }

            impl ::ops::Add<StdDuration> for Duration 
            {
                type Output = Self;
                
                fn add(self, std_duration: StdDuration) -> Self::Output 
                {
                    self + Self::try_from(std_duration)
                        .expect("overflow converting `std::time::Duration` to `time::Duration`")
                }
            }

            impl ::ops::Add<Duration> for StdDuration 
            {
                type Output = Duration;
                fn add(self, rhs: Duration) -> Self::Output
                {
                    rhs + self
                }
            }

            impl_add_assign!(Duration: Self, StdDuration);

            impl ::ops::AddAssign<Duration> for StdDuration 
            {
                fn add_assign(&mut self, rhs: Duration)
                {
                    *self = (*self + rhs).try_into().expect
                    (
                        "Cannot represent a resulting duration in std. Try `let x = x + rhs;`, which will change the type.",
                    );
                }
            }

            impl ::ops::Neg for Duration 
            {
                type Output = Self;
                fn neg(self) -> Self::Output
                {
                    self.checked_neg().expect("overflow when negating duration")
                }
            }

            impl ::ops::Sub for Duration 
            {
                type Output = Self;                
                fn sub(self, rhs: Self) -> Self::Output
                {
                    self.checked_sub(rhs)
                        .expect("overflow when subtracting durations")
                }
            }

            impl ::ops::Sub<StdDuration> for Duration 
            {
                type Output = Self;
                fn sub(self, rhs: StdDuration) -> Self::Output
                {
                    self - Self::try_from(rhs)
                        .expect("overflow converting `std::time::Duration` to `time::Duration`")
                }
            }

            impl::ops::Sub<Duration> for StdDuration 
            {
                type Output = Duration;
                
                fn sub(self, rhs: Duration) -> Self::Output {
                    Duration::try_from(self)
                        .expect("overflow converting `std::time::Duration` to `time::Duration`")
                        - rhs
                }
            }

            impl_sub_assign!(Duration: Self, StdDuration);

            impl ::ops::SubAssign<Duration> for StdDuration
            {
                fn sub_assign(&mut self, rhs: Duration) {
                    *self = (*self - rhs).try_into().expect(
                        "Cannot represent a resulting duration in std. Try `let x = x - rhs;`, which will \
                        change the type.",
                    );
                }
            }
            
            /// Implement `Mul` (reflexively) and `Div` for `Duration` for various types.
            macro_rules! duration_mul_div_int
            {
                ($($type:ty),+) => {$(
                    impl Mul<$type> for Duration {
                        type Output = Self;

                        fn mul(self, rhs: $type) -> Self::Output {
                            Self::nanoseconds_i128(
                                self.whole_nanoseconds()
                                    .checked_mul(rhs.cast_signed().extend::<i128>())
                                    .expect("overflow when multiplying duration")
                            )
                        }
                    }

                    impl Mul<Duration> for $type {
                        type Output = Duration;

                        fn mul(self, rhs: Duration) -> Self::Output {
                            rhs * self
                        }
                    }

                    impl Div<$type> for Duration {
                        type Output = Self;

                        fn div(self, rhs: $type) -> Self::Output {
                            Self::nanoseconds_i128(
                                self.whole_nanoseconds() / rhs.cast_signed().extend::<i128>()
                            )
                        }
                    }
                )+};
            }
            duration_mul_div_int![i8, i16, i32, u8, u16, u32];

            impl ::ops::Mul<f32> for Duration 
            {
                type Output = Self;

                fn mul(self, rhs: f32) -> Self::Output {
                    Self::seconds_f32(self.as_seconds_f32() * rhs)
                }
            }

            impl ::ops::Mul<Duration> for f32 
            {
                type Output = Duration;

                fn mul(self, rhs: Duration) -> Self::Output {
                    rhs * self
                }
            }

            impl ::ops::Mul<f64> for Duration 
            {
                type Output = Self;

                fn mul(self, rhs: f64) -> Self::Output {
                    Self::seconds_f64(self.as_seconds_f64() * rhs)
                }
            }

            impl ::ops::Mul<Duration> for f64 
            {
                type Output = Duration;

                fn mul(self, rhs: Duration) -> Self::Output {
                    rhs * self
                }
            }

            impl_mul_assign!(Duration: i8, i16, i32, u8, u16, u32, f32, f64);

            impl ::ops::Div<f32> for Duration 
            {
                type Output = Self;

                fn div(self, rhs: f32) -> Self::Output {
                    Self::seconds_f32(self.as_seconds_f32() / rhs)
                }
            }

            impl ::ops::Div<f64> for Duration 
            {
                type Output = Self;

                fn div(self, rhs: f64) -> Self::Output {
                    Self::seconds_f64(self.as_seconds_f64() / rhs)
                }
            }

            impl_div_assign!(Duration: i8, i16, i32, u8, u16, u32, f32, f64);

            impl ::ops::Div for Duration 
            {
                type Output = f64;

                fn div(self, rhs: Self) -> Self::Output
                {
                    self.as_seconds_f64() / rhs.as_seconds_f64()
                }
            }

            impl ::ops::Div<StdDuration> for Duration 
            {
                type Output = f64;

                fn div(self, rhs: StdDuration) -> Self::Output
                {
                    self.as_seconds_f64() / rhs.as_secs_f64()
                }
            }

            impl ::ops::Div<Duration> for StdDuration 
            {
                type Output = f64;

                fn div(self, rhs: Duration) -> Self::Output
                {
                    self.as_secs_f64() / rhs.as_seconds_f64()
                }
            }

            impl PartialEq<StdDuration> for Duration 
            {
                fn eq(&self, rhs: &StdDuration) -> bool {
                    Ok(*self) == Self::try_from(*rhs)
                }
            }

            impl PartialEq<Duration> for StdDuration 
            {
                fn eq(&self, rhs: &Duration) -> bool {
                    rhs == self
                }
            }

            impl PartialOrd<StdDuration> for Duration 
            {
                fn partial_cmp(&self, rhs: &StdDuration) -> Option<Ordering> {
                    if rhs.as_secs() > i64::MAX.cast_unsigned() {
                        return Some(Ordering::Less);
                    }

                    Some(
                        self.seconds
                            .cmp(&rhs.as_secs().cast_signed())
                            .then_with(|| {
                                self.nanoseconds
                                    .get()
                                    .cmp(&rhs.subsec_nanos().cast_signed())
                            }),
                    )
                }
            }

            impl PartialOrd<Duration> for StdDuration 
            {
                fn partial_cmp(&self, rhs: &Duration) -> Option<Ordering> {
                    rhs.partial_cmp(self).map(Ordering::reverse)
                }
            }

            impl ::iter::Sum for Duration 
            {
                fn sum<I: Iterator<Item = Self>>(iter: I) -> Self {
                    iter.reduce(|a, b| a + b).unwrap_or_default()
                }
            }

            impl<'a> Sum<&'a Self> for Duration 
            {
                fn sum<I: Iterator<Item = &'a Self>>(iter: I) -> Self {
                    iter.copied().sum()
                }
            }

            impl Add<Duration> for SystemTime 
            {
                type Output = Self;

                fn add(self, duration: Duration) -> Self::Output {
                    if duration.is_zero() {
                        self
                    } else if duration.is_positive() {
                        self + duration.unsigned_abs()
                    } else {
                        debug_assert!(duration.is_negative());
                        self - duration.unsigned_abs()
                    }
                }
            }

            impl_add_assign!(SystemTime:Duration);

            impl Sub<Duration> for SystemTime 
            {
                type Output = Self;

                fn sub(self, duration: Duration) -> Self::Output 
                {
                    if duration.is_zero() {
                        self
                    } else if duration.is_positive() {
                        self - duration.unsigned_abs()
                    } else {
                        debug_assert!(duration.is_negative());
                        self + duration.unsigned_abs()
                    }
                }
            }

            impl_sub_assign!(SystemTime:Duration);
            /*
            pub mod error;
            pub mod ext;
            #[cfg(any(feature = "formatting", feature = "parsing"))]
            pub mod format_description;
            #[cfg(feature = "formatting")]
            pub mod formatting;
            mod hint;
            mod instant;
            mod internal_macros;
            mod interop;
            #[cfg(feature = "macros")]
            pub mod macros;
            mod month;
            mod offset_date_time;
            #[cfg(feature = "parsing")]
            pub mod parsing;
            mod primitive_date_time;
            #[cfg(feature = "quickcheck")]
            mod quickcheck;
            #[cfg(feature = "rand")]
            mod rand;
            #[cfg(feature = "serde")]
            pub mod serde;
            mod sys;
            #[cfg(test)]
            mod tests;
            mod time;
            mod utc_date_time;
            mod utc_offset;
            pub mod util;
            mod weekday;

            pub use time_core::convert;

            pub use crate::date::Date;
            pub use crate::duration::Duration;
            pub use crate::error::Error;
            #[doc(hidden)]
            #[allow(deprecated)]
            pub use crate::instant::Instant;
            pub use crate::month::Month;
            pub use crate::offset_date_time::OffsetDateTime;
            pub use crate::primitive_date_time::PrimitiveDateTime;
            pub use crate::time::Time;
            pub use crate::utc_date_time::UtcDateTime;
            pub use crate::utc_offset::UtcOffset;
            pub use crate::weekday::Weekday; */
            /// An alias for [`std::result::Result`] with a generic error from the time crate.
            pub type Result<T> = ::result::Result<T, ()>; // (Error)
            /// Returns the size of the pointed-to value in bytes.
            pub const fn size_of_val<T>(_: &T) -> usize { ::mem::size_of::<T>() }
        }
    } pub use self::prelude::{ * };

    pub mod unix
    {
        use ::
        {
            libc::{ * },
            *,
        };

        pub type intmax_t = i64;
        pub type uintmax_t = u64;

        pub type size_t = usize;
        pub type ptrdiff_t = isize;
        pub type intptr_t = isize;
        pub type uintptr_t = usize;
        pub type ssize_t = isize;

        pub type pid_t = i32;
        pub type in_addr_t = u32;
        pub type in_port_t = u16;
        pub type sighandler_t = size_t;
        pub type cc_t = c_uchar;
        
        pub type uid_t = u32;
        pub type gid_t = u32;
        
        pub type time_t = c_longlong;
        pub type suseconds_t = i32;
        pub type clock_t = c_long;

        pub type fsblkcnt_t = u64;
        pub type fsfilcnt_t = u32;
        pub type id_t = u32;
        pub type key_t = c_int;
        pub type loff_t = c_longlong;
        pub type mode_t = c_uint;
        pub type nfds_t = u32;
        pub type nlink_t = c_ushort;
        pub type pthread_t = c_ulong;
        pub type pthread_key_t = c_uint;
        pub type rlim_t = u32;

        #[derive( Debug )]
        pub enum DIR {}

        pub type locale_t = *mut c_void;

        s! 
        {
            pub struct group
            {
                pub gr_name: *mut c_char,
                pub gr_passwd: *mut c_char,
                pub gr_gid: gid_t,
                pub gr_mem: *mut *mut c_char,
            }

            pub struct utimbuf
            {
                pub actime: time_t,
                pub modtime: time_t,
            }

            pub struct timeval
            {
                pub tv_sec: time_t,
                pub tv_usec: suseconds_t,
            }

            pub struct rlimit 
            {
                pub rlim_cur: rlim_t,
                pub rlim_max: rlim_t,
            }

            pub struct rusage 
            {
                pub ru_utime: timeval,
                pub ru_stime: timeval,
                pub ru_maxrss: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad1: u32,
                pub ru_ixrss: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad2: u32,
                pub ru_idrss: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad3: u32,
                pub ru_isrss: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad4: u32,
                pub ru_minflt: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad5: u32,
                pub ru_majflt: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad6: u32,
                pub ru_nswap: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad7: u32,
                pub ru_inblock: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad8: u32,
                pub ru_oublock: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad9: u32,
                pub ru_msgsnd: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad10: u32,
                pub ru_msgrcv: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad11: u32,
                pub ru_nsignals: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad12: u32,
                pub ru_nvcsw: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad13: u32,
                pub ru_nivcsw: c_long,
                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                __pad14: u32,
            }

            pub struct ipv6_mreq 
            {
                pub ipv6mr_multiaddr: in6_addr,
                pub ipv6mr_interface: c_uint,
            }

            pub struct hostent
            {
                pub h_name: *mut c_char,
                pub h_aliases: *mut *mut c_char,
                pub h_addrtype: c_int,
                pub h_length: c_int,
                pub h_addr_list: *mut *mut c_char,
            }

            pub struct iovec
            {
                pub iov_base: *mut c_void,
                pub iov_len: size_t,
            }

            pub struct pollfd
            {
                pub fd: c_int,
                pub events: c_short,
                pub revents: c_short,
            }

            pub struct winsize
            {
                pub ws_row: c_ushort,
                pub ws_col: c_ushort,
                pub ws_xpixel: c_ushort,
                pub ws_ypixel: c_ushort,
            }
            
            pub struct linger
            {
                pub l_onoff: c_int,
                pub l_linger: c_int,
            }

            pub struct sigval
            {
                pub sival_ptr: *mut c_void,
            }
            
            pub struct itimerval
            {
                pub it_interval: timeval,
                pub it_value: timeval,
            }
            
            pub struct tms
            {
                pub tms_utime: clock_t,
                pub tms_stime: clock_t,
                pub tms_cutime: clock_t,
                pub tms_cstime: clock_t,
            }

            pub struct servent
            {
                pub s_name: *mut c_char,
                pub s_aliases: *mut *mut c_char,
                pub s_port: c_int,
                pub s_proto: *mut c_char,
            }

            pub struct protoent 
            {
                pub p_name: *mut c_char,
                pub p_aliases: *mut *mut c_char,
                pub p_proto: c_int,
            }

            #[repr( align( 4 ) )]
            pub struct in6_addr
            {
                pub s6_addr: [u8; 16],
            }
        }
        
        impl ::fmt::Debug for sigval
        {
            fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
            {
                write!(f, "{:?}", self.sival_ptr)
            }
        }

        pub const INT_MIN:c_int = -2147483648;
        pub const INT_MAX:c_int = 2147483647;

        pub const SIG_DFL:sighandler_t = 0 as sighandler_t;
        pub const SIG_IGN:sighandler_t = 1 as sighandler_t;
        pub const SIG_ERR:sighandler_t = !0 as sighandler_t;
        
        pub const DT_UNKNOWN: u8 = 0;
        pub const DT_FIFO: u8 = 1;
        pub const DT_CHR: u8 = 2;
        pub const DT_DIR: u8 = 4;
        pub const DT_BLK: u8 = 6;
        pub const DT_REG: u8 = 8;
        pub const DT_LNK: u8 = 10;
        pub const DT_SOCK: u8 = 12;

        pub const FD_CLOEXEC: c_int = 0x1;
        pub const USRQUOTA: c_int = 0;
        pub const GRPQUOTA: c_int = 1;
        pub const SIGIOT: c_int = 6;
        
        pub const S_ISUID: mode_t = 0o4000;
        pub const S_ISGID: mode_t = 0o2000;
        pub const S_ISVTX: mode_t = 0o1000;

        pub const IF_NAMESIZE: size_t = 16;
        pub const IFNAMSIZ: size_t = IF_NAMESIZE;

        pub const LOG_EMERG: c_int = 0;
        pub const LOG_ALERT: c_int = 1;
        pub const LOG_CRIT: c_int = 2;
        pub const LOG_ERR: c_int = 3;
        pub const LOG_WARNING: c_int = 4;
        pub const LOG_NOTICE: c_int = 5;
        pub const LOG_INFO: c_int = 6;
        pub const LOG_DEBUG: c_int = 7;

        pub const LOG_KERN: c_int = 0;
        pub const LOG_USER: c_int = 1 << 3;
        pub const LOG_MAIL: c_int = 2 << 3;
        pub const LOG_DAEMON: c_int = 3 << 3;
        pub const LOG_AUTH: c_int = 4 << 3;
        pub const LOG_SYSLOG: c_int = 5 << 3;
        pub const LOG_LPR: c_int = 6 << 3;
        pub const LOG_NEWS: c_int = 7 << 3;
        pub const LOG_UUCP: c_int = 8 << 3;
        pub const LOG_LOCAL0: c_int = 16 << 3;
        pub const LOG_LOCAL1: c_int = 17 << 3;
        pub const LOG_LOCAL2: c_int = 18 << 3;
        pub const LOG_LOCAL3: c_int = 19 << 3;
        pub const LOG_LOCAL4: c_int = 20 << 3;
        pub const LOG_LOCAL5: c_int = 21 << 3;
        pub const LOG_LOCAL6: c_int = 22 << 3;
        pub const LOG_LOCAL7: c_int = 23 << 3;

        pub const LOG_PID: c_int = 0x01;
        pub const LOG_CONS: c_int = 0x02;
        pub const LOG_ODELAY: c_int = 0x04;
        pub const LOG_NDELAY: c_int = 0x08;
        pub const LOG_NOWAIT: c_int = 0x10;
        pub const LOG_PRIMASK: c_int = 7;
        pub const LOG_FACMASK: c_int = 0x3f8;

        pub const PRIO_MIN: c_int = -20;
        pub const PRIO_MAX: c_int = 20;
        pub const IPPROTO_ICMP: c_int = 1;
        pub const IPPROTO_ICMPV6: c_int = 58;
        pub const IPPROTO_TCP: c_int = 6;
        pub const IPPROTO_UDP: c_int = 17;
        pub const IPPROTO_IP: c_int = 0;
        pub const IPPROTO_IPV6: c_int = 41;

        pub const INADDR_LOOPBACK: in_addr_t = 2130706433;
        pub const INADDR_ANY: in_addr_t = 0;
        pub const INADDR_BROADCAST: in_addr_t = 4294967295;
        pub const INADDR_NONE: in_addr_t = 4294967295;

        pub const IN6ADDR_LOOPBACK_INIT: in6_addr = in6_addr {
            s6_addr: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        };

        pub const IN6ADDR_ANY_INIT: in6_addr = in6_addr {
            s6_addr: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        };

        pub const ARPOP_REQUEST: u16 = 1;
        pub const ARPOP_REPLY: u16 = 2;

        pub const ATF_COM: c_int = 0x02;
        pub const ATF_PERM: c_int = 0x04;
        pub const ATF_PUBL: c_int = 0x08;
        pub const ATF_USETRAILERS: c_int = 0x10;

        pub const FNM_PERIOD: c_int = 1 << 2;
        pub const FNM_NOMATCH: c_int = 1;

        pub const FNM_CASEFOLD: c_int = 1 << 4;
        pub const FNM_PATHNAME: c_int = 1 << 0;

        pub const FNM_NOESCAPE: c_int = 1 << 1;

        extern "C" 
        {
            pub static in6addr_loopback: in6_addr;
            pub static in6addr_any: in6_addr;
        }
        
        #[derive(Debug)]
        pub enum FILE {}

        extern "C"
        {
            pub fn isalnum(c: c_int) -> c_int;
            pub fn isalpha(c: c_int) -> c_int;
            pub fn iscntrl(c: c_int) -> c_int;
            pub fn isdigit(c: c_int) -> c_int;
            pub fn isgraph(c: c_int) -> c_int;
            pub fn islower(c: c_int) -> c_int;
            pub fn isprint(c: c_int) -> c_int;
            pub fn ispunct(c: c_int) -> c_int;
            pub fn isspace(c: c_int) -> c_int;
            pub fn isupper(c: c_int) -> c_int;
            pub fn isxdigit(c: c_int) -> c_int;
            pub fn isblank(c: c_int) -> c_int;
            pub fn tolower(c: c_int) -> c_int;
            pub fn toupper(c: c_int) -> c_int;
            pub fn qsort
            (
                base: *mut c_void,
                num: size_t,
                size: size_t,
                compar: Option<unsafe extern "C" fn(*const c_void, *const c_void) -> c_int>,
            );

            pub fn bsearch
            (
                key: *const c_void,
                base: *const c_void,
                num: size_t,
                size: size_t,
                compar: Option<unsafe extern "C" fn(*const c_void, *const c_void) -> c_int>,
            ) -> *mut c_void;
            
            pub fn fopen(filename: *const c_char, mode: *const c_char) -> *mut FILE;
            
            pub fn freopen(filename: *const c_char, mode: *const c_char, file: *mut FILE) -> *mut FILE;

            pub fn fflush(file: *mut FILE) -> c_int;
            pub fn fclose(file: *mut FILE) -> c_int;
            pub fn remove(filename: *const c_char) -> c_int;
            pub fn rename(oldname: *const c_char, newname: *const c_char) -> c_int;
            
            pub fn tmpfile() -> *mut FILE;
            pub fn setvbuf(stream: *mut FILE, buffer: *mut c_char, mode: c_int, size: size_t) -> c_int;
            pub fn setbuf(stream: *mut FILE, buf: *mut c_char);
            pub fn getchar() -> c_int;
            pub fn putchar(c: c_int) -> c_int;
            pub fn fgetc(stream: *mut FILE) -> c_int;
            pub fn fgets(buf: *mut c_char, n: c_int, stream: *mut FILE) -> *mut c_char;
            pub fn fputc(c: c_int, stream: *mut FILE) -> c_int;
            
            pub fn fputs(s: *const c_char, stream: *mut FILE) -> c_int;
            pub fn puts(s: *const c_char) -> c_int;
            pub fn ungetc(c: c_int, stream: *mut FILE) -> c_int;
            pub fn fread(ptr: *mut c_void, size: size_t, nobj: size_t, stream: *mut FILE) -> size_t;
            
            pub fn fwrite(ptr: *const c_void, size: size_t, nobj: size_t, stream: *mut FILE) -> size_t;
            pub fn fseek(stream: *mut FILE, offset: c_long, whence: c_int) -> c_int;
            pub fn ftell(stream: *mut FILE) -> c_long;
            pub fn rewind(stream: *mut FILE);
            pub fn fgetpos(stream: *mut FILE, ptr: *mut fpos_t) -> c_int;
            
            pub fn fsetpos(stream: *mut FILE, ptr: *const fpos_t) -> c_int;
            pub fn feof(stream: *mut FILE) -> c_int;
            pub fn ferror(stream: *mut FILE) -> c_int;
            pub fn clearerr(stream: *mut FILE);
            pub fn perror(s: *const c_char);
            pub fn atof(s: *const c_char) -> c_double;
            pub fn atoi(s: *const c_char) -> c_int;
            pub fn atol(s: *const c_char) -> c_long;
            pub fn atoll(s: *const c_char) -> c_longlong;
            
            pub fn strtod(s: *const c_char, endp: *mut *mut c_char) -> c_double;
            pub fn strtof(s: *const c_char, endp: *mut *mut c_char) -> c_float;
            pub fn strtol(s: *const c_char, endp: *mut *mut c_char, base: c_int) -> c_long;
            pub fn strtoll(s: *const c_char, endp: *mut *mut c_char, base: c_int) -> c_longlong;
            pub fn strtoul(s: *const c_char, endp: *mut *mut c_char, base: c_int) -> c_ulong;
            pub fn strtoull(s: *const c_char, endp: *mut *mut c_char, base: c_int) -> c_ulonglong;
            pub fn calloc(nobj: size_t, size: size_t) -> *mut c_void;
            
            pub fn malloc(size: size_t) -> *mut c_void;
            pub fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;
            pub fn free(p: *mut c_void);
            pub fn abort() -> !;
            pub fn exit(status: c_int) -> !;
            pub fn _exit(status: c_int) -> !;
            
            pub fn system(s: *const c_char) -> c_int;
            pub fn getenv(s: *const c_char) -> *mut c_char;

            pub fn strcpy(dst: *mut c_char, src: *const c_char) -> *mut c_char;
            pub fn strncpy(dst: *mut c_char, src: *const c_char, n: size_t) -> *mut c_char;
            pub fn stpcpy(dst: *mut c_char, src: *const c_char) -> *mut c_char;
            pub fn strcat(s: *mut c_char, ct: *const c_char) -> *mut c_char;
            pub fn strncat(s: *mut c_char, ct: *const c_char, n: size_t) -> *mut c_char;
            pub fn strcmp(cs: *const c_char, ct: *const c_char) -> c_int;
            pub fn strncmp(cs: *const c_char, ct: *const c_char, n: size_t) -> c_int;
            pub fn strcoll(cs: *const c_char, ct: *const c_char) -> c_int;
            pub fn strchr(cs: *const c_char, c: c_int) -> *mut c_char;
            pub fn strrchr(cs: *const c_char, c: c_int) -> *mut c_char;
            pub fn strspn(cs: *const c_char, ct: *const c_char) -> size_t;
            pub fn strcspn(cs: *const c_char, ct: *const c_char) -> size_t;
            pub fn strdup(cs: *const c_char) -> *mut c_char;
            pub fn strndup(cs: *const c_char, n: size_t) -> *mut c_char;
            pub fn strpbrk(cs: *const c_char, ct: *const c_char) -> *mut c_char;
            pub fn strstr(cs: *const c_char, ct: *const c_char) -> *mut c_char;
            pub fn strcasecmp(s1: *const c_char, s2: *const c_char) -> c_int;
            pub fn strncasecmp(s1: *const c_char, s2: *const c_char, n: size_t) -> c_int;
            pub fn strlen(cs: *const c_char) -> size_t;
            pub fn strnlen(cs: *const c_char, maxlen: size_t) -> size_t;
            
            pub fn strerror(n: c_int) -> *mut c_char;
            pub fn strtok(s: *mut c_char, t: *const c_char) -> *mut c_char;
            pub fn strtok_r(s: *mut c_char, t: *const c_char, p: *mut *mut c_char) -> *mut c_char;
            pub fn strxfrm(s: *mut c_char, ct: *const c_char, n: size_t) -> size_t;
            pub fn strsignal(sig: c_int) -> *mut c_char;
            pub fn wcslen(buf: *const wchar_t) -> size_t;
            pub fn wcstombs(dest: *mut c_char, src: *const wchar_t, n: size_t) -> size_t;

            pub fn memchr(cx: *const c_void, c: c_int, n: size_t) -> *mut c_void;
            pub fn wmemchr(cx: *const wchar_t, c: wchar_t, n: size_t) -> *mut wchar_t;
            pub fn memcmp(cx: *const c_void, ct: *const c_void, n: size_t) -> c_int;
            pub fn memcpy(dest: *mut c_void, src: *const c_void, n: size_t) -> *mut c_void;
            pub fn memmove(dest: *mut c_void, src: *const c_void, n: size_t) -> *mut c_void;
            pub fn memset(dest: *mut c_void, c: c_int, n: size_t) -> *mut c_void;
            pub fn memccpy(dest: *mut c_void, src: *const c_void, c: c_int, n: size_t) -> *mut c_void;
        }

        extern "C"
        {
            pub fn getpwnam(name: *const c_char) -> *mut passwd;
            pub fn getpwuid(uid:  uid_t) -> *mut passwd;

            pub fn fprintf(stream: *mut FILE, format: *const c_char, ...) -> c_int;
            pub fn printf(format: *const c_char, ...) -> c_int;
            pub fn snprintf(s: *mut c_char, n: size_t, format: *const c_char, ...) -> c_int;
            pub fn sprintf(s: *mut c_char, format: *const c_char, ...) -> c_int;
            
            pub fn fscanf(stream: *mut FILE, format: *const c_char, ...) -> c_int;
            
            pub fn scanf(format: *const c_char, ...) -> c_int;
            
            pub fn sscanf(s: *const c_char, format: *const c_char, ...) -> c_int;
            pub fn getchar_unlocked() -> c_int;
            pub fn putchar_unlocked(c: c_int) -> c_int;
            
            pub fn socket(domain: c_int, ty: c_int, protocol: c_int) -> c_int;
            
            pub fn connect(socket: c_int, address: *const sockaddr, len: socklen_t) -> c_int;
            
            pub fn listen(socket: c_int, backlog: c_int) -> c_int;
            
            pub fn accept(socket: c_int, address: *mut sockaddr, address_len: *mut socklen_t) -> c_int;
            
            pub fn getpeername(socket: c_int, address: *mut sockaddr, address_len: *mut socklen_t) -> c_int;
                
            pub fn getsockname(socket: c_int, address: *mut sockaddr, address_len: *mut socklen_t) -> c_int;
            
            pub fn setsockopt
            (
                socket: c_int,
                level: c_int,
                name: c_int,
                value: *const c_void,
                option_len: socklen_t,
            ) -> c_int;
            
            pub fn socketpair
            (
                domain: c_int,
                type_: c_int,
                protocol: c_int,
                socket_vector: *mut c_int,
            ) -> c_int;
            
            pub fn sendto
            (
                socket: c_int,
                buf: *const c_void,
                len: size_t,
                flags: c_int,
                addr: *const sockaddr,
                addrlen: socklen_t,
            ) -> ssize_t;
            
            pub fn shutdown(socket: c_int, how: c_int) -> c_int;
            
            pub fn chmod(path: *const c_char, mode: mode_t) -> c_int;
            
            pub fn fchmod(fd: c_int, mode: mode_t) -> c_int;
            
            pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;

            pub fn mkdir(path: *const c_char, mode: mode_t) -> c_int;
            
            pub fn stat(path: *const c_char, buf: *mut stat) -> c_int;

            pub fn pclose(stream: *mut FILE) -> c_int;
            
            pub fn fdopen(fd: c_int, mode: *const c_char) -> *mut  FILE;
            pub fn fileno(stream: *mut FILE) -> c_int;
            
            pub fn open(path: *const c_char, oflag: c_int, ...) -> c_int;
            
            pub fn creat(path: *const c_char, mode: mode_t) -> c_int;
            
            pub fn fcntl(fd: c_int, cmd: c_int, ...) -> c_int;
            
            pub fn opendir(dirname: *const c_char) -> *mut  DIR;
            
            #[cfg_attr(gnu_file_offset_bits64, link_name = "readdir64")]
            pub fn readdir(dirp: *mut DIR) -> *mut  dirent;
            
            pub fn closedir(dirp: *mut DIR) -> c_int;
            
            pub fn rewinddir(dirp: *mut DIR);

            pub fn fchmodat(dirfd: c_int, pathname: *const c_char, mode: mode_t, flags: c_int) -> c_int;
            pub fn fchown(fd: c_int, owner:  uid_t, group:  gid_t) -> c_int;

            pub fn fchownat
            (
                dirfd: c_int,
                pathname: *const c_char,
                owner:  uid_t,
                group:  gid_t,
                flags: c_int,
            ) -> c_int;
            
            pub fn fstatat(dirfd: c_int, pathname: *const c_char, buf: *mut stat, flags: c_int) -> c_int;

            pub fn linkat
            (
                olddirfd: c_int,
                oldpath: *const c_char,
                newdirfd: c_int,
                newpath: *const c_char,
                flags: c_int,
            ) -> c_int;

            pub fn renameat
            (
                olddirfd: c_int,
                oldpath: *const c_char,
                newdirfd: c_int,
                newpath: *const c_char,
            ) -> c_int;

            pub fn symlinkat(target: *const c_char, newdirfd: c_int, linkpath: *const c_char) -> c_int;
            pub fn unlinkat(dirfd: c_int, pathname: *const c_char, flags: c_int) -> c_int;

            pub fn access(path: *const c_char, amode: c_int) -> c_int;
            pub fn alarm(seconds: c_uint) -> c_uint;
            pub fn chdir(dir: *const c_char) -> c_int;
            pub fn fchdir(dirfd: c_int) -> c_int;
            pub fn chown(path: *const c_char, uid: uid_t, gid: gid_t) -> c_int;
            
            pub fn lchown(path: *const c_char, uid: uid_t, gid: gid_t) -> c_int;
            
            pub fn close(fd: c_int) -> c_int;
            pub fn dup(fd: c_int) -> c_int;
            pub fn dup2(src: c_int, dst: c_int) -> c_int;

            pub fn execl(path: *const c_char, arg0: *const c_char, ...) -> c_int;
            pub fn execle(path: *const c_char, arg0: *const c_char, ...) -> c_int;
            pub fn execlp(file: *const c_char, arg0: *const c_char, ...) -> c_int;
            pub fn execv(prog: *const c_char, argv: *const *mut c_char) -> c_int;
            pub fn execve(prog: *const c_char, argv: *const *mut c_char, envp: *const *mut c_char) -> c_int;
            pub fn execvp(c: *const c_char, argv: *const *mut c_char) -> c_int;

            pub fn fork() -> pid_t;
            pub fn fpathconf(filedes: c_int, name: c_int) -> c_long;
            pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;
            pub fn getegid() -> gid_t;
            pub fn geteuid() -> uid_t;
            pub fn getgid() -> gid_t;
            pub fn getgroups(ngroups_max: c_int, groups: *mut gid_t) -> c_int;
            pub fn getlogin() -> *mut c_char;
            pub fn getopt(argc: c_int, argv: *const *mut c_char, optstr: *const c_char) -> c_int;
            pub fn getpgid(pid: pid_t) -> pid_t;
            pub fn getpgrp() -> pid_t;
            pub fn getpid() -> pid_t;
            pub fn getppid() -> pid_t;
            pub fn getuid() -> uid_t;
            pub fn isatty(fd: c_int) -> c_int;

            #[cfg_attr(target_os = "solaris", link_name = "__link_xpg4")]
            pub fn link(src: *const c_char, dst: *const c_char) -> c_int;

            #[cfg_attr(gnu_file_offset_bits64, link_name = "lseek64")]
            pub fn lseek(fd: c_int, offset: off_t, whence: c_int) -> off_t;

            pub fn pathconf(path: *const c_char, name: c_int) -> c_long;
            pub fn pipe(fds: *mut c_int) -> c_int;
            pub fn posix_memalign(memptr: *mut *mut c_void, align: size_t, size: size_t) -> c_int;
            pub fn aligned_alloc(alignment: size_t, size: size_t) -> *mut c_void;
            
            pub fn read(fd: c_int, buf: *mut c_void, count: size_t) -> ssize_t;
            pub fn rmdir(path: *const c_char) -> c_int;
            pub fn seteuid(uid: uid_t) -> c_int;
            pub fn setegid(gid: gid_t) -> c_int;
            pub fn setgid(gid: gid_t) -> c_int;
            pub fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;
            pub fn setsid() -> pid_t;
            pub fn setuid(uid: uid_t) -> c_int;
            pub fn setreuid(ruid: uid_t, euid: uid_t) -> c_int;
            pub fn setregid(rgid: gid_t, egid: gid_t) -> c_int;
            pub fn sleep(secs: c_uint) -> c_uint;
            
            pub fn nanosleep(rqtp: *const timespec, rmtp: *mut timespec) -> c_int;
            pub fn tcgetpgrp(fd: c_int) -> pid_t;
            pub fn tcsetpgrp(fd: c_int, pgrp:  pid_t) -> c_int;
            pub fn ttyname(fd: c_int) -> *mut c_char;
            
            pub fn ttyname_r(fd: c_int, buf: *mut c_char, buflen: size_t) -> c_int;
            pub fn unlink(c: *const c_char) -> c_int;
            
            pub fn wait(status: *mut c_int) -> pid_t;
            
            pub fn waitpid(pid: pid_t, status: *mut c_int, options: c_int) -> pid_t;
            pub fn write(fd: c_int, buf: *const c_void, count: size_t) -> ssize_t;
            
            #[cfg_attr(gnu_file_offset_bits64, link_name = "pread64")]
            pub fn pread(fd: c_int, buf: *mut c_void, count: size_t, offset: off_t) -> ssize_t;
            
            #[cfg_attr(gnu_file_offset_bits64, link_name = "pwrite64")]
            pub fn pwrite(fd: c_int, buf: *const c_void, count: size_t, offset: off_t) -> ssize_t;
            pub fn umask(mask: mode_t) -> mode_t;
            
            #[cfg_attr(gnu_time_bits64, link_name = "__utime64")]
            pub fn utime(file: *const c_char, buf: *const utimbuf) -> c_int;
            pub fn kill(pid: pid_t, sig: c_int) -> c_int;
            pub fn killpg(pgrp: pid_t, sig: c_int) -> c_int;

            pub fn mlock(addr: *const c_void, len: size_t) -> c_int;
            pub fn munlock(addr: *const c_void, len: size_t) -> c_int;
            pub fn mlockall(flags: c_int) -> c_int;
            pub fn munlockall() -> c_int;
            
            #[cfg_attr(gnu_file_offset_bits64, link_name = "mmap64")]
            pub fn mmap
            (
                addr: *mut c_void,
                len: size_t,
                prot: c_int,
                flags: c_int,
                fd: c_int,
                offset: off_t,
            ) -> *mut c_void;

            pub fn munmap(addr: *mut c_void, len: size_t) -> c_int;
            pub fn if_nametoindex(ifname: *const c_char) -> c_uint;
            pub fn if_indextoname(ifindex: c_uint, ifname: *mut c_char) -> *mut c_char;
            pub fn lstat(path: *const c_char, buf: *mut stat) -> c_int;
            pub fn fsync(fd: c_int) -> c_int;
            pub fn setenv(name: *const c_char, val: *const c_char, overwrite: c_int) -> c_int;
            pub fn unsetenv(name: *const c_char) -> c_int;

            pub fn symlink(path1: *const c_char, path2: *const c_char) -> c_int;

            #[cfg_attr(gnu_file_offset_bits64, link_name = "truncate64")]
            pub fn truncate(path: *const c_char, length: off_t) -> c_int;
            #[cfg_attr(gnu_file_offset_bits64, link_name = "ftruncate64")]
            pub fn ftruncate(fd: c_int, length: off_t) -> c_int;

            pub fn signal(signum: c_int, handler: sighandler_t) -> sighandler_t;
            pub fn getrusage(resource: c_int, usage: *mut rusage) -> c_int;
            pub fn realpath(pathname: *const c_char, resolved: *mut c_char) -> *mut c_char;
            
            pub fn times(buf: *mut tms) ->  clock_t;

            pub fn pthread_self() ->  pthread_t;
            pub fn pthread_equal(t1:  pthread_t, t2:  pthread_t) -> c_int;
            pub fn pthread_join(native:  pthread_t, value: *mut *mut c_void) -> c_int;
            pub fn pthread_exit(value: *mut c_void) -> !;
            pub fn pthread_attr_init(attr: *mut pthread_attr_t) -> c_int;
            pub fn pthread_attr_destroy(attr: *mut pthread_attr_t) -> c_int;

            pub fn pthread_attr_getstacksize
            (
                attr: *const pthread_attr_t,
                stacksize: *mut size_t,
            ) -> c_int;

            pub fn pthread_attr_setstacksize(attr: *mut pthread_attr_t, stack_size: size_t) -> c_int;
            pub fn pthread_attr_setdetachstate(attr: *mut pthread_attr_t, state: c_int) -> c_int;
            pub fn pthread_detach(thread:  pthread_t) -> c_int;
            pub fn sched_yield() -> c_int;

            pub fn pthread_key_create
            (
                key: *mut pthread_key_t,
                dtor: Option<unsafe extern "C" fn(*mut c_void)>,
            ) -> c_int;

            pub fn pthread_key_delete(key: pthread_key_t) -> c_int;
            pub fn pthread_getspecific(key: pthread_key_t) -> *mut c_void;
            pub fn pthread_setspecific(key: pthread_key_t, value: *const c_void) -> c_int;

            pub fn pthread_mutex_init
            (
                lock: *mut pthread_mutex_t,
                attr: *const pthread_mutexattr_t,
            ) -> c_int;

            pub fn pthread_mutex_destroy(lock: *mut pthread_mutex_t) -> c_int;
            pub fn pthread_mutex_lock(lock: *mut pthread_mutex_t) -> c_int;
            pub fn pthread_mutex_trylock(lock: *mut pthread_mutex_t) -> c_int;
            pub fn pthread_mutex_unlock(lock: *mut pthread_mutex_t) -> c_int;

            pub fn pthread_mutexattr_init(attr: *mut pthread_mutexattr_t) -> c_int;
            pub fn pthread_mutexattr_destroy(attr: *mut pthread_mutexattr_t) -> c_int;
            pub fn pthread_mutexattr_settype(attr: *mut pthread_mutexattr_t, _type: c_int) -> c_int;
            
            pub fn pthread_cond_init(cond: *mut pthread_cond_t, attr: *const pthread_condattr_t) -> c_int;
            pub fn pthread_cond_wait(cond: *mut pthread_cond_t, lock: *mut pthread_mutex_t) -> c_int;
            #[cfg_attr(gnu_time_bits64, link_name = "__pthread_cond_timedwait64")]
            pub fn pthread_cond_timedwait
            (
                cond: *mut pthread_cond_t,
                lock: *mut pthread_mutex_t,
                abstime: *const timespec,
            ) -> c_int;

            pub fn pthread_cond_signal(cond: *mut pthread_cond_t) -> c_int;
            pub fn pthread_cond_broadcast(cond: *mut pthread_cond_t) -> c_int;
            pub fn pthread_cond_destroy(cond: *mut pthread_cond_t) -> c_int;
            pub fn pthread_condattr_init(attr: *mut pthread_condattr_t) -> c_int;
            pub fn pthread_condattr_destroy(attr: *mut pthread_condattr_t) -> c_int;

            pub fn pthread_rwlock_init
            (
                lock: *mut pthread_rwlock_t,
                attr: *const pthread_rwlockattr_t,
            ) -> c_int;

            pub fn pthread_rwlock_destroy(lock: *mut pthread_rwlock_t) -> c_int;
            pub fn pthread_rwlock_rdlock(lock: *mut pthread_rwlock_t) -> c_int;
            pub fn pthread_rwlock_tryrdlock(lock: *mut pthread_rwlock_t) -> c_int;
            pub fn pthread_rwlock_wrlock(lock: *mut pthread_rwlock_t) -> c_int;
            pub fn pthread_rwlock_trywrlock(lock: *mut pthread_rwlock_t) -> c_int;
            pub fn pthread_rwlock_unlock(lock: *mut pthread_rwlock_t) -> c_int;
            pub fn pthread_rwlockattr_init(attr: *mut pthread_rwlockattr_t) -> c_int;
            pub fn pthread_rwlockattr_destroy(attr: *mut pthread_rwlockattr_t) -> c_int;
            
            #[cfg_attr(gnu_time_bits64, link_name = "__getsockopt64")]
            pub fn getsockopt
            (
                sockfd: c_int,
                level: c_int,
                optname: c_int,
                optval: *mut c_void,
                optlen: *mut socklen_t,
            ) -> c_int;

            pub fn raise(signum: c_int) -> c_int;
            pub fn utimes(filename: *const c_char, times: *const timeval) -> c_int;
            pub fn dlopen(filename: *const c_char, flag: c_int) -> *mut c_void;
            pub fn dlerror() -> *mut c_char;
            pub fn dlsym(handle: *mut c_void, symbol: *const c_char) -> *mut c_void;
            pub fn dlclose(handle: *mut c_void) -> c_int;
            pub fn getaddrinfo
            (
                node: *const c_char,
                service: *const c_char,
                hints: *const addrinfo,
                res: *mut *mut addrinfo,
            ) -> c_int;

            pub fn freeaddrinfo(res: *mut addrinfo);
            pub fn hstrerror(errcode: c_int) -> *const c_char;
            pub fn gai_strerror(errcode: c_int) -> *const c_char;

            #[cfg_attr(
                any(
                    all(
                        target_os = "linux",
                        not(any(target_env = "musl", target_env = "ohos"))
                    ),
                    target_os = "freebsd",
                    target_os = "cygwin",
                    target_os = "dragonfly",
                    target_os = "haiku"
                ),
                link_name = "__res_init"
            )]
            pub fn res_init() -> c_int;

            #[cfg_attr(gnu_time_bits64, link_name = "__gmtime64_r")]
            pub fn gmtime_r(time_p: *const time_t, result: *mut tm) -> *mut tm;
            #[cfg_attr(gnu_time_bits64, link_name = "__localtime64_r")]
            pub fn localtime_r(time_p: *const time_t, result: *mut tm) -> *mut tm;
            #[cfg_attr(gnu_time_bits64, link_name = "__mktime64")]
            pub fn mktime(tm: *mut tm) -> time_t;
            #[cfg_attr(gnu_time_bits64, link_name = "__time64")]
            pub fn time(time: *mut time_t) -> time_t;
            #[cfg_attr(gnu_time_bits64, link_name = "__gmtime64")]
            pub fn gmtime(time_p: *const time_t) -> *mut tm;
            #[cfg_attr(gnu_time_bits64, link_name = "__localtime64")]
            pub fn localtime(time_p: *const time_t) -> *mut tm;
            #[cfg_attr(gnu_time_bits64, link_name = "__difftime64")]
            pub fn difftime(time1: time_t, time0: time_t) -> c_double;
            pub fn timegm(tm: *mut tm) -> time_t;
            pub fn mknod(pathname: *const c_char, mode: mode_t, dev:  dev_t) -> c_int;
            pub fn gethostname(name: *mut c_char, len: size_t) -> c_int;
            pub fn endservent();
            pub fn getservbyname(name: *const c_char, proto: *const c_char) -> *mut servent;
            pub fn getservbyport(port: c_int, proto: *const c_char) -> *mut servent;
            pub fn getservent() -> *mut servent;
            pub fn setservent(stayopen: c_int);
            pub fn getprotobyname(name: *const c_char) -> *mut protoent;
            pub fn getprotobynumber(proto: c_int) -> *mut protoent;
            pub fn chroot(name: *const c_char) -> c_int;
            pub fn usleep(secs: c_uint) -> c_int;
            pub fn send(socket: c_int, buf: *const c_void, len: size_t, flags: c_int) -> ssize_t;
            pub fn recv(socket: c_int, buf: *mut c_void, len: size_t, flags: c_int) -> ssize_t;
            pub fn putenv(string: *mut c_char) -> c_int;
            pub fn poll(fds: *mut pollfd, nfds: nfds_t, timeout: c_int) -> c_int;
            
            #[cfg_attr(gnu_time_bits64, link_name = "__select64")]
            pub fn select
            (
                nfds: c_int,
                readfds: *mut fd_set,
                writefds: *mut fd_set,
                errorfds: *mut fd_set,
                timeout: *mut timeval,
            ) -> c_int;

            pub fn setlocale(category: c_int, locale: *const c_char) -> *mut c_char;
            pub fn localeconv() -> *mut lconv;
            pub fn sem_wait(sem: *mut sem_t) -> c_int;
            pub fn sem_trywait(sem: *mut sem_t) -> c_int;
            pub fn sem_post(sem: *mut sem_t) -> c_int;
            pub fn statvfs(path: *const c_char, buf: *mut statvfs) -> c_int;
            pub fn fstatvfs(fd: c_int, buf: *mut statvfs) -> c_int;

            pub fn sigemptyset(set: *mut sigset_t) -> c_int;
            pub fn sigaddset(set: *mut sigset_t, signum: c_int) -> c_int;
            pub fn sigfillset(set: *mut sigset_t) -> c_int;
            pub fn sigdelset(set: *mut sigset_t, signum: c_int) -> c_int;
            pub fn sigismember(set: *const sigset_t, signum: c_int) -> c_int;
            pub fn sigprocmask(how: c_int, set: *const sigset_t, oldset: *mut sigset_t) -> c_int;
            pub fn sigpending(set: *mut sigset_t) -> c_int;
            pub fn sysconf(name: c_int) -> c_long;

            pub fn mkfifo(path: *const c_char, mode: mode_t) -> c_int;

            #[cfg_attr(gnu_file_offset_bits64, link_name = "fseeko64")]
            pub fn fseeko(stream: *mut FILE, offset: off_t, whence: c_int) -> c_int;
            #[cfg_attr(gnu_file_offset_bits64, link_name = "ftello64")]
            pub fn ftello(stream: *mut FILE) -> off_t;
            pub fn tcdrain(fd: c_int) -> c_int;
            pub fn cfgetispeed(termios: *const termios) ->  speed_t;
            pub fn cfgetospeed(termios: *const termios) ->  speed_t;
            pub fn cfsetispeed(termios: *mut termios, speed:  speed_t) -> c_int;
            pub fn cfsetospeed(termios: *mut termios, speed:  speed_t) -> c_int;
            pub fn tcgetattr(fd: c_int, termios: *mut termios) -> c_int;
            pub fn tcsetattr(fd: c_int, optional_actions: c_int, termios: *const termios) -> c_int;
            pub fn tcflow(fd: c_int, action: c_int) -> c_int;
            pub fn tcflush(fd: c_int, action: c_int) -> c_int;
            pub fn tcgetsid(fd: c_int) ->  pid_t;
            pub fn tcsendbreak(fd: c_int, duration: c_int) -> c_int;
            pub fn mkstemp(template: *mut c_char) -> c_int;
            pub fn mkdtemp(template: *mut c_char) -> *mut c_char;

            pub fn tmpnam(ptr: *mut c_char) -> *mut c_char;

            pub fn openlog(ident: *const c_char, logopt: c_int, facility: c_int);
            pub fn closelog();
            pub fn setlogmask(maskpri: c_int) -> c_int;
            pub fn syslog(priority: c_int, message: *const c_char, ...);
            pub fn nice(incr: c_int) -> c_int;

            pub fn grantpt(fd: c_int) -> c_int;
            pub fn posix_openpt(flags: c_int) -> c_int;
            pub fn ptsname(fd: c_int) -> *mut c_char;
            pub fn unlockpt(fd: c_int) -> c_int;
            pub fn strcasestr(cs: *const c_char, ct: *const c_char) -> *mut c_char;
            pub fn getline(lineptr: *mut *mut c_char, n: *mut size_t, stream: *mut FILE) -> ssize_t;

            #[cfg_attr(gnu_file_offset_bits64, link_name = "lockf64")]
            pub fn lockf(fd: c_int, cmd: c_int, len: off_t) -> c_int;

        }

        safe_f! 
        {
            pub {const} fn htonl(hostlong: u32) -> u32 { u32::to_be(hostlong) }
            pub {const} fn htons(hostshort: u16) -> u16 { u16::to_be(hostshort) }
            pub {const} fn ntohl(netlong: u32) -> u32 { u32::from_be(netlong) }
            pub {const} fn ntohs(netshort: u16) -> u16 { u16::from_be(netshort) }
        }
        
        extern "C"
        {
            #[cfg_attr(gnu_time_bits64, link_name = "__adjtime64")]
            pub fn adjtime(delta: *const timeval, olddelta: *mut timeval) -> c_int;
            pub fn stpncpy(dst: *mut c_char, src: *const c_char, n: size_t) -> *mut c_char;
            pub fn confstr(name: c_int, buf: *mut c_char, len: size_t) -> size_t;
            pub fn dladdr(addr: *const c_void, info: *mut Dl_info) -> c_int;
            pub fn flock(fd: c_int, operation: c_int) -> c_int;
            pub fn open_wmemstream(ptr: *mut *mut wchar_t, sizeloc: *mut size_t) -> *mut FILE;
            pub fn getsid(pid: pid_t) -> pid_t;
            #[cfg_attr(
                all(target_os = "macos", target_arch = "x86"),
                link_name = "pause$UNIX2003"
            )]
            pub fn pause() -> c_int;

            pub fn mkdirat(dirfd: c_int, pathname: *const c_char, mode: mode_t) -> c_int;
            #[cfg_attr(gnu_file_offset_bits64, link_name = "openat64")]
            pub fn openat(dirfd: c_int, pathname: *const c_char, flags: c_int, ...) -> c_int;

            #[cfg_attr(
                all(target_os = "macos", target_arch = "x86_64"),
                link_name = "fdopendir$INODE64"
            )]
            #[cfg_attr(
                all(target_os = "macos", target_arch = "x86"),
                link_name = "fdopendir$INODE64$UNIX2003"
            )]
            pub fn fdopendir(fd: c_int) -> *mut  DIR;

            #[cfg_attr(
                all(target_os = "macos", not(target_arch = "aarch64")),
                link_name = "readdir_r$INODE64"
            )]
            #[cfg_attr(target_os = "netbsd", link_name = "__readdir_r30")]
            #[cfg_attr(
                all(target_os = "freebsd", any(freebsd11, freebsd10)),
                link_name = "readdir_r@FBSD_1.0"
            )]
            
            #[cfg_attr(gnu_file_offset_bits64, link_name = "readdir64_r")]
            pub fn readdir_r(
                dirp: *mut DIR,
                entry: *mut dirent,
                result: *mut *mut  dirent,
            ) -> c_int;
            pub fn readlinkat
            (
                dirfd: c_int,
                pathname: *const c_char,
                buf: *mut c_char,
                bufsiz: size_t,
            ) -> ssize_t;
            pub fn fmemopen(buf: *mut c_void, size: size_t, mode: *const c_char) -> *mut FILE;
            pub fn open_memstream(ptr: *mut *mut c_char, sizeloc: *mut size_t) -> *mut FILE;
            pub fn atexit(cb: extern "C" fn()) -> c_int;
            pub fn readlink(path: *const c_char, buf: *mut c_char, bufsz: size_t) -> ssize_t;

            pub fn pselect
            (
                nfds: c_int,
                readfds: *mut fd_set,
                writefds: *mut fd_set,
                errorfds: *mut fd_set,
                timeout: *const timespec,
                sigmask: *const sigset_t,
            ) -> c_int;

            pub fn cfmakeraw( termios: *mut termios );
            pub fn cfsetspeed( termios: *mut termios, speed:speed_t ) -> c_int;
            pub fn fnmatch( pattern: *const c_char, name: *const c_char, flags: c_int ) -> c_int;
        }
        
        mod linux_like
        {
            use ::libc::*;

            pub type sa_family_t = u16;
            pub type speed_t = c_uint;
            pub type tcflag_t = c_uint;
            pub type clockid_t = c_int;
            pub type timer_t = *mut c_void;
            pub type key_t = c_int;
            pub type id_t = c_uint;

            missing! 
            {
                #[derive(Debug)]
                pub enum timezone {}
            }

            s!
            {
                #[allow(unpredictable_function_pointer_comparisons)]
                pub struct __c_anonymous_sigev_thread
                {
                    pub _function: Option<extern "C" fn( sigval ) -> *mut c_void>,
                    pub _attribute: *mut  pthread_attr_t,
                }

                pub struct in_addr
                {
                    pub s_addr:  in_addr_t,
                }

                pub struct ip_mreq
                {
                    pub imr_multiaddr: in_addr,
                    pub imr_interface: in_addr,
                }

                pub struct ip_mreqn 
                {
                    pub imr_multiaddr: in_addr,
                    pub imr_address: in_addr,
                    pub imr_ifindex: c_int,
                }

                pub struct ip_mreq_source 
                {
                    pub imr_multiaddr: in_addr,
                    pub imr_interface: in_addr,
                    pub imr_sourceaddr: in_addr,
                }

                pub struct sockaddr 
                {
                    pub sa_family: sa_family_t,
                    pub sa_data: [c_char; 14],
                }

                pub struct sockaddr_in 
                {
                    pub sin_family: sa_family_t,
                    pub sin_port:  in_port_t,
                    pub sin_addr:  in_addr,
                    pub sin_zero: [u8; 8],
                }

                pub struct sockaddr_in6 
                {
                    pub sin6_family: sa_family_t,
                    pub sin6_port:  in_port_t,
                    pub sin6_flowinfo: u32,
                    pub sin6_addr:  in6_addr,
                    pub sin6_scope_id: u32,
                }
                
                pub struct addrinfo
                {
                    pub ai_flags: c_int,
                    pub ai_family: c_int,
                    pub ai_socktype: c_int,
                    pub ai_protocol: c_int,
                    pub ai_addrlen: socklen_t,
                    pub ai_addr: *mut  sockaddr,
                    pub ai_canonname: *mut c_char,
                    pub ai_next: *mut addrinfo,
                }

                pub struct sockaddr_ll 
                {
                    pub sll_family: c_ushort,
                    pub sll_protocol: c_ushort,
                    pub sll_ifindex: c_int,
                    pub sll_hatype: c_ushort,
                    pub sll_pkttype: c_uchar,
                    pub sll_halen: c_uchar,
                    pub sll_addr: [c_uchar; 8],
                }

                pub struct fd_set 
                {
                    fds_bits: [c_ulong; FD_SETSIZE as usize / ULONG_SIZE],
                }

                pub struct tm
                {
                    pub tm_sec: c_int,
                    pub tm_min: c_int,
                    pub tm_hour: c_int,
                    pub tm_mday: c_int,
                    pub tm_mon: c_int,
                    pub tm_year: c_int,
                    pub tm_wday: c_int,
                    pub tm_yday: c_int,
                    pub tm_isdst: c_int,
                    pub tm_gmtoff: c_long,
                    pub tm_zone: *const c_char,
                }

                pub struct sched_param 
                {
                    pub sched_priority: c_int,
                }

                pub struct Dl_info
                {
                    pub dli_fname: *const c_char,
                    pub dli_fbase: *mut c_void,
                    pub dli_sname: *const c_char,
                    pub dli_saddr: *mut c_void,
                }

                pub struct lconv
                {
                    pub decimal_point: *mut c_char,
                    pub thousands_sep: *mut c_char,
                    pub grouping: *mut c_char,
                    pub int_curr_symbol: *mut c_char,
                    pub currency_symbol: *mut c_char,
                    pub mon_decimal_point: *mut c_char,
                    pub mon_thousands_sep: *mut c_char,
                    pub mon_grouping: *mut c_char,
                    pub positive_sign: *mut c_char,
                    pub negative_sign: *mut c_char,
                    pub int_frac_digits: c_char,
                    pub frac_digits: c_char,
                    pub p_cs_precedes: c_char,
                    pub p_sep_by_space: c_char,
                    pub n_cs_precedes: c_char,
                    pub n_sep_by_space: c_char,
                    pub p_sign_posn: c_char,
                    pub n_sign_posn: c_char,
                    pub int_p_cs_precedes: c_char,
                    pub int_p_sep_by_space: c_char,
                    pub int_n_cs_precedes: c_char,
                    pub int_n_sep_by_space: c_char,
                    pub int_p_sign_posn: c_char,
                    pub int_n_sign_posn: c_char,
                }

                pub struct in_pktinfo
                {
                    pub ipi_ifindex: c_int,
                    pub ipi_spec_dst:  in_addr,
                    pub ipi_addr:  in_addr,
                }

                pub struct ifaddrs
                {
                    pub ifa_next: *mut ifaddrs,
                    pub ifa_name: *mut c_char,
                    pub ifa_flags: c_uint,
                    pub ifa_addr: *mut  sockaddr,
                    pub ifa_netmask: *mut  sockaddr,
                    pub ifa_ifu: *mut  sockaddr,
                    pub ifa_data: *mut c_void,
                }

                pub struct in6_rtmsg 
                {
                    rtmsg_dst:  in6_addr,
                    rtmsg_src:  in6_addr,
                    rtmsg_gateway:  in6_addr,
                    rtmsg_type: u32,
                    rtmsg_dst_len: u16,
                    rtmsg_src_len: u16,
                    rtmsg_metric: u32,
                    rtmsg_info: c_ulong,
                    rtmsg_flags: u32,
                    rtmsg_ifindex: c_int,
                }

                pub struct arpreq 
                {
                    pub arp_pa:  sockaddr,
                    pub arp_ha:  sockaddr,
                    pub arp_flags: c_int,
                    pub arp_netmask:  sockaddr,
                    pub arp_dev: [c_char; 16],
                }

                pub struct arpreq_old 
                {
                    pub arp_pa:  sockaddr,
                    pub arp_ha:  sockaddr,
                    pub arp_flags: c_int,
                    pub arp_netmask:  sockaddr,
                }

                pub struct arphdr 
                {
                    pub ar_hrd: u16,
                    pub ar_pro: u16,
                    pub ar_hln: u8,
                    pub ar_pln: u8,
                    pub ar_op: u16,
                }

                pub struct mmsghdr 
                {
                    pub msg_hdr:  msghdr,
                    pub msg_len: c_uint,
                }
            }

            s! 
            {
                pub struct file_clone_range
                {
                    pub src_fd:  __s64,
                    pub src_offset:  __u64,
                    pub src_length:  __u64,
                    pub dest_offset:  __u64,
                }
                
                pub struct sock_filter
                {
                    pub code: __u16,
                    pub jt: __u8,
                    pub jf: __u8,
                    pub k: __u32,
                }

                pub struct sock_fprog 
                {
                    pub len: c_ushort,
                    pub filter: *mut sock_filter,
                }
            }
            
            s_no_extra_traits! 
            {
                #[repr( packed )]
                pub struct epoll_event 
                {
                    pub events: u32,
                    pub u64: u64,
                }
                
                pub union __c_anonymous_sigev_un 
                {
                    _pad: [c_int; SIGEV_PAD_SIZE],
                    pub _tid: c_int,
                    pub _sigev_thread: __c_anonymous_sigev_thread,
                }

                pub struct sockaddr_un 
                {
                    pub sun_family: sa_family_t,
                    pub sun_path: [c_char; 108],
                }

                pub struct sockaddr_storage 
                {
                    pub ss_family: sa_family_t,
                    #[cfg(target_pointer_width = "32")]
                    __ss_pad2: [u8; 128 - 2 - 4],
                    #[cfg(target_pointer_width = "64")]
                    __ss_pad2: [u8; 128 - 2 - 8],
                    __ss_align: size_t,
                }

                pub struct utsname 
                {
                    pub sysname: [c_char; 65],
                    pub nodename: [c_char; 65],
                    pub release: [c_char; 65],
                    pub version: [c_char; 65],
                    pub machine: [c_char; 65],
                    pub domainname: [c_char; 65],
                }

                pub struct sigevent 
                {
                    pub sigev_value:  sigval,
                    pub sigev_signo: c_int,
                    pub sigev_notify: c_int,
                    pub _sigev_un: __c_anonymous_sigev_un,
                }
            }

            impl_debug_property!( sigset_t( __val ) );
            impl_eq_partial_eq!( sigset_t( __val ) );
            impl_hash!( sigset_t( __val ) );

            impl_debug_property!( mcontext_t( gregs ) );
            impl_eq_partial_eq!( mcontext_t( gregs ) );
            impl_hash!( mcontext_t( gregs ) );

            impl_debug_property!( stack_t( ss_sp ) );
            impl_eq_partial_eq!( stack_t( ss_sp ) );
            impl_hash!( stack_t( ss_sp ) );

            impl_debug_property!( __timeval( tv_sec ) );
            impl_eq_partial_eq!( __timeval( tv_sec ) );
            impl_hash!( __timeval( tv_sec ) );

            impl_debug_property!( __exit_status( e_termination ) );
            impl_eq_partial_eq!( __exit_status( e_termination ) );
            impl_hash!( __exit_status( e_termination ) );

            impl_debug_property!( __c_anonymous_sigev_un( _tid ) );
            impl_eq_partial_eq!( __c_anonymous_sigev_un( _tid ) );
            impl_hash!( __c_anonymous_sigev_un( _tid ) );

            // impl_debug_property!( epoll_event( events ) );
            impl_eq_partial_eq!( epoll_event( events ) );
            impl_hash!( epoll_event( events ) );

            //impl_debug_property!( sockaddr_un( sun_family ) );
            impl_eq_partial_eq!( sockaddr_un( sun_family ) );
            impl_hash!( sockaddr_un( sun_family ) );

            //impl_debug_property!( sockaddr_storage( ss_family ) );
            impl_eq_partial_eq!( sockaddr_storage( ss_family ) );
            impl_hash!( sockaddr_storage( ss_family ) );

            //impl_debug_property!( utsname( sysname ) );
            impl_eq_partial_eq!( utsname( sysname ) );
            impl_hash!( utsname( sysname ) );
                        
            cfg_if! 
            {
                if #[cfg(target_pointer_width = "32")]
                {
                    const ULONG_SIZE: usize = 32;
                }
                
                else if #[cfg(target_pointer_width = "64")]
                {
                    const ULONG_SIZE: usize = 64;
                } 
                
                else {}
            }

            pub const EXIT_FAILURE: c_int = 1;
            pub const EXIT_SUCCESS: c_int = 0;
            pub const RAND_MAX: c_int = 2147483647;
            pub const EOF: c_int = -1;
            pub const SEEK_SET: c_int = 0;
            pub const SEEK_CUR: c_int = 1;
            pub const SEEK_END: c_int = 2;
            pub const _IOFBF: c_int = 0;
            pub const _IONBF: c_int = 2;
            pub const _IOLBF: c_int = 1;

            pub const F_DUPFD: c_int = 0;
            pub const F_GETFD: c_int = 1;
            pub const F_SETFD: c_int = 2;
            pub const F_GETFL: c_int = 3;
            pub const F_SETFL: c_int = 4;
            
            pub const F_SETLEASE: c_int = 1024;
            pub const F_GETLEASE: c_int = 1025;
            pub const F_NOTIFY: c_int = 1026;
            pub const F_CANCELLK: c_int = 1029;
            pub const F_DUPFD_CLOEXEC: c_int = 1030;
            pub const F_SETPIPE_SZ: c_int = 1031;
            pub const F_GETPIPE_SZ: c_int = 1032;
            pub const F_ADD_SEALS: c_int = 1033;
            pub const F_GET_SEALS: c_int = 1034;

            pub const F_SEAL_SEAL: c_int = 0x0001;
            pub const F_SEAL_SHRINK: c_int = 0x0002;
            pub const F_SEAL_GROW: c_int = 0x0004;
            pub const F_SEAL_WRITE: c_int = 0x0008;
            
            pub const SIGTRAP: c_int = 5;

            pub const PTHREAD_CREATE_JOINABLE: c_int = 0;
            pub const PTHREAD_CREATE_DETACHED: c_int = 1;

            pub const CLOCK_REALTIME:  clockid_t = 0;
            pub const CLOCK_MONOTONIC:  clockid_t = 1;
            pub const CLOCK_PROCESS_CPUTIME_ID:  clockid_t = 2;
            pub const CLOCK_THREAD_CPUTIME_ID:  clockid_t = 3;
            pub const CLOCK_MONOTONIC_RAW:  clockid_t = 4;
            pub const CLOCK_REALTIME_COARSE:  clockid_t = 5;
            pub const CLOCK_MONOTONIC_COARSE:  clockid_t = 6;
            pub const CLOCK_BOOTTIME:  clockid_t = 7;
            pub const CLOCK_REALTIME_ALARM:  clockid_t = 8;
            pub const CLOCK_BOOTTIME_ALARM:  clockid_t = 9;
            pub const CLOCK_TAI:  clockid_t = 11;
            pub const TIMER_ABSTIME: c_int = 1;

            pub const RUSAGE_SELF: c_int = 0;

            pub const O_RDONLY: c_int = 0;
            pub const O_WRONLY: c_int = 1;
            pub const O_RDWR: c_int = 2;

            pub const SOCK_CLOEXEC: c_int = O_CLOEXEC;

            pub const S_IFIFO: mode_t = 0o1_0000;
            pub const S_IFCHR: mode_t = 0o2_0000;
            pub const S_IFBLK: mode_t = 0o6_0000;
            pub const S_IFDIR: mode_t = 0o4_0000;
            pub const S_IFREG: mode_t = 0o10_0000;
            pub const S_IFLNK: mode_t = 0o12_0000;
            pub const S_IFSOCK: mode_t = 0o14_0000;
            pub const S_IFMT: mode_t = 0o17_0000;
            pub const S_IRWXU: mode_t = 0o0700;
            pub const S_IXUSR: mode_t = 0o0100;
            pub const S_IWUSR: mode_t = 0o0200;
            pub const S_IRUSR: mode_t = 0o0400;
            pub const S_IRWXG: mode_t = 0o0070;
            pub const S_IXGRP: mode_t = 0o0010;
            pub const S_IWGRP: mode_t = 0o0020;
            pub const S_IRGRP: mode_t = 0o0040;
            pub const S_IRWXO: mode_t = 0o0007;
            pub const S_IXOTH: mode_t = 0o0001;
            pub const S_IWOTH: mode_t = 0o0002;
            pub const S_IROTH: mode_t = 0o0004;
            pub const F_OK: c_int = 0;
            pub const R_OK: c_int = 4;
            pub const W_OK: c_int = 2;
            pub const X_OK: c_int = 1;
            pub const STDIN_FILENO: c_int = 0;
            pub const STDOUT_FILENO: c_int = 1;
            pub const STDERR_FILENO: c_int = 2;
            pub const SIGHUP: c_int = 1;
            pub const SIGINT: c_int = 2;
            pub const SIGQUIT: c_int = 3;
            pub const SIGILL: c_int = 4;
            pub const SIGABRT: c_int = 6;
            pub const SIGFPE: c_int = 8;
            pub const SIGKILL: c_int = 9;
            pub const SIGSEGV: c_int = 11;
            pub const SIGPIPE: c_int = 13;
            pub const SIGALRM: c_int = 14;
            pub const SIGTERM: c_int = 15;

            const SIGEV_MAX_SIZE: usize = 64;
            cfg_if! 
            {
                if #[cfg(target_pointer_width = "64")] {
                    const __ARCH_SIGEV_PREAMBLE_SIZE: usize = 4 * 2 + 8;
                } else {
                    const __ARCH_SIGEV_PREAMBLE_SIZE: usize = 4 * 2 + 4;
                }
            }
            const SIGEV_PAD_SIZE: usize = (SIGEV_MAX_SIZE - __ARCH_SIGEV_PREAMBLE_SIZE) / 4;

            pub const PROT_NONE: c_int = 0;
            pub const PROT_READ: c_int = 1;
            pub const PROT_WRITE: c_int = 2;
            pub const PROT_EXEC: c_int = 4;

            pub const XATTR_CREATE: c_int = 0x1;
            pub const XATTR_REPLACE: c_int = 0x2;
            pub const RLIM64_INFINITY:  rlim64_t = !0;

            pub const LC_CTYPE: c_int = 0;
            pub const LC_NUMERIC: c_int = 1;
            pub const LC_TIME: c_int = 2;
            pub const LC_COLLATE: c_int = 3;
            pub const LC_MONETARY: c_int = 4;
            pub const LC_MESSAGES: c_int = 5;
            pub const LC_ALL: c_int = 6;

            pub const LC_CTYPE_MASK: c_int = 1 << LC_CTYPE;
            pub const LC_NUMERIC_MASK: c_int = 1 << LC_NUMERIC;
            pub const LC_TIME_MASK: c_int = 1 << LC_TIME;
            pub const LC_COLLATE_MASK: c_int = 1 << LC_COLLATE;
            pub const LC_MONETARY_MASK: c_int = 1 << LC_MONETARY;
            pub const LC_MESSAGES_MASK: c_int = 1 << LC_MESSAGES;

            pub const MAP_FILE: c_int = 0x0000;
            pub const MAP_SHARED: c_int = 0x0001;
            pub const MAP_PRIVATE: c_int = 0x0002;
            pub const MAP_FIXED: c_int = 0x0010;

            pub const MAP_FAILED: *mut c_void = !0 as *mut c_void;
            pub const MS_ASYNC: c_int = 0x0001;
            pub const MS_INVALIDATE: c_int = 0x0002;
            pub const MS_SYNC: c_int = 0x0004;
            
            pub const MS_RDONLY: c_ulong = 0x01;
            pub const MS_NOSUID: c_ulong = 0x02;
            pub const MS_NODEV: c_ulong = 0x04;
            pub const MS_NOEXEC: c_ulong = 0x08;
            pub const MS_SYNCHRONOUS: c_ulong = 0x10;
            pub const MS_REMOUNT: c_ulong = 0x20;
            pub const MS_MANDLOCK: c_ulong = 0x40;
            pub const MS_DIRSYNC: c_ulong = 0x80;
            pub const MS_NOATIME: c_ulong = 0x0400;
            pub const MS_NODIRATIME: c_ulong = 0x0800;
            pub const MS_BIND: c_ulong = 0x1000;
            pub const MS_MOVE: c_ulong = 0x2000;
            pub const MS_REC: c_ulong = 0x4000;
            pub const MS_SILENT: c_ulong = 0x8000;
            pub const MS_POSIXACL: c_ulong = 0x010000;
            pub const MS_UNBINDABLE: c_ulong = 0x020000;
            pub const MS_PRIVATE: c_ulong = 0x040000;
            pub const MS_SLAVE: c_ulong = 0x080000;
            pub const MS_SHARED: c_ulong = 0x100000;
            pub const MS_RELATIME: c_ulong = 0x200000;
            pub const MS_KERNMOUNT: c_ulong = 0x400000;
            pub const MS_I_VERSION: c_ulong = 0x800000;
            pub const MS_STRICTATIME: c_ulong = 0x1000000;
            pub const MS_LAZYTIME: c_ulong = 0x2000000;
            pub const MS_ACTIVE: c_ulong = 0x40000000;
            pub const MS_MGC_VAL: c_ulong = 0xc0ed0000;
            pub const MS_MGC_MSK: c_ulong = 0xffff0000;

            pub const SCM_RIGHTS: c_int = 0x01;
            pub const SCM_CREDENTIALS: c_int = 0x02;

            pub const PROT_GROWSDOWN: c_int = 0x1000000;
            pub const PROT_GROWSUP: c_int = 0x2000000;

            pub const MAP_TYPE: c_int = 0x000f;

            pub const MADV_NORMAL: c_int = 0;
            pub const MADV_RANDOM: c_int = 1;
            pub const MADV_SEQUENTIAL: c_int = 2;
            pub const MADV_WILLNEED: c_int = 3;
            pub const MADV_DONTNEED: c_int = 4;
            pub const MADV_FREE: c_int = 8;
            pub const MADV_REMOVE: c_int = 9;
            pub const MADV_DONTFORK: c_int = 10;
            pub const MADV_DOFORK: c_int = 11;
            pub const MADV_MERGEABLE: c_int = 12;
            pub const MADV_UNMERGEABLE: c_int = 13;
            pub const MADV_HUGEPAGE: c_int = 14;
            pub const MADV_NOHUGEPAGE: c_int = 15;
            pub const MADV_DONTDUMP: c_int = 16;
            pub const MADV_DODUMP: c_int = 17;
            pub const MADV_WIPEONFORK: c_int = 18;
            pub const MADV_KEEPONFORK: c_int = 19;
            pub const MADV_COLD: c_int = 20;
            pub const MADV_PAGEOUT: c_int = 21;
            pub const MADV_HWPOISON: c_int = 100;
            pub const MADV_POPULATE_READ: c_int = 22;
            pub const MADV_POPULATE_WRITE: c_int = 23;
            pub const MADV_DONTNEED_LOCKED: c_int = 24;

            pub const IFF_UP: c_int = 0x1;
            pub const IFF_BROADCAST: c_int = 0x2;
            pub const IFF_DEBUG: c_int = 0x4;
            pub const IFF_LOOPBACK: c_int = 0x8;
            pub const IFF_POINTOPOINT: c_int = 0x10;
            pub const IFF_NOTRAILERS: c_int = 0x20;
            pub const IFF_RUNNING: c_int = 0x40;
            pub const IFF_NOARP: c_int = 0x80;
            pub const IFF_PROMISC: c_int = 0x100;
            pub const IFF_ALLMULTI: c_int = 0x200;
            pub const IFF_MASTER: c_int = 0x400;
            pub const IFF_SLAVE: c_int = 0x800;
            pub const IFF_MULTICAST: c_int = 0x1000;
            pub const IFF_PORTSEL: c_int = 0x2000;
            pub const IFF_AUTOMEDIA: c_int = 0x4000;
            pub const IFF_DYNAMIC: c_int = 0x8000;

            pub const SOL_IP: c_int = 0;
            pub const SOL_TCP: c_int = 6;
            pub const SOL_UDP: c_int = 17;
            pub const SOL_IPV6: c_int = 41;
            pub const SOL_ICMPV6: c_int = 58;
            pub const SOL_RAW: c_int = 255;
            pub const SOL_DECNET: c_int = 261;
            pub const SOL_X25: c_int = 262;
            pub const SOL_PACKET: c_int = 263;
            pub const SOL_ATM: c_int = 264;
            pub const SOL_AAL: c_int = 265;
            pub const SOL_IRDA: c_int = 266;
            pub const SOL_NETBEUI: c_int = 267;
            pub const SOL_LLC: c_int = 268;
            pub const SOL_DCCP: c_int = 269;
            pub const SOL_NETLINK: c_int = 270;
            pub const SOL_TIPC: c_int = 271;
            pub const SOL_BLUETOOTH: c_int = 274;
            pub const SOL_ALG: c_int = 279;

            pub const AF_UNSPEC: c_int = 0;
            pub const AF_UNIX: c_int = 1;
            pub const AF_LOCAL: c_int = 1;
            pub const AF_INET: c_int = 2;
            pub const AF_AX25: c_int = 3;
            pub const AF_IPX: c_int = 4;
            pub const AF_APPLETALK: c_int = 5;
            pub const AF_NETROM: c_int = 6;
            pub const AF_BRIDGE: c_int = 7;
            pub const AF_ATMPVC: c_int = 8;
            pub const AF_X25: c_int = 9;
            pub const AF_INET6: c_int = 10;
            pub const AF_ROSE: c_int = 11;
            pub const AF_DECnet: c_int = 12;
            pub const AF_NETBEUI: c_int = 13;
            pub const AF_SECURITY: c_int = 14;
            pub const AF_KEY: c_int = 15;
            pub const AF_NETLINK: c_int = 16;
            pub const AF_ROUTE: c_int = AF_NETLINK;
            pub const AF_PACKET: c_int = 17;
            pub const AF_ASH: c_int = 18;
            pub const AF_ECONET: c_int = 19;
            pub const AF_ATMSVC: c_int = 20;
            pub const AF_RDS: c_int = 21;
            pub const AF_SNA: c_int = 22;
            pub const AF_IRDA: c_int = 23;
            pub const AF_PPPOX: c_int = 24;
            pub const AF_WANPIPE: c_int = 25;
            pub const AF_LLC: c_int = 26;
            pub const AF_CAN: c_int = 29;
            pub const AF_TIPC: c_int = 30;
            pub const AF_BLUETOOTH: c_int = 31;
            pub const AF_IUCV: c_int = 32;
            pub const AF_RXRPC: c_int = 33;
            pub const AF_ISDN: c_int = 34;
            pub const AF_PHONET: c_int = 35;
            pub const AF_IEEE802154: c_int = 36;
            pub const AF_CAIF: c_int = 37;
            pub const AF_ALG: c_int = 38;

            pub const PF_UNSPEC: c_int = AF_UNSPEC;
            pub const PF_UNIX: c_int = AF_UNIX;
            pub const PF_LOCAL: c_int = AF_LOCAL;
            pub const PF_INET: c_int = AF_INET;
            pub const PF_AX25: c_int = AF_AX25;
            pub const PF_IPX: c_int = AF_IPX;
            pub const PF_APPLETALK: c_int = AF_APPLETALK;
            pub const PF_NETROM: c_int = AF_NETROM;
            pub const PF_BRIDGE: c_int = AF_BRIDGE;
            pub const PF_ATMPVC: c_int = AF_ATMPVC;
            pub const PF_X25: c_int = AF_X25;
            pub const PF_INET6: c_int = AF_INET6;
            pub const PF_ROSE: c_int = AF_ROSE;
            pub const PF_DECnet: c_int = AF_DECnet;
            pub const PF_NETBEUI: c_int = AF_NETBEUI;
            pub const PF_SECURITY: c_int = AF_SECURITY;
            pub const PF_KEY: c_int = AF_KEY;
            pub const PF_NETLINK: c_int = AF_NETLINK;
            pub const PF_ROUTE: c_int = AF_ROUTE;
            pub const PF_PACKET: c_int = AF_PACKET;
            pub const PF_ASH: c_int = AF_ASH;
            pub const PF_ECONET: c_int = AF_ECONET;
            pub const PF_ATMSVC: c_int = AF_ATMSVC;
            pub const PF_RDS: c_int = AF_RDS;
            pub const PF_SNA: c_int = AF_SNA;
            pub const PF_IRDA: c_int = AF_IRDA;
            pub const PF_PPPOX: c_int = AF_PPPOX;
            pub const PF_WANPIPE: c_int = AF_WANPIPE;
            pub const PF_LLC: c_int = AF_LLC;
            pub const PF_CAN: c_int = AF_CAN;
            pub const PF_TIPC: c_int = AF_TIPC;
            pub const PF_BLUETOOTH: c_int = AF_BLUETOOTH;
            pub const PF_IUCV: c_int = AF_IUCV;
            pub const PF_RXRPC: c_int = AF_RXRPC;
            pub const PF_ISDN: c_int = AF_ISDN;
            pub const PF_PHONET: c_int = AF_PHONET;
            pub const PF_IEEE802154: c_int = AF_IEEE802154;
            pub const PF_CAIF: c_int = AF_CAIF;
            pub const PF_ALG: c_int = AF_ALG;

            pub const MSG_OOB: c_int = 1;
            pub const MSG_PEEK: c_int = 2;
            pub const MSG_DONTROUTE: c_int = 4;
            pub const MSG_CTRUNC: c_int = 8;
            pub const MSG_TRUNC: c_int = 0x20;
            pub const MSG_DONTWAIT: c_int = 0x40;
            pub const MSG_EOR: c_int = 0x80;
            pub const MSG_WAITALL: c_int = 0x100;
            pub const MSG_FIN: c_int = 0x200;
            pub const MSG_SYN: c_int = 0x400;
            pub const MSG_CONFIRM: c_int = 0x800;
            pub const MSG_RST: c_int = 0x1000;
            pub const MSG_ERRQUEUE: c_int = 0x2000;
            pub const MSG_NOSIGNAL: c_int = 0x4000;
            pub const MSG_MORE: c_int = 0x8000;
            pub const MSG_WAITFORONE: c_int = 0x10000;
            pub const MSG_FASTOPEN: c_int = 0x20000000;
            pub const MSG_CMSG_CLOEXEC: c_int = 0x40000000;

            pub const SCM_TIMESTAMP: c_int = SO_TIMESTAMP;

            pub const SOCK_RAW: c_int = 3;
            pub const SOCK_RDM: c_int = 4;
            pub const IP_TOS: c_int = 1;
            pub const IP_TTL: c_int = 2;
            pub const IP_HDRINCL: c_int = 3;
            pub const IP_OPTIONS: c_int = 4;
            pub const IP_ROUTER_ALERT: c_int = 5;
            pub const IP_RECVOPTS: c_int = 6;
            pub const IP_RETOPTS: c_int = 7;
            pub const IP_PKTINFO: c_int = 8;
            pub const IP_PKTOPTIONS: c_int = 9;
            pub const IP_MTU_DISCOVER: c_int = 10;
            pub const IP_RECVERR: c_int = 11;
            pub const IP_RECVTTL: c_int = 12;
            pub const IP_RECVTOS: c_int = 13;
            pub const IP_MTU: c_int = 14;
            pub const IP_FREEBIND: c_int = 15;
            pub const IP_IPSEC_POLICY: c_int = 16;
            pub const IP_XFRM_POLICY: c_int = 17;
            pub const IP_PASSSEC: c_int = 18;
            pub const IP_TRANSPARENT: c_int = 19;
            pub const IP_ORIGDSTADDR: c_int = 20;
            pub const IP_RECVORIGDSTADDR: c_int = IP_ORIGDSTADDR;
            pub const IP_MINTTL: c_int = 21;
            pub const IP_NODEFRAG: c_int = 22;
            pub const IP_CHECKSUM: c_int = 23;
            pub const IP_BIND_ADDRESS_NO_PORT: c_int = 24;
            pub const IP_MULTICAST_IF: c_int = 32;
            pub const IP_MULTICAST_TTL: c_int = 33;
            pub const IP_MULTICAST_LOOP: c_int = 34;
            pub const IP_ADD_MEMBERSHIP: c_int = 35;
            pub const IP_DROP_MEMBERSHIP: c_int = 36;
            pub const IP_UNBLOCK_SOURCE: c_int = 37;
            pub const IP_BLOCK_SOURCE: c_int = 38;
            pub const IP_ADD_SOURCE_MEMBERSHIP: c_int = 39;
            pub const IP_DROP_SOURCE_MEMBERSHIP: c_int = 40;
            pub const IP_MSFILTER: c_int = 41;
            pub const IP_MULTICAST_ALL: c_int = 49;
            pub const IP_UNICAST_IF: c_int = 50;

            pub const IP_DEFAULT_MULTICAST_TTL: c_int = 1;
            pub const IP_DEFAULT_MULTICAST_LOOP: c_int = 1;

            pub const IP_PMTUDISC_DONT: c_int = 0;
            pub const IP_PMTUDISC_WANT: c_int = 1;
            pub const IP_PMTUDISC_DO: c_int = 2;
            pub const IP_PMTUDISC_PROBE: c_int = 3;
            pub const IP_PMTUDISC_INTERFACE: c_int = 4;
            pub const IP_PMTUDISC_OMIT: c_int = 5;
            
            pub const IPPROTO_HOPOPTS: c_int = 0;
            
            pub const IPPROTO_IGMP: c_int = 2;
            
            pub const IPPROTO_IPIP: c_int = 4;
            
            pub const IPPROTO_EGP: c_int = 8;
            
            pub const IPPROTO_PUP: c_int = 12;
            
            pub const IPPROTO_IDP: c_int = 22;
            
            pub const IPPROTO_TP: c_int = 29;
            
            pub const IPPROTO_DCCP: c_int = 33;
            
            pub const IPPROTO_ROUTING: c_int = 43;
            
            pub const IPPROTO_FRAGMENT: c_int = 44;
            
            pub const IPPROTO_RSVP: c_int = 46;
            
            pub const IPPROTO_GRE: c_int = 47;
            
            pub const IPPROTO_ESP: c_int = 50;
            
            pub const IPPROTO_AH: c_int = 51;
            
            pub const IPPROTO_NONE: c_int = 59;
            
            pub const IPPROTO_DSTOPTS: c_int = 60;
            pub const IPPROTO_MTP: c_int = 92;
            
            pub const IPPROTO_ENCAP: c_int = 98;
            
            pub const IPPROTO_PIM: c_int = 103;
            
            pub const IPPROTO_COMP: c_int = 108;
            
            pub const IPPROTO_SCTP: c_int = 132;
            pub const IPPROTO_MH: c_int = 135;
            pub const IPPROTO_UDPLITE: c_int = 136;
            
            pub const IPPROTO_RAW: c_int = 255;
            pub const IPPROTO_BEETPH: c_int = 94;
            pub const IPPROTO_MPLS: c_int = 137;
            
            pub const IPPROTO_MPTCP: c_int = 262;
            
            pub const IPPROTO_ETHERNET: c_int = 143;

            pub const MCAST_EXCLUDE: c_int = 0;
            pub const MCAST_INCLUDE: c_int = 1;
            pub const MCAST_JOIN_GROUP: c_int = 42;
            pub const MCAST_BLOCK_SOURCE: c_int = 43;
            pub const MCAST_UNBLOCK_SOURCE: c_int = 44;
            pub const MCAST_LEAVE_GROUP: c_int = 45;
            pub const MCAST_JOIN_SOURCE_GROUP: c_int = 46;
            pub const MCAST_LEAVE_SOURCE_GROUP: c_int = 47;
            pub const MCAST_MSFILTER: c_int = 48;

            pub const IPV6_ADDRFORM: c_int = 1;
            pub const IPV6_2292PKTINFO: c_int = 2;
            pub const IPV6_2292HOPOPTS: c_int = 3;
            pub const IPV6_2292DSTOPTS: c_int = 4;
            pub const IPV6_2292RTHDR: c_int = 5;
            pub const IPV6_2292PKTOPTIONS: c_int = 6;
            pub const IPV6_CHECKSUM: c_int = 7;
            pub const IPV6_2292HOPLIMIT: c_int = 8;
            pub const IPV6_NEXTHOP: c_int = 9;
            pub const IPV6_AUTHHDR: c_int = 10;
            pub const IPV6_UNICAST_HOPS: c_int = 16;
            pub const IPV6_MULTICAST_IF: c_int = 17;
            pub const IPV6_MULTICAST_HOPS: c_int = 18;
            pub const IPV6_MULTICAST_LOOP: c_int = 19;
            pub const IPV6_ADD_MEMBERSHIP: c_int = 20;
            pub const IPV6_DROP_MEMBERSHIP: c_int = 21;
            pub const IPV6_ROUTER_ALERT: c_int = 22;
            pub const IPV6_MTU_DISCOVER: c_int = 23;
            pub const IPV6_MTU: c_int = 24;
            pub const IPV6_RECVERR: c_int = 25;
            pub const IPV6_V6ONLY: c_int = 26;
            pub const IPV6_JOIN_ANYCAST: c_int = 27;
            pub const IPV6_LEAVE_ANYCAST: c_int = 28;
            pub const IPV6_IPSEC_POLICY: c_int = 34;
            pub const IPV6_XFRM_POLICY: c_int = 35;
            pub const IPV6_HDRINCL: c_int = 36;
            pub const IPV6_RECVPKTINFO: c_int = 49;
            pub const IPV6_PKTINFO: c_int = 50;
            pub const IPV6_RECVHOPLIMIT: c_int = 51;
            pub const IPV6_HOPLIMIT: c_int = 52;
            pub const IPV6_RECVHOPOPTS: c_int = 53;
            pub const IPV6_HOPOPTS: c_int = 54;
            pub const IPV6_RTHDRDSTOPTS: c_int = 55;
            pub const IPV6_RECVRTHDR: c_int = 56;
            pub const IPV6_RTHDR: c_int = 57;
            pub const IPV6_RECVDSTOPTS: c_int = 58;
            pub const IPV6_DSTOPTS: c_int = 59;
            pub const IPV6_RECVPATHMTU: c_int = 60;
            pub const IPV6_PATHMTU: c_int = 61;
            pub const IPV6_DONTFRAG: c_int = 62;
            pub const IPV6_RECVTCLASS: c_int = 66;
            pub const IPV6_TCLASS: c_int = 67;
            pub const IPV6_AUTOFLOWLABEL: c_int = 70;
            pub const IPV6_ADDR_PREFERENCES: c_int = 72;
            pub const IPV6_MINHOPCOUNT: c_int = 73;
            pub const IPV6_ORIGDSTADDR: c_int = 74;
            pub const IPV6_RECVORIGDSTADDR: c_int = IPV6_ORIGDSTADDR;
            pub const IPV6_TRANSPARENT: c_int = 75;
            pub const IPV6_UNICAST_IF: c_int = 76;
            pub const IPV6_PREFER_SRC_TMP: c_int = 0x0001;
            pub const IPV6_PREFER_SRC_PUBLIC: c_int = 0x0002;
            pub const IPV6_PREFER_SRC_PUBTMP_DEFAULT: c_int = 0x0100;
            pub const IPV6_PREFER_SRC_COA: c_int = 0x0004;
            pub const IPV6_PREFER_SRC_HOME: c_int = 0x0400;
            pub const IPV6_PREFER_SRC_CGA: c_int = 0x0008;
            pub const IPV6_PREFER_SRC_NONCGA: c_int = 0x0800;

            pub const IPV6_PMTUDISC_DONT: c_int = 0;
            pub const IPV6_PMTUDISC_WANT: c_int = 1;
            pub const IPV6_PMTUDISC_DO: c_int = 2;
            pub const IPV6_PMTUDISC_PROBE: c_int = 3;
            pub const IPV6_PMTUDISC_INTERFACE: c_int = 4;
            pub const IPV6_PMTUDISC_OMIT: c_int = 5;

            pub const TCP_NODELAY: c_int = 1;
            pub const TCP_MAXSEG: c_int = 2;
            pub const TCP_CORK: c_int = 3;
            pub const TCP_KEEPIDLE: c_int = 4;
            pub const TCP_KEEPINTVL: c_int = 5;
            pub const TCP_KEEPCNT: c_int = 6;
            pub const TCP_SYNCNT: c_int = 7;
            pub const TCP_LINGER2: c_int = 8;
            pub const TCP_DEFER_ACCEPT: c_int = 9;
            pub const TCP_WINDOW_CLAMP: c_int = 10;
            pub const TCP_INFO: c_int = 11;
            pub const TCP_QUICKACK: c_int = 12;
            pub const TCP_CONGESTION: c_int = 13;
            pub const TCP_MD5SIG: c_int = 14;
            pub const TCP_COOKIE_TRANSACTIONS: c_int = 15;
            pub const TCP_THIN_LINEAR_TIMEOUTS: c_int = 16;
            pub const TCP_THIN_DUPACK: c_int = 17;
            pub const TCP_USER_TIMEOUT: c_int = 18;
            pub const TCP_REPAIR: c_int = 19;
            pub const TCP_REPAIR_QUEUE: c_int = 20;
            pub const TCP_QUEUE_SEQ: c_int = 21;
            pub const TCP_REPAIR_OPTIONS: c_int = 22;
            pub const TCP_FASTOPEN: c_int = 23;
            pub const TCP_TIMESTAMP: c_int = 24;
            pub const TCP_NOTSENT_LOWAT: c_int = 25;
            pub const TCP_CC_INFO: c_int = 26;
            pub const TCP_SAVE_SYN: c_int = 27;
            pub const TCP_SAVED_SYN: c_int = 28;
            pub const TCP_REPAIR_WINDOW: c_int = 29;
            pub const TCP_FASTOPEN_CONNECT: c_int = 30;
            pub const TCP_ULP: c_int = 31;
            pub const TCP_MD5SIG_EXT: c_int = 32;
            pub const TCP_FASTOPEN_KEY: c_int = 33;
            pub const TCP_FASTOPEN_NO_COOKIE: c_int = 34;
            pub const TCP_ZEROCOPY_RECEIVE: c_int = 35;
            pub const TCP_INQ: c_int = 36;
            pub const TCP_CM_INQ: c_int = TCP_INQ;
            
            pub const TCP_MD5SIG_MAXKEYLEN: usize = 80;

            pub const SO_DEBUG: c_int = 1;

            pub const SHUT_RD: c_int = 0;
            pub const SHUT_WR: c_int = 1;
            pub const SHUT_RDWR: c_int = 2;

            pub const LOCK_SH: c_int = 1;
            pub const LOCK_EX: c_int = 2;
            pub const LOCK_NB: c_int = 4;
            pub const LOCK_UN: c_int = 8;

            pub const SS_ONSTACK: c_int = 1;
            pub const SS_DISABLE: c_int = 2;

            pub const PATH_MAX: c_int = 4096;

            pub const UIO_MAXIOV: c_int = 1024;

            pub const FD_SETSIZE: c_int = 1024;

            pub const EPOLLIN: u32 = 0x1;
            pub const EPOLLPRI: u32 = 0x2;
            pub const EPOLLOUT: u32 = 0x4;
            pub const EPOLLERR: u32 = 0x8;
            pub const EPOLLHUP: u32 = 0x10;
            pub const EPOLLRDNORM: u32 = 0x40;
            pub const EPOLLRDBAND: u32 = 0x80;
            pub const EPOLLWRNORM: u32 = 0x100;
            pub const EPOLLWRBAND: u32 = 0x200;
            pub const EPOLLMSG: u32 = 0x400;
            pub const EPOLLRDHUP: u32 = 0x2000;
            pub const EPOLLEXCLUSIVE: u32 = 0x10000000;
            pub const EPOLLWAKEUP: u32 = 0x20000000;
            pub const EPOLLONESHOT: u32 = 0x40000000;
            pub const EPOLLET: u32 = 0x80000000;

            pub const EPOLL_CTL_ADD: c_int = 1;
            pub const EPOLL_CTL_MOD: c_int = 3;
            pub const EPOLL_CTL_DEL: c_int = 2;

            pub const MNT_FORCE: c_int = 0x1;
            pub const MNT_DETACH: c_int = 0x2;
            pub const MNT_EXPIRE: c_int = 0x4;
            pub const UMOUNT_NOFOLLOW: c_int = 0x8;

            pub const Q_GETFMT: c_int = 0x800004;
            pub const Q_GETINFO: c_int = 0x800005;
            pub const Q_SETINFO: c_int = 0x800006;
            pub const QIF_BLIMITS: u32 = 1;
            pub const QIF_SPACE: u32 = 2;
            pub const QIF_ILIMITS: u32 = 4;
            pub const QIF_INODES: u32 = 8;
            pub const QIF_BTIME: u32 = 16;
            pub const QIF_ITIME: u32 = 32;
            pub const QIF_LIMITS: u32 = 5;
            pub const QIF_USAGE: u32 = 10;
            pub const QIF_TIMES: u32 = 48;
            pub const QIF_ALL: u32 = 63;

            pub const Q_SYNC: c_int = 0x800001;
            pub const Q_QUOTAON: c_int = 0x800002;
            pub const Q_QUOTAOFF: c_int = 0x800003;
            pub const Q_GETQUOTA: c_int = 0x800007;
            pub const Q_SETQUOTA: c_int = 0x800008;

            pub const TCIOFF: c_int = 2;
            pub const TCION: c_int = 3;
            pub const TCOOFF: c_int = 0;
            pub const TCOON: c_int = 1;
            pub const TCIFLUSH: c_int = 0;
            pub const TCOFLUSH: c_int = 1;
            pub const TCIOFLUSH: c_int = 2;
            pub const NL0:  tcflag_t = 0x00000000;
            pub const NL1:  tcflag_t = 0x00000100;
            pub const TAB0:  tcflag_t = 0x00000000;
            pub const CR0:  tcflag_t = 0x00000000;
            pub const FF0:  tcflag_t = 0x00000000;
            pub const BS0:  tcflag_t = 0x00000000;
            pub const VT0:  tcflag_t = 0x00000000;
            pub const VERASE: usize = 2;
            pub const VKILL: usize = 3;
            pub const VINTR: usize = 0;
            pub const VQUIT: usize = 1;
            pub const VLNEXT: usize = 15;
            pub const IGNBRK:  tcflag_t = 0x00000001;
            pub const BRKINT:  tcflag_t = 0x00000002;
            pub const IGNPAR:  tcflag_t = 0x00000004;
            pub const PARMRK:  tcflag_t = 0x00000008;
            pub const INPCK:  tcflag_t = 0x00000010;
            pub const ISTRIP:  tcflag_t = 0x00000020;
            pub const INLCR:  tcflag_t = 0x00000040;
            pub const IGNCR:  tcflag_t = 0x00000080;
            pub const ICRNL:  tcflag_t = 0x00000100;
            pub const IXANY:  tcflag_t = 0x00000800;
            pub const IMAXBEL:  tcflag_t = 0x00002000;
            pub const OPOST:  tcflag_t = 0x1;
            pub const CS5:  tcflag_t = 0x00000000;
            pub const CRTSCTS:  tcflag_t = 0x80000000;
            pub const ECHO:  tcflag_t = 0x00000008;
            pub const OCRNL:  tcflag_t = 0o000010;
            pub const ONOCR:  tcflag_t = 0o000020;
            pub const ONLRET:  tcflag_t = 0o000040;
            pub const OFILL:  tcflag_t = 0o000100;
            pub const OFDEL:  tcflag_t = 0o000200;

            pub const CLONE_VM: c_int = 0x100;
            pub const CLONE_FS: c_int = 0x200;
            pub const CLONE_FILES: c_int = 0x400;
            pub const CLONE_SIGHAND: c_int = 0x800;
            pub const CLONE_PTRACE: c_int = 0x2000;
            pub const CLONE_VFORK: c_int = 0x4000;
            pub const CLONE_PARENT: c_int = 0x8000;
            pub const CLONE_THREAD: c_int = 0x10000;
            pub const CLONE_NEWNS: c_int = 0x20000;
            pub const CLONE_SYSVSEM: c_int = 0x40000;
            pub const CLONE_SETTLS: c_int = 0x80000;
            pub const CLONE_PARENT_SETTID: c_int = 0x100000;
            pub const CLONE_CHILD_CLEARTID: c_int = 0x200000;
            pub const CLONE_DETACHED: c_int = 0x400000;
            pub const CLONE_UNTRACED: c_int = 0x800000;
            pub const CLONE_CHILD_SETTID: c_int = 0x01000000;
            pub const CLONE_NEWCGROUP: c_int = 0x02000000;
            pub const CLONE_NEWUTS: c_int = 0x04000000;
            pub const CLONE_NEWIPC: c_int = 0x08000000;
            pub const CLONE_NEWUSER: c_int = 0x10000000;
            pub const CLONE_NEWPID: c_int = 0x20000000;
            pub const CLONE_NEWNET: c_int = 0x40000000;
            //pub const CLONE_IO: c_int = 0x80000000;

            pub const WNOHANG: c_int = 0x00000001;
            pub const WUNTRACED: c_int = 0x00000002;
            pub const WSTOPPED: c_int = WUNTRACED;
            pub const WEXITED: c_int = 0x00000004;
            pub const WCONTINUED: c_int = 0x00000008;
            pub const WNOWAIT: c_int = 0x01000000;
            
            pub const ADDR_NO_RANDOMIZE: c_int = 0x0040000;
            pub const MMAP_PAGE_ZERO: c_int = 0x0100000;
            pub const ADDR_COMPAT_LAYOUT: c_int = 0x0200000;
            pub const READ_IMPLIES_EXEC: c_int = 0x0400000;
            pub const ADDR_LIMIT_32BIT: c_int = 0x0800000;
            pub const SHORT_INODE: c_int = 0x1000000;
            pub const WHOLE_SECONDS: c_int = 0x2000000;
            pub const STICKY_TIMEOUTS: c_int = 0x4000000;
            pub const ADDR_LIMIT_3GB: c_int = 0x8000000;
            
            pub const PTRACE_O_TRACESYSGOOD: c_int = 0x00000001;
            pub const PTRACE_O_TRACEFORK: c_int = 0x00000002;
            pub const PTRACE_O_TRACEVFORK: c_int = 0x00000004;
            pub const PTRACE_O_TRACECLONE: c_int = 0x00000008;
            pub const PTRACE_O_TRACEEXEC: c_int = 0x00000010;
            pub const PTRACE_O_TRACEVFORKDONE: c_int = 0x00000020;
            pub const PTRACE_O_TRACEEXIT: c_int = 0x00000040;
            pub const PTRACE_O_TRACESECCOMP: c_int = 0x00000080;
            pub const PTRACE_O_SUSPEND_SECCOMP: c_int = 0x00200000;
            pub const PTRACE_O_EXITKILL: c_int = 0x00100000;
            pub const PTRACE_O_MASK: c_int = 0x003000ff;
            
            pub const PTRACE_EVENT_FORK: c_int = 1;
            pub const PTRACE_EVENT_VFORK: c_int = 2;
            pub const PTRACE_EVENT_CLONE: c_int = 3;
            pub const PTRACE_EVENT_EXEC: c_int = 4;
            pub const PTRACE_EVENT_VFORK_DONE: c_int = 5;
            pub const PTRACE_EVENT_EXIT: c_int = 6;
            pub const PTRACE_EVENT_SECCOMP: c_int = 7;

            pub const __WNOTHREAD: c_uint = 0x20000000;
            pub const __WALL: c_uint = 0x40000000;
            pub const __WCLONE: c_uint = 0x80000000;

            pub const SPLICE_F_MOVE: c_uint = 0x01;
            pub const SPLICE_F_NONBLOCK: c_uint = 0x02;
            pub const SPLICE_F_MORE: c_uint = 0x04;
            pub const SPLICE_F_GIFT: c_uint = 0x08;

            pub const RTLD_LOCAL: c_int = 0;
            pub const RTLD_LAZY: c_int = 1;

            pub const POSIX_FADV_NORMAL: c_int = 0;
            pub const POSIX_FADV_RANDOM: c_int = 1;
            pub const POSIX_FADV_SEQUENTIAL: c_int = 2;
            pub const POSIX_FADV_WILLNEED: c_int = 3;

            pub const AT_FDCWD: c_int = -100;
            pub const AT_SYMLINK_NOFOLLOW: c_int = 0x100;
            pub const AT_REMOVEDIR: c_int = 0x200;
            pub const AT_SYMLINK_FOLLOW: c_int = 0x400;
            pub const AT_NO_AUTOMOUNT: c_int = 0x800;
            pub const AT_EMPTY_PATH: c_int = 0x1000;
            pub const AT_RECURSIVE: c_int = 0x8000;

            pub const LOG_CRON: c_int = 9 << 3;
            pub const LOG_AUTHPRIV: c_int = 10 << 3;
            pub const LOG_FTP: c_int = 11 << 3;
            pub const LOG_PERROR: c_int = 0x20;

            pub const PIPE_BUF: usize = 4096;

            pub const SI_LOAD_SHIFT: c_uint = 16;
            
            pub const SI_USER: c_int = 0;
            pub const SI_KERNEL: c_int = 0x80;
            pub const SI_QUEUE: c_int = -1;
            pub const SI_TIMER: c_int = -2;
            pub const SI_MESGQ: c_int = -3;
            pub const SI_ASYNCIO: c_int = -4;
            pub const SI_SIGIO: c_int = -5;
            pub const SI_TKILL: c_int = -6;
            pub const SI_ASYNCNL: c_int = -60;
            
            pub const BUS_ADRALN: c_int = 1;
            pub const BUS_ADRERR: c_int = 2;
            pub const BUS_OBJERR: c_int = 3;
            
            pub const BUS_MCEERR_AR: c_int = 4;
            pub const BUS_MCEERR_AO: c_int = 5;
            
            pub const TRAP_BRKPT: c_int = 1;
            pub const TRAP_TRACE: c_int = 2;
            pub const TRAP_BRANCH: c_int = 3;
            pub const TRAP_HWBKPT: c_int = 4;
            pub const TRAP_UNK: c_int = 5;
            
            pub const CLD_EXITED: c_int = 1;
            pub const CLD_KILLED: c_int = 2;
            pub const CLD_DUMPED: c_int = 3;
            pub const CLD_TRAPPED: c_int = 4;
            pub const CLD_STOPPED: c_int = 5;
            pub const CLD_CONTINUED: c_int = 6;

            pub const SIGEV_SIGNAL: c_int = 0;
            pub const SIGEV_NONE: c_int = 1;
            pub const SIGEV_THREAD: c_int = 2;

            pub const P_ALL: idtype_t = 0;
            pub const P_PID: idtype_t = 1;
            pub const P_PGID: idtype_t = 2;
            pub const P_PIDFD: idtype_t = 3;

            pub const UTIME_OMIT: c_long = 1073741822;
            pub const UTIME_NOW: c_long = 1073741823;

            pub const POLLIN: c_short = 0x1;
            pub const POLLPRI: c_short = 0x2;
            pub const POLLOUT: c_short = 0x4;
            pub const POLLERR: c_short = 0x8;
            pub const POLLHUP: c_short = 0x10;
            pub const POLLNVAL: c_short = 0x20;
            pub const POLLRDNORM: c_short = 0x040;
            pub const POLLRDBAND: c_short = 0x080;
            pub const POLLRDHUP: c_short = 0x2000;

            pub const IPTOS_LOWDELAY: u8 = 0x10;
            pub const IPTOS_THROUGHPUT: u8 = 0x08;
            pub const IPTOS_RELIABILITY: u8 = 0x04;
            pub const IPTOS_MINCOST: u8 = 0x02;

            pub const IPTOS_PREC_NETCONTROL: u8 = 0xe0;
            pub const IPTOS_PREC_INTERNETCONTROL: u8 = 0xc0;
            pub const IPTOS_PREC_CRITIC_ECP: u8 = 0xa0;
            pub const IPTOS_PREC_FLASHOVERRIDE: u8 = 0x80;
            pub const IPTOS_PREC_FLASH: u8 = 0x60;
            pub const IPTOS_PREC_IMMEDIATE: u8 = 0x40;
            pub const IPTOS_PREC_PRIORITY: u8 = 0x20;
            pub const IPTOS_PREC_ROUTINE: u8 = 0x00;

            pub const IPTOS_ECN_MASK: u8 = 0x03;
            pub const IPTOS_ECN_ECT1: u8 = 0x01;
            pub const IPTOS_ECN_ECT0: u8 = 0x02;
            pub const IPTOS_ECN_CE: u8 = 0x03;

            pub const IPOPT_COPY: u8 = 0x80;
            pub const IPOPT_CLASS_MASK: u8 = 0x60;
            pub const IPOPT_NUMBER_MASK: u8 = 0x1f;

            pub const IPOPT_CONTROL: u8 = 0x00;
            pub const IPOPT_RESERVED1: u8 = 0x20;
            pub const IPOPT_MEASUREMENT: u8 = 0x40;
            pub const IPOPT_RESERVED2: u8 = 0x60;
            pub const IPOPT_END: u8 = 0 | IPOPT_CONTROL;
            pub const IPOPT_NOOP: u8 = 1 | IPOPT_CONTROL;
            pub const IPOPT_SEC: u8 = 2 | IPOPT_CONTROL | IPOPT_COPY;
            pub const IPOPT_LSRR: u8 = 3 | IPOPT_CONTROL | IPOPT_COPY;
            pub const IPOPT_TIMESTAMP: u8 = 4 | IPOPT_MEASUREMENT;
            pub const IPOPT_RR: u8 = 7 | IPOPT_CONTROL;
            pub const IPOPT_SID: u8 = 8 | IPOPT_CONTROL | IPOPT_COPY;
            pub const IPOPT_SSRR: u8 = 9 | IPOPT_CONTROL | IPOPT_COPY;
            pub const IPOPT_RA: u8 = 20 | IPOPT_CONTROL | IPOPT_COPY;
            pub const IPVERSION: u8 = 4;
            pub const MAXTTL: u8 = 255;
            pub const IPDEFTTL: u8 = 64;
            pub const IPOPT_OPTVAL: u8 = 0;
            pub const IPOPT_OLEN: u8 = 1;
            pub const IPOPT_OFFSET: u8 = 2;
            pub const IPOPT_MINOFF: u8 = 4;
            pub const MAX_IPOPTLEN: u8 = 40;
            pub const IPOPT_NOP: u8 = IPOPT_NOOP;
            pub const IPOPT_EOL: u8 = IPOPT_END;
            pub const IPOPT_TS: u8 = IPOPT_TIMESTAMP;
            pub const IPOPT_TS_TSONLY: u8 = 0;
            pub const IPOPT_TS_TSANDADDR: u8 = 1;
            pub const IPOPT_TS_PRESPEC: u8 = 3;

            pub const ARPOP_RREQUEST: u16 = 3;
            pub const ARPOP_RREPLY: u16 = 4;
            pub const ARPOP_InREQUEST: u16 = 8;
            pub const ARPOP_InREPLY: u16 = 9;
            pub const ARPOP_NAK: u16 = 10;

            pub const ATF_NETMASK: c_int = 0x20;
            pub const ATF_DONTPUB: c_int = 0x40;

            pub const ARPHRD_NETROM: u16 = 0;
            pub const ARPHRD_ETHER: u16 = 1;
            pub const ARPHRD_EETHER: u16 = 2;
            pub const ARPHRD_AX25: u16 = 3;
            pub const ARPHRD_PRONET: u16 = 4;
            pub const ARPHRD_CHAOS: u16 = 5;
            pub const ARPHRD_IEEE802: u16 = 6;
            pub const ARPHRD_ARCNET: u16 = 7;
            pub const ARPHRD_APPLETLK: u16 = 8;
            pub const ARPHRD_DLCI: u16 = 15;
            pub const ARPHRD_ATM: u16 = 19;
            pub const ARPHRD_METRICOM: u16 = 23;
            pub const ARPHRD_IEEE1394: u16 = 24;
            pub const ARPHRD_EUI64: u16 = 27;
            pub const ARPHRD_INFINIBAND: u16 = 32;

            pub const ARPHRD_SLIP: u16 = 256;
            pub const ARPHRD_CSLIP: u16 = 257;
            pub const ARPHRD_SLIP6: u16 = 258;
            pub const ARPHRD_CSLIP6: u16 = 259;
            pub const ARPHRD_RSRVD: u16 = 260;
            pub const ARPHRD_ADAPT: u16 = 264;
            pub const ARPHRD_ROSE: u16 = 270;
            pub const ARPHRD_X25: u16 = 271;
            pub const ARPHRD_HWX25: u16 = 272;
            pub const ARPHRD_CAN: u16 = 280;
            pub const ARPHRD_PPP: u16 = 512;
            pub const ARPHRD_CISCO: u16 = 513;
            pub const ARPHRD_HDLC: u16 = ARPHRD_CISCO;
            pub const ARPHRD_LAPB: u16 = 516;
            pub const ARPHRD_DDCMP: u16 = 517;
            pub const ARPHRD_RAWHDLC: u16 = 518;

            pub const ARPHRD_TUNNEL: u16 = 768;
            pub const ARPHRD_TUNNEL6: u16 = 769;
            pub const ARPHRD_FRAD: u16 = 770;
            pub const ARPHRD_SKIP: u16 = 771;
            pub const ARPHRD_LOOPBACK: u16 = 772;
            pub const ARPHRD_LOCALTLK: u16 = 773;
            pub const ARPHRD_FDDI: u16 = 774;
            pub const ARPHRD_BIF: u16 = 775;
            pub const ARPHRD_SIT: u16 = 776;
            pub const ARPHRD_IPDDP: u16 = 777;
            pub const ARPHRD_IPGRE: u16 = 778;
            pub const ARPHRD_PIMREG: u16 = 779;
            pub const ARPHRD_HIPPI: u16 = 780;
            pub const ARPHRD_ASH: u16 = 781;
            pub const ARPHRD_ECONET: u16 = 782;
            pub const ARPHRD_IRDA: u16 = 783;
            pub const ARPHRD_FCPP: u16 = 784;
            pub const ARPHRD_FCAL: u16 = 785;
            pub const ARPHRD_FCPL: u16 = 786;
            pub const ARPHRD_FCFABRIC: u16 = 787;
            pub const ARPHRD_IEEE802_TR: u16 = 800;
            pub const ARPHRD_IEEE80211: u16 = 801;
            pub const ARPHRD_IEEE80211_PRISM: u16 = 802;
            pub const ARPHRD_IEEE80211_RADIOTAP: u16 = 803;
            pub const ARPHRD_IEEE802154: u16 = 804;

            pub const ARPHRD_VOID: u16 = 0xFFFF;
            pub const ARPHRD_NONE: u16 = 0xFFFE;
            
            pub const IFF_TUN: c_int = 0x0001;
            pub const IFF_TAP: c_int = 0x0002;
            pub const IFF_NAPI: c_int = 0x0010;
            pub const IFF_NAPI_FRAGS: c_int = 0x0020;
            
            pub const IFF_NO_CARRIER: c_int = 0x0040;
            pub const IFF_NO_PI: c_int = 0x1000;
            
            pub const TUN_READQ_SIZE: c_short = 500;
            
            pub const TUN_TUN_DEV: c_short =  IFF_TUN as c_short;
            pub const TUN_TAP_DEV: c_short =  IFF_TAP as c_short;
            pub const TUN_TYPE_MASK: c_short = 0x000f;
            
            pub const IFF_ONE_QUEUE: c_int = 0x2000;
            pub const IFF_VNET_HDR: c_int = 0x4000;
            pub const IFF_TUN_EXCL: c_int = 0x8000;
            pub const IFF_MULTI_QUEUE: c_int = 0x0100;
            pub const IFF_ATTACH_QUEUE: c_int = 0x0200;
            pub const IFF_DETACH_QUEUE: c_int = 0x0400;
            
            pub const IFF_PERSIST: c_int = 0x0800;
            pub const IFF_NOFILTER: c_int = 0x1000;
            
            pub const TUN_TX_TIMESTAMP: c_int = 1;
            
            pub const TUN_F_CSUM: c_uint = 0x01;
            pub const TUN_F_TSO4: c_uint = 0x02;
            pub const TUN_F_TSO6: c_uint = 0x04;
            pub const TUN_F_TSO_ECN: c_uint = 0x08;
            pub const TUN_F_UFO: c_uint = 0x10;
            pub const TUN_F_USO4: c_uint = 0x20;
            pub const TUN_F_USO6: c_uint = 0x40;
            
            pub const TUN_PKT_STRIP: c_int = 0x0001;
            
            pub const TUN_FLT_ALLMULTI: c_int = 0x0001;
            
            const T_TYPE: u32 = b'T' as u32;
            pub const TUNSETNOCSUM: Ioctl = _IOW::<c_int>(T_TYPE, 200);
            pub const TUNSETDEBUG: Ioctl = _IOW::<c_int>(T_TYPE, 201);
            pub const TUNSETIFF: Ioctl = _IOW::<c_int>(T_TYPE, 202);
            pub const TUNSETPERSIST: Ioctl = _IOW::<c_int>(T_TYPE, 203);
            pub const TUNSETOWNER: Ioctl = _IOW::<c_int>(T_TYPE, 204);
            pub const TUNSETLINK: Ioctl = _IOW::<c_int>(T_TYPE, 205);
            pub const TUNSETGROUP: Ioctl = _IOW::<c_int>(T_TYPE, 206);
            pub const TUNGETFEATURES: Ioctl = _IOR::<c_int>(T_TYPE, 207);
            pub const TUNSETOFFLOAD: Ioctl = _IOW::<c_int>(T_TYPE, 208);
            pub const TUNSETTXFILTER: Ioctl = _IOW::<c_int>(T_TYPE, 209);
            pub const TUNGETIFF: Ioctl = _IOR::<c_int>(T_TYPE, 210);
            pub const TUNGETSNDBUF: Ioctl = _IOR::<c_int>(T_TYPE, 211);
            pub const TUNSETSNDBUF: Ioctl = _IOW::<c_int>(T_TYPE, 212);
            pub const TUNATTACHFILTER: Ioctl = _IOW::<sock_fprog>(T_TYPE, 213);
            pub const TUNDETACHFILTER: Ioctl = _IOW::<sock_fprog>(T_TYPE, 214);
            pub const TUNGETVNETHDRSZ: Ioctl = _IOR::<c_int>(T_TYPE, 215);
            pub const TUNSETVNETHDRSZ: Ioctl = _IOW::<c_int>(T_TYPE, 216);
            pub const TUNSETQUEUE: Ioctl = _IOW::<c_int>(T_TYPE, 217);
            pub const TUNSETIFINDEX: Ioctl = _IOW::<c_int>(T_TYPE, 218);
            pub const TUNGETFILTER: Ioctl = _IOR::<sock_fprog>(T_TYPE, 219);
            pub const TUNSETVNETLE: Ioctl = _IOW::<c_int>(T_TYPE, 220);
            pub const TUNGETVNETLE: Ioctl = _IOR::<c_int>(T_TYPE, 221);
            pub const TUNSETVNETBE: Ioctl = _IOW::<c_int>(T_TYPE, 222);
            pub const TUNGETVNETBE: Ioctl = _IOR::<c_int>(T_TYPE, 223);
            pub const TUNSETSTEERINGEBPF: Ioctl = _IOR::<c_int>(T_TYPE, 224);
            pub const TUNSETFILTEREBPF: Ioctl = _IOR::<c_int>(T_TYPE, 225);
            pub const TUNSETCARRIER: Ioctl = _IOW::<c_int>(T_TYPE, 226);
            pub const TUNGETDEVNETNS: Ioctl = _IO(T_TYPE, 227);
            pub const FS_IOC_GETFLAGS: Ioctl = _IOR::<c_long>('f' as u32, 1);
            pub const FS_IOC_SETFLAGS: Ioctl = _IOW::<c_long>('f' as u32, 2);
            pub const FS_IOC_GETVERSION: Ioctl = _IOR::<c_long>('v' as u32, 1);
            pub const FS_IOC_SETVERSION: Ioctl = _IOW::<c_long>('v' as u32, 2);
            pub const FS_IOC32_GETFLAGS: Ioctl = _IOR::<c_int>('f' as u32, 1);
            pub const FS_IOC32_SETFLAGS: Ioctl = _IOW::<c_int>('f' as u32, 2);
            pub const FS_IOC32_GETVERSION: Ioctl = _IOR::<c_int>('v' as u32, 1);
            pub const FS_IOC32_SETVERSION: Ioctl = _IOW::<c_int>('v' as u32, 2);

            pub const FICLONE: Ioctl = _IOW::<c_int>(0x94, 9);
            pub const FICLONERANGE: Ioctl = _IOW::< file_clone_range>(0x94, 13);

            pub const ADFS_SUPER_MAGIC: c_long = 0x0000adf5;
            pub const AFFS_SUPER_MAGIC: c_long = 0x0000adff;
            pub const AFS_SUPER_MAGIC: c_long = 0x5346414f;
            pub const AUTOFS_SUPER_MAGIC: c_long = 0x0187;
            pub const BPF_FS_MAGIC: c_long = 0xcafe4a11;
            pub const BTRFS_SUPER_MAGIC: c_long = 0x9123683e;
            pub const CGROUP2_SUPER_MAGIC: c_long = 0x63677270;
            pub const CGROUP_SUPER_MAGIC: c_long = 0x27e0eb;
            pub const CODA_SUPER_MAGIC: c_long = 0x73757245;
            pub const CRAMFS_MAGIC: c_long = 0x28cd3d45;
            pub const DEBUGFS_MAGIC: c_long = 0x64626720;
            pub const DEVPTS_SUPER_MAGIC: c_long = 0x1cd1;
            pub const ECRYPTFS_SUPER_MAGIC: c_long = 0xf15f;
            pub const EFS_SUPER_MAGIC: c_long = 0x00414a53;
            pub const EXT2_SUPER_MAGIC: c_long = 0x0000ef53;
            pub const EXT3_SUPER_MAGIC: c_long = 0x0000ef53;
            pub const EXT4_SUPER_MAGIC: c_long = 0x0000ef53;
            pub const F2FS_SUPER_MAGIC: c_long = 0xf2f52010;
            pub const FUSE_SUPER_MAGIC: c_long = 0x65735546;
            pub const FUTEXFS_SUPER_MAGIC: c_long = 0xbad1dea;
            pub const HOSTFS_SUPER_MAGIC: c_long = 0x00c0ffee;
            pub const HPFS_SUPER_MAGIC: c_long = 0xf995e849;
            pub const HUGETLBFS_MAGIC: c_long = 0x958458f6;
            pub const ISOFS_SUPER_MAGIC: c_long = 0x00009660;
            pub const JFFS2_SUPER_MAGIC: c_long = 0x000072b6;
            pub const MINIX2_SUPER_MAGIC2: c_long = 0x00002478;
            pub const MINIX2_SUPER_MAGIC: c_long = 0x00002468;
            pub const MINIX3_SUPER_MAGIC: c_long = 0x4d5a;
            pub const MINIX_SUPER_MAGIC2: c_long = 0x0000138f;
            pub const MINIX_SUPER_MAGIC: c_long = 0x0000137f;
            pub const MSDOS_SUPER_MAGIC: c_long = 0x00004d44;
            pub const NCP_SUPER_MAGIC: c_long = 0x0000564c;
            pub const NFS_SUPER_MAGIC: c_long = 0x00006969;
            pub const NILFS_SUPER_MAGIC: c_long = 0x3434;
            pub const OCFS2_SUPER_MAGIC: c_long = 0x7461636f;
            pub const OPENPROM_SUPER_MAGIC: c_long = 0x00009fa1;
            pub const OVERLAYFS_SUPER_MAGIC: c_long = 0x794c7630;
            pub const PROC_SUPER_MAGIC: c_long = 0x00009fa0;
            pub const QNX4_SUPER_MAGIC: c_long = 0x0000002f;
            pub const QNX6_SUPER_MAGIC: c_long = 0x68191122;
            pub const RDTGROUP_SUPER_MAGIC: c_long = 0x7655821;
            pub const REISERFS_SUPER_MAGIC: c_long = 0x52654973;
            pub const SECURITYFS_MAGIC: c_long = 0x73636673;
            pub const SELINUX_MAGIC: c_long = 0xf97cff8c;
            pub const SMACK_MAGIC: c_long = 0x43415d53;
            pub const SMB_SUPER_MAGIC: c_long = 0x0000517b;
            pub const SYSFS_MAGIC: c_long = 0x62656572;
            pub const TMPFS_MAGIC: c_long = 0x01021994;
            pub const TRACEFS_MAGIC: c_long = 0x74726163;
            pub const UDF_SUPER_MAGIC: c_long = 0x15013346;
            pub const USBDEVICE_SUPER_MAGIC: c_long = 0x00009fa2;
            pub const XENFS_SUPER_MAGIC: c_long = 0xabba1974;
            pub const NSFS_MAGIC: c_long = 0x6e736673;            
            const _IOC_NRBITS: u32 = 8;
            const _IOC_TYPEBITS: u32 = 8;
            const _IOC_SIZEBITS: u32 = 14;
            const _IOC_DIRBITS: u32 = 2;

            const _IOC_NONE: u32 = 0;
            const _IOC_WRITE: u32 = 1;
            const _IOC_READ: u32 = 2;
            const _IOC_NRMASK: u32 = (1 << _IOC_NRBITS) - 1;
            const _IOC_TYPEMASK: u32 = (1 << _IOC_TYPEBITS) - 1;
            const _IOC_SIZEMASK: u32 = (1 << _IOC_SIZEBITS) - 1;
            const _IOC_DIRMASK: u32 = (1 << _IOC_DIRBITS) - 1;

            const _IOC_NRSHIFT: u32 = 0;
            const _IOC_TYPESHIFT: u32 = _IOC_NRSHIFT + _IOC_NRBITS;
            const _IOC_SIZESHIFT: u32 = _IOC_TYPESHIFT + _IOC_TYPEBITS;
            const _IOC_DIRSHIFT: u32 = _IOC_SIZESHIFT + _IOC_SIZEBITS;
            /// Build an ioctl number, analogous to the C macro of the same name.
            const fn _IOC(dir: u32, ty: u32, nr: u32, size: usize) -> Ioctl 
            {

                ((dir << _IOC_DIRSHIFT)
                | (ty << _IOC_TYPESHIFT)
                | (nr << _IOC_NRSHIFT)
                | ((size as u32) << _IOC_SIZESHIFT)) as Ioctl
            }
            /// Build an ioctl number for an argumentless ioctl.
            pub const fn _IO(ty: u32, nr: u32) -> Ioctl 
            {
                _IOC(_IOC_NONE, ty, nr, 0)
            }
            /// Build an ioctl number for an read-only ioctl.
            pub const fn _IOR<T>(ty: u32, nr: u32) -> Ioctl 
            {
                _IOC(_IOC_READ, ty, nr, size_of::<T>())
            }
            /// Build an ioctl number for an write-only ioctl.
            pub const fn _IOW<T>(ty: u32, nr: u32) -> Ioctl 
            {
                _IOC(_IOC_WRITE, ty, nr, size_of::<T>())
            }
            /// Build an ioctl number for a read-write ioctl.
            pub const fn _IOWR<T>(ty: u32, nr: u32) -> Ioctl 
            {
                _IOC(_IOC_READ | _IOC_WRITE, ty, nr, size_of::<T>())
            }

            extern "C" 
            {
                #[cfg_attr(gnu_time_bits64, link_name = "__ioctl_time64")]
                pub fn ioctl(fd: c_int, request: Ioctl, ...) -> c_int;
            }

            const_fn! 
            {
                {const} fn CMSG_ALIGN(len: usize) -> usize 
                {
                    (len + size_of::<usize>() - 1) & !(size_of::<usize>() - 1)
                }
            }

            f! 
            {
                pub fn CMSG_FIRSTHDR(mhdr: *const  msghdr) -> *mut  cmsghdr 
                {
                    if (*mhdr).msg_controllen as usize >= size_of::< cmsghdr>() 
                    {
                        (*mhdr).msg_control.cast::< cmsghdr>()
                    } else {
                        ::ptr::null_mut::< cmsghdr>()
                    }
                }

                pub fn CMSG_DATA(cmsg: *const  cmsghdr) -> *mut c_uchar 
                {
                    cmsg.offset(1) as *mut c_uchar
                }

                pub {const} fn CMSG_SPACE(length: c_uint) -> c_uint 
                {
                    (CMSG_ALIGN(length as usize) + CMSG_ALIGN(size_of::< cmsghdr>())) as c_uint
                }

                pub {const} fn CMSG_LEN(length: c_uint) -> c_uint 
                {
                    CMSG_ALIGN(size_of::< cmsghdr>()) as c_uint + length
                }

                pub fn FD_CLR(fd: c_int, set: *mut fd_set) -> () 
                {
                    let fd = fd as usize;
                    let size = size_of_val(&(*set).fds_bits[0]) * 8;
                    (*set).fds_bits[fd / size] &= !(1 << (fd % size));
                    return;
                }

                pub fn FD_ISSET(fd: c_int, set: *const fd_set) -> bool 
                {
                    let fd = fd as usize;
                    let size = size_of_val(&(*set).fds_bits[0]) * 8;
                    return ((*set).fds_bits[fd / size] & (1 << (fd % size))) != 0;
                }

                pub fn FD_SET(fd: c_int, set: *mut fd_set) -> () 
                {
                    let fd = fd as usize;
                    let size = size_of_val(&(*set).fds_bits[0]) * 8;
                    (*set).fds_bits[fd / size] |= 1 << (fd % size);
                    return;
                }

                pub fn FD_ZERO(set: *mut fd_set) -> ()
                {
                    for slot in &mut (*set).fds_bits
                    {
                        *slot = 0;
                    }
                }
            }

            safe_f! 
            {
                pub fn SIGRTMAX() -> c_int { unsafe { __libc_current_sigrtmax() } }

                pub fn SIGRTMIN() -> c_int { unsafe { __libc_current_sigrtmin() } }

                pub {const} fn WIFSTOPPED(status: c_int) -> bool { (status & 0xff) == 0x7f }

                pub {const} fn WSTOPSIG(status: c_int) -> c_int { (status >> 8) & 0xff }

                pub {const} fn WIFCONTINUED(status: c_int) -> bool { status == 0xffff }

                pub {const} fn WIFSIGNALED(status: c_int) -> bool { ((status & 0x7f) + 1) as i8 >= 2 }

                pub {const} fn WTERMSIG(status: c_int) -> c_int { status & 0x7f }

                pub {const} fn WIFEXITED(status: c_int) -> bool { (status & 0x7f) == 0 }

                pub {const} fn WEXITSTATUS(status: c_int) -> c_int { (status >> 8) & 0xff }

                pub {const} fn WCOREDUMP(status: c_int) -> bool { (status & 0x80) != 0 }

                pub {const} fn W_EXITCODE(ret: c_int, sig: c_int) -> c_int { (ret << 8) | sig }

                pub {const} fn W_STOPCODE(sig: c_int) -> c_int { (sig << 8) | 0x7f }

                pub {const} fn QCMD(cmd: c_int, type_: c_int) -> c_int { (cmd << 8) | (type_ & 0x00ff) }

                pub {const} fn IPOPT_COPIED(o: u8) -> u8 { o & IPOPT_COPY }

                pub {const} fn IPOPT_CLASS(o: u8) -> u8 { o & IPOPT_CLASS_MASK }

                pub {const} fn IPOPT_NUMBER(o: u8) -> u8 { o & IPOPT_NUMBER_MASK }

                pub {const} fn IPTOS_ECN(x: u8) -> u8 { x &  IPTOS_ECN_MASK }

                #[allow(ellipsis_inclusive_range_patterns)]
                pub {const} fn KERNEL_VERSION(a: u32, b: u32, c: u32) -> u32 
                { ((a << 16) + (b << 8)) + if c > 255 { 255 } else { c } }
            }

            extern "C" 
            {
                pub fn __libc_current_sigrtmax() -> c_int;
                pub fn __libc_current_sigrtmin() -> c_int;

                pub fn sem_destroy(sem: *mut sem_t) -> c_int;
                pub fn sem_init(sem: *mut sem_t, pshared: c_int, value: c_uint) -> c_int;
                pub fn fdatasync(fd: c_int) -> c_int;
                pub fn mincore(addr: *mut c_void, len: size_t, vec: *mut c_uchar) -> c_int;

                #[cfg_attr(gnu_time_bits64, link_name = "__clock_getres64")]
                pub fn clock_getres(clk_id:  clockid_t, tp: *mut  timespec) -> c_int;
                #[cfg_attr(gnu_time_bits64, link_name = "__clock_gettime64")]
                pub fn clock_gettime(clk_id:  clockid_t, tp: *mut  timespec) -> c_int;
                #[cfg_attr(gnu_time_bits64, link_name = "__clock_settime64")]
                pub fn clock_settime(clk_id:  clockid_t, tp: *const  timespec) -> c_int;
                pub fn clock_getcpuclockid(pid:  pid_t, clk_id: *mut  clockid_t) -> c_int;

                pub fn dirfd(dirp: *mut  DIR) -> c_int;

                pub fn pthread_getattr_np(native:  pthread_t, attr: *mut  pthread_attr_t) -> c_int;
                pub fn pthread_attr_getstack(
                    attr: *const  pthread_attr_t,
                    stackaddr: *mut *mut c_void,
                    stacksize: *mut size_t,
                ) -> c_int;
                pub fn pthread_attr_setstack(
                    attr: *mut  pthread_attr_t,
                    stackaddr: *mut c_void,
                    stacksize: size_t,
                ) -> c_int;
                pub fn memalign(align: size_t, size: size_t) -> *mut c_void;
                pub fn setgroups(ngroups: size_t, ptr: *const  gid_t) -> c_int;
                pub fn pipe2(fds: *mut c_int, flags: c_int) -> c_int;
                #[cfg_attr(gnu_file_offset_bits64, link_name = "statfs64")]
                pub fn statfs(path: *const c_char, buf: *mut statfs) -> c_int;
                #[cfg_attr(gnu_file_offset_bits64, link_name = "fstatfs64")]
                pub fn fstatfs(fd: c_int, buf: *mut statfs) -> c_int;
                pub fn memrchr(cx: *const c_void, c: c_int, n: size_t) -> *mut c_void;
                #[cfg_attr(gnu_file_offset_bits64, link_name = "posix_fadvise64")]
                pub fn posix_fadvise(fd: c_int, offset: off_t, len: off_t, advise: c_int) -> c_int;
                #[cfg_attr(gnu_time_bits64, link_name = "__futimens64")]
                pub fn futimens(fd: c_int, times: *const  timespec) -> c_int;
                #[cfg_attr(gnu_time_bits64, link_name = "__utimensat64")]
                pub fn utimensat(
                    dirfd: c_int,
                    path: *const c_char,
                    times: *const  timespec,
                    flag: c_int,
                ) -> c_int;
                pub fn duplocale(base:  locale_t) ->  locale_t;
                pub fn freelocale(loc:  locale_t);
                pub fn newlocale(mask: c_int, locale: *const c_char, base:  locale_t) ->  locale_t;
                pub fn uselocale(loc:  locale_t) ->  locale_t;
                pub fn mknodat(dirfd: c_int, pathname: *const c_char, mode: mode_t, dev: dev_t) -> c_int;
                pub fn pthread_condattr_getclock(
                    attr: *const pthread_condattr_t,
                    clock_id: *mut clockid_t,
                ) -> c_int;
                pub fn pthread_condattr_setclock(
                    attr: *mut pthread_condattr_t,
                    clock_id:  clockid_t,
                ) -> c_int;
                pub fn pthread_condattr_setpshared(attr: *mut pthread_condattr_t, pshared: c_int) -> c_int;
                pub fn pthread_mutexattr_setpshared(attr: *mut pthread_mutexattr_t, pshared: c_int) -> c_int;
                pub fn pthread_rwlockattr_getpshared(
                    attr: *const pthread_rwlockattr_t,
                    val: *mut c_int,
                ) -> c_int;
                pub fn pthread_rwlockattr_setpshared(attr: *mut pthread_rwlockattr_t, val: c_int) -> c_int;
                pub fn ptsname_r(fd: c_int, buf: *mut c_char, buflen: size_t) -> c_int;
                pub fn clearenv() -> c_int;
                pub fn waitid(
                    idtype: idtype_t,
                    id: id_t,
                    infop: *mut  siginfo_t,
                    options: c_int,
                ) -> c_int;
                pub fn getresuid(
                    ruid: *mut  uid_t,
                    euid: *mut  uid_t,
                    suid: *mut  uid_t,
                ) -> c_int;
                pub fn getresgid(
                    rgid: *mut  gid_t,
                    egid: *mut  gid_t,
                    sgid: *mut  gid_t,
                ) -> c_int;
                pub fn acct(filename: *const c_char) -> c_int;
                pub fn brk(addr: *mut c_void) -> c_int;
                pub fn sbrk(increment: intptr_t) -> *mut c_void;
                pub fn setresgid(rgid:  gid_t, egid:  gid_t, sgid:  gid_t) -> c_int;
                pub fn setresuid(ruid:  uid_t, euid:  uid_t, suid:  uid_t) -> c_int;
                #[cfg_attr(gnu_time_bits64, link_name = "__wait4_time64")]
                pub fn wait4(
                    pid:  pid_t,
                    status: *mut c_int,
                    options: c_int,
                    rusage: *mut  rusage,
                ) ->  pid_t;
                pub fn login_tty(fd: c_int) -> c_int;
                pub fn execvpe(
                    file: *const c_char,
                    argv: *const *mut c_char,
                    envp: *const *mut c_char,
                ) -> c_int;
                pub fn fexecve(fd: c_int, argv: *const *mut c_char, envp: *const *mut c_char) -> c_int;
                pub fn getifaddrs(ifap: *mut *mut  ifaddrs) -> c_int;
                pub fn freeifaddrs(ifa: *mut  ifaddrs);
                pub fn bind(
                    socket: c_int,
                    address: *const  sockaddr,
                    address_len:  socklen_t,
                ) -> c_int;

                pub fn writev(fd: c_int, iov: *const  iovec, iovcnt: c_int) -> ssize_t;
                pub fn readv(fd: c_int, iov: *const  iovec, iovcnt: c_int) -> ssize_t;

                #[cfg_attr(gnu_time_bits64, link_name = "__sendmsg64")]
                pub fn sendmsg(fd: c_int, msg: *const  msghdr, flags: c_int) -> ssize_t;
                #[cfg_attr(gnu_time_bits64, link_name = "__recvmsg64")]
                pub fn recvmsg(fd: c_int, msg: *mut  msghdr, flags: c_int) -> ssize_t;
                pub fn uname(buf: *mut  utsname) -> c_int;

                pub fn strchrnul(s: *const c_char, c: c_int) -> *mut c_char;

                pub fn strftime(
                    s: *mut c_char,
                    max: size_t,
                    format: *const c_char,
                    tm: *const  tm,
                ) -> size_t;
                pub fn strftime_l(
                    s: *mut c_char,
                    max: size_t,
                    format: *const c_char,
                    tm: *const  tm,
                    locale:  locale_t,
                ) -> size_t;
                pub fn strptime(s: *const c_char, format: *const c_char, tm: *mut  tm) -> *mut c_char;

                #[cfg_attr(gnu_file_offset_bits64, link_name = "mkostemp64")]
                pub fn mkostemp(template: *mut c_char, flags: c_int) -> c_int;
                #[cfg_attr(gnu_file_offset_bits64, link_name = "mkostemps64")]
                pub fn mkostemps(template: *mut c_char, suffixlen: c_int, flags: c_int) -> c_int;

                pub fn getdomainname(name: *mut c_char, len: size_t) -> c_int;
                pub fn setdomainname(name: *const c_char, len: size_t) -> c_int;
            }
            
            extern "C" 
            {
                pub fn fstatfs64(fd: c_int, buf: *mut statfs64) -> c_int;
                pub fn statvfs64(path: *const c_char, buf: *mut statvfs64) -> c_int;
                pub fn fstatvfs64(fd: c_int, buf: *mut statvfs64) -> c_int;
                pub fn statfs64(path: *const c_char, buf: *mut statfs64) -> c_int;
                pub fn creat64(path: *const c_char, mode: mode_t) -> c_int;
                #[cfg_attr(gnu_time_bits64, link_name = "__fstat64_time64")]
                pub fn fstat64(fildes: c_int, buf: *mut stat64) -> c_int;
                #[cfg_attr(gnu_time_bits64, link_name = "__fstatat64_time64")]
                pub fn fstatat64(
                    dirfd: c_int,
                    pathname: *const c_char,
                    buf: *mut stat64,
                    flags: c_int,
                ) -> c_int;
                pub fn ftruncate64(fd: c_int, length: off64_t) -> c_int;
                pub fn lseek64(fd: c_int, offset: off64_t, whence: c_int) -> off64_t;
                #[cfg_attr(gnu_time_bits64, link_name = "__lstat64_time64")]
                pub fn lstat64(path: *const c_char, buf: *mut stat64) -> c_int;

                pub fn mmap64
                (
                    addr: *mut c_void,
                    len: size_t,
                    prot: c_int,
                    flags: c_int,
                    fd: c_int,
                    offset: off64_t,
                ) -> *mut c_void;

                pub fn open64(path: *const c_char, oflag: c_int, ...) -> c_int;
                pub fn openat64(fd: c_int, path: *const c_char, oflag: c_int, ...) -> c_int;

                pub fn posix_fadvise64
                (
                    fd: c_int,
                    offset: off64_t,
                    len: off64_t,
                    advise: c_int,
                ) -> c_int;

                pub fn pread64(fd: c_int, buf: *mut c_void, count: size_t, offset: off64_t) -> ssize_t;

                pub fn pwrite64
                (
                    fd: c_int,
                    buf: *const c_void,
                    count: size_t,
                    offset: off64_t,
                ) -> ssize_t;

                pub fn readdir64(dirp: *mut  DIR) -> *mut  dirent64;

                pub fn readdir64_r
                (
                    dirp: *mut  DIR,
                    entry: *mut  dirent64,
                    result: *mut *mut  dirent64,
                ) -> c_int;

                #[cfg_attr(gnu_time_bits64, link_name = "__stat64_time64")]
                pub fn stat64(path: *const c_char, buf: *mut stat64) -> c_int;

                pub fn truncate64(path: *const c_char, length: off64_t) -> c_int;
            }
            
            extern "C"
            {
                pub fn preadv64
                (
                    fd: c_int,
                    iov: *const  iovec,
                    iovcnt: c_int,
                    offset: off64_t,
                ) -> ssize_t;
                
                pub fn pwritev64
                (
                    fd: c_int,
                    iov: *const  iovec,
                    iovcnt: c_int,
                    offset: off64_t,
                ) -> ssize_t;

                pub fn openpty
                (
                    amaster: *mut c_int,
                    aslave: *mut c_int,
                    name: *mut c_char,
                    termp: *const termios,
                    winp: *const  winsize,
                ) -> c_int;
            }

            mod linux
            {
                //! Linux-specific definitions for linux-like values.
                pub use ::libc::{ * };
                
                pub type useconds_t = u32;
                pub type dev_t = u64;
                pub type socklen_t = u32;
                pub type ino64_t = u64;
                pub type off64_t = i64;
                pub type blkcnt64_t = i64;
                pub type rlim64_t = u64;
                pub type mqd_t = c_int;
                pub type nfds_t = c_ulong;
                pub type nl_item = c_int;
                pub type idtype_t = c_uint;
                pub type loff_t = c_longlong;
                pub type pthread_key_t = c_uint;
                pub type pthread_once_t = c_int;
                pub type pthread_spinlock_t = c_int;
                pub type __kernel_fsid_t = __c_anonymous__kernel_fsid_t;
                pub type __kernel_clockid_t = c_int;

                pub type __u8 = c_uchar;
                pub type __u16 = c_ushort;
                pub type __s16 = c_short;
                pub type __u32 = c_uint;
                pub type __s32 = c_int;

                pub type Elf32_Half = u16;
                pub type Elf32_Word = u32;
                pub type Elf32_Off = u32;
                pub type Elf32_Addr = u32;
                pub type Elf32_Xword = u64;
                pub type Elf32_Sword = i32;

                pub type Elf64_Half = u16;
                pub type Elf64_Word = u32;
                pub type Elf64_Off = u64;
                pub type Elf64_Addr = u64;
                pub type Elf64_Xword = u64;
                pub type Elf64_Sxword = i64;
                pub type Elf64_Sword = i32;

                pub type Elf32_Section = u16;
                pub type Elf64_Section = u16;

                pub type Elf32_Relr = Elf32_Word;
                pub type Elf64_Relr = Elf32_Xword;
                pub type Elf32_Rel = __c_anonymous_elf32_rel;
                pub type Elf64_Rel = __c_anonymous_elf64_rel;

                pub type Elf32_Rela = __c_anonymous_elf32_rela;
                pub type Elf64_Rela = __c_anonymous_elf64_rela;

                pub type iconv_t = *mut c_void;

                pub type sctp_assoc_t = __s32;

                pub type eventfd_t = u64;

                cfg_if! 
                {
                    if #[cfg(not(target_env = "gnu"))] 
                    {
                        missing! 
                        {
                            #[derive(Debug)]
                            pub enum fpos64_t {}
                        }
                    }
                }

                c_enum! 
                {
                    enum tpacket_versions 
                    {
                        TPACKET_V1,
                        TPACKET_V2,
                        TPACKET_V3,
                    }
                }

                c_enum! 
                {
                    enum pid_type 
                    {
                        PIDTYPE_PID,
                        PIDTYPE_TGID,
                        PIDTYPE_PGID,
                        PIDTYPE_SID,
                        PIDTYPE_MAX,
                    }
                }

                s! 
                {
                    pub struct glob_t 
                    {
                        pub gl_pathc: size_t,
                        pub gl_pathv: *mut *mut c_char,
                        pub gl_offs: size_t,
                        pub gl_flags: c_int,

                        __unused1: *mut c_void,
                        __unused2: *mut c_void,
                        __unused3: *mut c_void,
                        __unused4: *mut c_void,
                        __unused5: *mut c_void,
                    }

                    pub struct passwd 
                    {
                        pub pw_name: *mut c_char,
                        pub pw_passwd: *mut c_char,
                        pub pw_uid: uid_t,
                        pub pw_gid: gid_t,
                        pub pw_gecos: *mut c_char,
                        pub pw_dir: *mut c_char,
                        pub pw_shell: *mut c_char,
                    }

                    pub struct spwd 
                    {
                        pub sp_namp: *mut c_char,
                        pub sp_pwdp: *mut c_char,
                        pub sp_lstchg: c_long,
                        pub sp_min: c_long,
                        pub sp_max: c_long,
                        pub sp_warn: c_long,
                        pub sp_inact: c_long,
                        pub sp_expire: c_long,
                        pub sp_flag: c_ulong,
                    }

                    pub struct dqblk 
                    {
                        pub dqb_bhardlimit: u64,
                        pub dqb_bsoftlimit: u64,
                        pub dqb_curspace: u64,
                        pub dqb_ihardlimit: u64,
                        pub dqb_isoftlimit: u64,
                        pub dqb_curinodes: u64,
                        pub dqb_btime: u64,
                        pub dqb_itime: u64,
                        pub dqb_valid: u32,
                    }

                    pub struct signalfd_siginfo 
                    {
                        pub ssi_signo: u32,
                        pub ssi_errno: i32,
                        pub ssi_code: i32,
                        pub ssi_pid: u32,
                        pub ssi_uid: u32,
                        pub ssi_fd: i32,
                        pub ssi_tid: u32,
                        pub ssi_band: u32,
                        pub ssi_overrun: u32,
                        pub ssi_trapno: u32,
                        pub ssi_status: i32,
                        pub ssi_int: i32,
                        pub ssi_ptr: u64,
                        pub ssi_utime: u64,
                        pub ssi_stime: u64,
                        pub ssi_addr: u64,
                        pub ssi_addr_lsb: u16,
                        _pad2: u16,
                        pub ssi_syscall: i32,
                        pub ssi_call_addr: u64,
                        pub ssi_arch: u32,
                        _pad: [u8; 28],
                    }

                    pub struct itimerspec 
                    {
                        pub it_interval: timespec,
                        pub it_value: timespec,
                    }

                    pub struct fsid_t 
                    {
                        __val: [c_int; 2],
                    }

                    pub struct fanout_args 
                    {
                        #[cfg(target_endian = "little")]
                        pub id: __u16,
                        pub type_flags: __u16,
                        #[cfg(target_endian = "big")]
                        pub id: __u16,
                        pub max_num_members: __u32,
                    }

                    pub struct packet_mreq 
                    {
                        pub mr_ifindex: c_int,
                        pub mr_type: c_ushort,
                        pub mr_alen: c_ushort,
                        pub mr_address: [c_uchar; 8],
                    }

                    #[deprecated(since = "0.2.70", note = "sockaddr_ll type must be used instead")]
                    pub struct sockaddr_pkt 
                    {
                        pub spkt_family: c_ushort,
                        pub spkt_device: [c_uchar; 14],
                        pub spkt_protocol: c_ushort,
                    }

                    pub struct tpacket_auxdata 
                    {
                        pub tp_status: __u32,
                        pub tp_len: __u32,
                        pub tp_snaplen: __u32,
                        pub tp_mac: __u16,
                        pub tp_net: __u16,
                        pub tp_vlan_tci: __u16,
                        pub tp_vlan_tpid: __u16,
                    }

                    pub struct tpacket_hdr 
                    {
                        pub tp_status: c_ulong,
                        pub tp_len: c_uint,
                        pub tp_snaplen: c_uint,
                        pub tp_mac: c_ushort,
                        pub tp_net: c_ushort,
                        pub tp_sec: c_uint,
                        pub tp_usec: c_uint,
                    }

                    pub struct tpacket_hdr_variant1 
                    {
                        pub tp_rxhash: __u32,
                        pub tp_vlan_tci: __u32,
                        pub tp_vlan_tpid: __u16,
                        pub tp_padding: __u16,
                    }

                    pub struct tpacket2_hdr 
                    {
                        pub tp_status: __u32,
                        pub tp_len: __u32,
                        pub tp_snaplen: __u32,
                        pub tp_mac: __u16,
                        pub tp_net: __u16,
                        pub tp_sec: __u32,
                        pub tp_nsec: __u32,
                        pub tp_vlan_tci: __u16,
                        pub tp_vlan_tpid: __u16,
                        pub tp_padding: [__u8; 4],
                    }

                    pub struct tpacket_req 
                    {
                        pub tp_block_size: c_uint,
                        pub tp_block_nr: c_uint,
                        pub tp_frame_size: c_uint,
                        pub tp_frame_nr: c_uint,
                    }

                    pub struct tpacket_req3 
                    {
                        pub tp_block_size: c_uint,
                        pub tp_block_nr: c_uint,
                        pub tp_frame_size: c_uint,
                        pub tp_frame_nr: c_uint,
                        pub tp_retire_blk_tov: c_uint,
                        pub tp_sizeof_priv: c_uint,
                        pub tp_feature_req_word: c_uint,
                    }

                    #[repr(align(8))]
                    pub struct tpacket_rollover_stats 
                    {
                        pub tp_all: __u64,
                        pub tp_huge: __u64,
                        pub tp_failed: __u64,
                    }

                    pub struct tpacket_stats 
                    {
                        pub tp_packets: c_uint,
                        pub tp_drops: c_uint,
                    }

                    pub struct tpacket_stats_v3 
                    {
                        pub tp_packets: c_uint,
                        pub tp_drops: c_uint,
                        pub tp_freeze_q_cnt: c_uint,
                    }

                    pub struct tpacket3_hdr 
                    {
                        pub tp_next_offset: __u32,
                        pub tp_sec: __u32,
                        pub tp_nsec: __u32,
                        pub tp_snaplen: __u32,
                        pub tp_len: __u32,
                        pub tp_status: __u32,
                        pub tp_mac: __u16,
                        pub tp_net: __u16,
                        pub hv1: tpacket_hdr_variant1,
                        pub tp_padding: [__u8; 8],
                    }

                    pub struct tpacket_bd_ts 
                    {
                        pub ts_sec: c_uint,
                        pub ts_usec: c_uint,
                    }

                    #[repr(align(8))]
                    pub struct tpacket_hdr_v1 
                    {
                        pub block_status: __u32,
                        pub num_pkts: __u32,
                        pub offset_to_first_pkt: __u32,
                        pub blk_len: __u32,
                        pub seq_num: __u64,
                        pub ts_first_pkt: tpacket_bd_ts,
                        pub ts_last_pkt: tpacket_bd_ts,
                    }

                    pub struct cpu_set_t 
                    {
                        #[cfg(all(target_pointer_width = "32", not(target_arch = "x86_64")))]
                        bits: [u32; 32],
                        #[cfg(not(all(target_pointer_width = "32", not(target_arch = "x86_64"))))]
                        bits: [u64; 16],
                    }

                    pub struct if_nameindex 
                    {
                        pub if_index: c_uint,
                        pub if_name: *mut c_char,
                    }
                    
                    pub struct msginfo 
                    {
                        pub msgpool: c_int,
                        pub msgmap: c_int,
                        pub msgmax: c_int,
                        pub msgmnb: c_int,
                        pub msgmni: c_int,
                        pub msgssz: c_int,
                        pub msgtql: c_int,
                        pub msgseg: c_ushort,
                    }

                    pub struct sembuf 
                    {
                        pub sem_num: c_ushort,
                        pub sem_op: c_short,
                        pub sem_flg: c_short,
                    }

                    pub struct input_event 
                    {
                        #[cfg(any(target_pointer_width = "64", not(linux_time_bits64)))]
                        pub time: timeval,
                        #[cfg(all(target_pointer_width = "32", linux_time_bits64))]
                        pub input_event_sec: c_ulong,

                        #[cfg(all(target_pointer_width = "32", linux_time_bits64))]
                        pub input_event_usec: c_ulong,

                        pub type_: __u16,
                        pub code: __u16,
                        pub value: __s32,
                    }

                    pub struct input_id 
                    {
                        pub bustype: __u16,
                        pub vendor: __u16,
                        pub product: __u16,
                        pub version: __u16,
                    }

                    pub struct input_absinfo 
                    {
                        pub value: __s32,
                        pub minimum: __s32,
                        pub maximum: __s32,
                        pub fuzz: __s32,
                        pub flat: __s32,
                        pub resolution: __s32,
                    }

                    pub struct input_keymap_entry 
                    {
                        pub flags: __u8,
                        pub len: __u8,
                        pub index: __u16,
                        pub keycode: __u32,
                        pub scancode: [__u8; 32],
                    }

                    pub struct input_mask 
                    {
                        pub type_: __u32,
                        pub codes_size: __u32,
                        pub codes_ptr: __u64,
                    }

                    pub struct ff_replay 
                    {
                        pub length: __u16,
                        pub delay: __u16,
                    }

                    pub struct ff_trigger 
                    {
                        pub button: __u16,
                        pub interval: __u16,
                    }

                    pub struct ff_envelope 
                    {
                        pub attack_length: __u16,
                        pub attack_level: __u16,
                        pub fade_length: __u16,
                        pub fade_level: __u16,
                    }

                    pub struct ff_constant_effect 
                    {
                        pub level: __s16,
                        pub envelope: ff_envelope,
                    }

                    pub struct ff_ramp_effect 
                    {
                        pub start_level: __s16,
                        pub end_level: __s16,
                        pub envelope: ff_envelope,
                    }

                    pub struct ff_condition_effect 
                    {
                        pub right_saturation: __u16,
                        pub left_saturation: __u16,

                        pub right_coeff: __s16,
                        pub left_coeff: __s16,

                        pub deadband: __u16,
                        pub center: __s16,
                    }

                    pub struct ff_periodic_effect 
                    {
                        pub waveform: __u16,
                        pub period: __u16,
                        pub magnitude: __s16,
                        pub offset: __s16,
                        pub phase: __u16,

                        pub envelope: ff_envelope,

                        pub custom_len: __u32,
                        pub custom_data: *mut __s16,
                    }

                    pub struct ff_rumble_effect 
                    {
                        pub strong_magnitude: __u16,
                        pub weak_magnitude: __u16,
                    }

                    pub struct ff_effect 
                    {
                        pub type_: __u16,
                        pub id: __s16,
                        pub direction: __u16,
                        pub trigger: ff_trigger,
                        pub replay: ff_replay,
                        #[cfg(target_pointer_width = "64")]
                        pub u: [u64; 4],
                        #[cfg(target_pointer_width = "32")]
                        pub u: [u32; 7],
                    }

                    pub struct uinput_ff_upload 
                    {
                        pub request_id: __u32,
                        pub retval: __s32,
                        pub effect: ff_effect,
                        pub old: ff_effect,
                    }

                    pub struct uinput_ff_erase 
                    {
                        pub request_id: __u32,
                        pub retval: __s32,
                        pub effect_id: __u32,
                    }

                    pub struct uinput_abs_setup 
                    {
                        pub code: __u16,
                        pub absinfo: input_absinfo,
                    }

                    pub struct dl_phdr_info 
                    {
                        #[cfg(target_pointer_width = "64")]
                        pub dlpi_addr: Elf64_Addr,
                        #[cfg(target_pointer_width = "32")]
                        pub dlpi_addr: Elf32_Addr,

                        pub dlpi_name: *const c_char,

                        #[cfg(target_pointer_width = "64")]
                        pub dlpi_phdr: *const Elf64_Phdr,
                        #[cfg(target_pointer_width = "32")]
                        pub dlpi_phdr: *const Elf32_Phdr,

                        #[cfg(target_pointer_width = "64")]
                        pub dlpi_phnum: Elf64_Half,
                        #[cfg(target_pointer_width = "32")]
                        pub dlpi_phnum: Elf32_Half,
                        
                        #[cfg(not(any(target_env = "uclibc", target_os = "nto")))]
                        pub dlpi_adds: c_ulonglong,
                        #[cfg(not(any(target_env = "uclibc", target_os = "nto")))]
                        pub dlpi_subs: c_ulonglong,
                        #[cfg(not(any(target_env = "uclibc", target_os = "nto")))]
                        pub dlpi_tls_modid: size_t,
                        #[cfg(not(any(target_env = "uclibc", target_os = "nto")))]
                        pub dlpi_tls_data: *mut c_void,
                    }

                    pub struct Elf32_Ehdr 
                    {
                        pub e_ident: [c_uchar; 16],
                        pub e_type: Elf32_Half,
                        pub e_machine: Elf32_Half,
                        pub e_version: Elf32_Word,
                        pub e_entry: Elf32_Addr,
                        pub e_phoff: Elf32_Off,
                        pub e_shoff: Elf32_Off,
                        pub e_flags: Elf32_Word,
                        pub e_ehsize: Elf32_Half,
                        pub e_phentsize: Elf32_Half,
                        pub e_phnum: Elf32_Half,
                        pub e_shentsize: Elf32_Half,
                        pub e_shnum: Elf32_Half,
                        pub e_shstrndx: Elf32_Half,
                    }

                    pub struct Elf64_Ehdr 
                    {
                        pub e_ident: [c_uchar; 16],
                        pub e_type: Elf64_Half,
                        pub e_machine: Elf64_Half,
                        pub e_version: Elf64_Word,
                        pub e_entry: Elf64_Addr,
                        pub e_phoff: Elf64_Off,
                        pub e_shoff: Elf64_Off,
                        pub e_flags: Elf64_Word,
                        pub e_ehsize: Elf64_Half,
                        pub e_phentsize: Elf64_Half,
                        pub e_phnum: Elf64_Half,
                        pub e_shentsize: Elf64_Half,
                        pub e_shnum: Elf64_Half,
                        pub e_shstrndx: Elf64_Half,
                    }

                    pub struct Elf32_Sym 
                    {
                        pub st_name: Elf32_Word,
                        pub st_value: Elf32_Addr,
                        pub st_size: Elf32_Word,
                        pub st_info: c_uchar,
                        pub st_other: c_uchar,
                        pub st_shndx: Elf32_Section,
                    }

                    pub struct Elf64_Sym 
                    {
                        pub st_name: Elf64_Word,
                        pub st_info: c_uchar,
                        pub st_other: c_uchar,
                        pub st_shndx: Elf64_Section,
                        pub st_value: Elf64_Addr,
                        pub st_size: Elf64_Xword,
                    }

                    pub struct Elf32_Phdr 
                    {
                        pub p_type: Elf32_Word,
                        pub p_offset: Elf32_Off,
                        pub p_vaddr: Elf32_Addr,
                        pub p_paddr: Elf32_Addr,
                        pub p_filesz: Elf32_Word,
                        pub p_memsz: Elf32_Word,
                        pub p_flags: Elf32_Word,
                        pub p_align: Elf32_Word,
                    }

                    pub struct Elf64_Phdr 
                    {
                        pub p_type: Elf64_Word,
                        pub p_flags: Elf64_Word,
                        pub p_offset: Elf64_Off,
                        pub p_vaddr: Elf64_Addr,
                        pub p_paddr: Elf64_Addr,
                        pub p_filesz: Elf64_Xword,
                        pub p_memsz: Elf64_Xword,
                        pub p_align: Elf64_Xword,
                    }

                    pub struct Elf32_Shdr 
                    {
                        pub sh_name: Elf32_Word,
                        pub sh_type: Elf32_Word,
                        pub sh_flags: Elf32_Word,
                        pub sh_addr: Elf32_Addr,
                        pub sh_offset: Elf32_Off,
                        pub sh_size: Elf32_Word,
                        pub sh_link: Elf32_Word,
                        pub sh_info: Elf32_Word,
                        pub sh_addralign: Elf32_Word,
                        pub sh_entsize: Elf32_Word,
                    }

                    pub struct Elf64_Shdr 
                    {
                        pub sh_name: Elf64_Word,
                        pub sh_type: Elf64_Word,
                        pub sh_flags: Elf64_Xword,
                        pub sh_addr: Elf64_Addr,
                        pub sh_offset: Elf64_Off,
                        pub sh_size: Elf64_Xword,
                        pub sh_link: Elf64_Word,
                        pub sh_info: Elf64_Word,
                        pub sh_addralign: Elf64_Xword,
                        pub sh_entsize: Elf64_Xword,
                    }

                    pub struct __c_anonymous_elf32_rel 
                    {
                        pub r_offset: Elf32_Addr,
                        pub r_info: Elf32_Word,
                    }

                    pub struct __c_anonymous_elf64_rel 
                    {
                        pub r_offset: Elf64_Addr,
                        pub r_info: Elf64_Xword,
                    }

                    pub struct __c_anonymous__kernel_fsid_t 
                    {
                        pub val: [c_int; 2],
                    }

                    pub struct ucred 
                    {
                        pub pid: pid_t,
                        pub uid: uid_t,
                        pub gid: gid_t,
                    }

                    pub struct mntent 
                    {
                        pub mnt_fsname: *mut c_char,
                        pub mnt_dir: *mut c_char,
                        pub mnt_type: *mut c_char,
                        pub mnt_opts: *mut c_char,
                        pub mnt_freq: c_int,
                        pub mnt_passno: c_int,
                    }

                    pub struct posix_spawn_file_actions_t 
                    {
                        __allocated: c_int,
                        __used: c_int,
                        __actions: *mut c_int,
                        __pad: [c_int; 16],
                    }

                    pub struct posix_spawnattr_t 
                    {
                        __flags: c_short,
                        __pgrp: pid_t,
                        __sd: sigset_t,
                        __ss: sigset_t,
                        __sp: sched_param,
                        __policy: c_int,
                        __pad: [c_int; 16],
                    }

                    pub struct genlmsghdr 
                    {
                        pub cmd: u8,
                        pub version: u8,
                        pub reserved: u16,
                    }

                    pub struct in6_pktinfo 
                    {
                        pub ipi6_addr: in6_addr,
                        pub ipi6_ifindex: c_uint,
                    }

                    pub struct arpd_request 
                    {
                        pub req: c_ushort,
                        pub ip: u32,
                        pub dev: c_ulong,
                        pub stamp: c_ulong,
                        pub updated: c_ulong,
                        pub ha: [c_uchar; MAX_ADDR_LEN],
                    }

                    pub struct inotify_event 
                    {
                        pub wd: c_int,
                        pub mask: u32,
                        pub cookie: u32,
                        pub len: u32,
                    }

                    pub struct fanotify_response 
                    {
                        pub fd: c_int,
                        pub response: __u32,
                    }

                    pub struct fanotify_event_info_header 
                    {
                        pub info_type: __u8,
                        pub pad: __u8,
                        pub len: __u16,
                    }

                    pub struct fanotify_event_info_fid 
                    {
                        pub hdr: fanotify_event_info_header,
                        pub fsid: __kernel_fsid_t,
                        pub handle: [c_uchar; 0],
                    }

                    pub struct sockaddr_vm 
                    {
                        pub svm_family: sa_family_t,
                        pub svm_reserved1: c_ushort,
                        pub svm_port: c_uint,
                        pub svm_cid: c_uint,
                        pub svm_flags: u8,
                        pub svm_zero: [u8; 3],
                    }

                    pub struct regmatch_t 
                    {
                        pub rm_so: regoff_t,
                        pub rm_eo: regoff_t,
                    }

                    pub struct sock_extended_err 
                    {
                        pub ee_errno: u32,
                        pub ee_origin: u8,
                        pub ee_type: u8,
                        pub ee_code: u8,
                        pub ee_pad: u8,
                        pub ee_info: u32,
                        pub ee_data: u32,
                    }
                    
                    pub struct seccomp_data 
                    {
                        pub nr: c_int,
                        pub arch: __u32,
                        pub instruction_pointer: __u64,
                        pub args: [__u64; 6],
                    }

                    pub struct seccomp_notif_sizes 
                    {
                        pub seccomp_notif: __u16,
                        pub seccomp_notif_resp: __u16,
                        pub seccomp_data: __u16,
                    }

                    pub struct seccomp_notif 
                    {
                        pub id: __u64,
                        pub pid: __u32,
                        pub flags: __u32,
                        pub data: seccomp_data,
                    }

                    pub struct seccomp_notif_resp 
                    {
                        pub id: __u64,
                        pub val: __s64,
                        pub error: __s32,
                        pub flags: __u32,
                    }

                    pub struct seccomp_notif_addfd 
                    {
                        pub id: __u64,
                        pub flags: __u32,
                        pub srcfd: __u32,
                        pub newfd: __u32,
                        pub newfd_flags: __u32,
                    }

                    pub struct nlmsghdr 
                    {
                        pub nlmsg_len: u32,
                        pub nlmsg_type: u16,
                        pub nlmsg_flags: u16,
                        pub nlmsg_seq: u32,
                        pub nlmsg_pid: u32,
                    }

                    pub struct nlmsgerr 
                    {
                        pub error: c_int,
                        pub msg: nlmsghdr,
                    }

                    pub struct nlattr 
                    {
                        pub nla_len: u16,
                        pub nla_type: u16,
                    }

                    pub struct __c_anonymous_ifru_map 
                    {
                        pub mem_start: c_ulong,
                        pub mem_end: c_ulong,
                        pub base_addr: c_ushort,
                        pub irq: c_uchar,
                        pub dma: c_uchar,
                        pub port: c_uchar,
                    }

                    pub struct in6_ifreq 
                    {
                        pub ifr6_addr: in6_addr,
                        pub ifr6_prefixlen: u32,
                        pub ifr6_ifindex: c_int,
                    }

                    pub struct option 
                    {
                        pub name: *const c_char,
                        pub has_arg: c_int,
                        pub flag: *mut c_int,
                        pub val: c_int,
                    }
                    
                    #[non_exhaustive]     pub struct open_how 
                    {
                        pub flags: __u64,
                        pub mode: __u64,
                        pub resolve: __u64,
                    }
                    
                    pub struct ptp_clock_time 
                    {
                        pub sec: __s64,
                        pub nsec: __u32,
                        pub reserved: __u32,
                    }

                    pub struct ptp_extts_request 
                    {
                        pub index: c_uint,
                        pub flags: c_uint,
                        pub rsv: [c_uint; 2],
                    }

                    pub struct ptp_sys_offset_extended 
                    {
                        pub n_samples: c_uint,
                        pub clockid: __kernel_clockid_t,
                        pub rsv: [c_uint; 2],
                        pub ts: [[ptp_clock_time; 3]; PTP_MAX_SAMPLES as usize],
                    }

                    pub struct ptp_sys_offset_precise 
                    {
                        pub device: ptp_clock_time,
                        pub sys_realtime: ptp_clock_time,
                        pub sys_monoraw: ptp_clock_time,
                        pub rsv: [c_uint; 4],
                    }

                    pub struct ptp_extts_event 
                    {
                        pub t: ptp_clock_time,
                        index: c_uint,
                        flags: c_uint,
                        rsv: [c_uint; 2],
                    }
                    
                    pub struct sctp_initmsg 
                    {
                        pub sinit_num_ostreams: __u16,
                        pub sinit_max_instreams: __u16,
                        pub sinit_max_attempts: __u16,
                        pub sinit_max_init_timeo: __u16,
                    }

                    pub struct sctp_sndrcvinfo 
                    {
                        pub sinfo_stream: __u16,
                        pub sinfo_ssn: __u16,
                        pub sinfo_flags: __u16,
                        pub sinfo_ppid: __u32,
                        pub sinfo_context: __u32,
                        pub sinfo_timetolive: __u32,
                        pub sinfo_tsn: __u32,
                        pub sinfo_cumtsn: __u32,
                        pub sinfo_assoc_id: sctp_assoc_t,
                    }

                    pub struct sctp_sndinfo 
                    {
                        pub snd_sid: __u16,
                        pub snd_flags: __u16,
                        pub snd_ppid: __u32,
                        pub snd_context: __u32,
                        pub snd_assoc_id: sctp_assoc_t,
                    }

                    pub struct sctp_rcvinfo 
                    {
                        pub rcv_sid: __u16,
                        pub rcv_ssn: __u16,
                        pub rcv_flags: __u16,
                        pub rcv_ppid: __u32,
                        pub rcv_tsn: __u32,
                        pub rcv_cumtsn: __u32,
                        pub rcv_context: __u32,
                        pub rcv_assoc_id: sctp_assoc_t,
                    }

                    pub struct sctp_nxtinfo 
                    {
                        pub nxt_sid: __u16,
                        pub nxt_flags: __u16,
                        pub nxt_ppid: __u32,
                        pub nxt_length: __u32,
                        pub nxt_assoc_id: sctp_assoc_t,
                    }

                    pub struct sctp_prinfo 
                    {
                        pub pr_policy: __u16,
                        pub pr_value: __u32,
                    }

                    pub struct sctp_authinfo 
                    {
                        pub auth_keynumber: __u16,
                    }

                    pub struct rlimit64 
                    {
                        pub rlim_cur: rlim64_t,
                        pub rlim_max: rlim64_t,
                    }

                    pub struct tls_crypto_info 
                    {
                        pub version: __u16,
                        pub cipher_type: __u16,
                    }

                    pub struct tls12_crypto_info_aes_gcm_128 
                    {
                        pub info: tls_crypto_info,
                        pub iv: [c_uchar; TLS_CIPHER_AES_GCM_128_IV_SIZE],
                        pub key: [c_uchar; TLS_CIPHER_AES_GCM_128_KEY_SIZE],
                        pub salt: [c_uchar; TLS_CIPHER_AES_GCM_128_SALT_SIZE],
                        pub rec_seq: [c_uchar; TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE],
                    }

                    pub struct tls12_crypto_info_aes_gcm_256 
                    {
                        pub info: tls_crypto_info,
                        pub iv: [c_uchar; TLS_CIPHER_AES_GCM_256_IV_SIZE],
                        pub key: [c_uchar; TLS_CIPHER_AES_GCM_256_KEY_SIZE],
                        pub salt: [c_uchar; TLS_CIPHER_AES_GCM_256_SALT_SIZE],
                        pub rec_seq: [c_uchar; TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE],
                    }

                    pub struct tls12_crypto_info_aes_ccm_128 
                    {
                        pub info: tls_crypto_info,
                        pub iv: [c_uchar; TLS_CIPHER_AES_CCM_128_IV_SIZE],
                        pub key: [c_uchar; TLS_CIPHER_AES_CCM_128_KEY_SIZE],
                        pub salt: [c_uchar; TLS_CIPHER_AES_CCM_128_SALT_SIZE],
                        pub rec_seq: [c_uchar; TLS_CIPHER_AES_CCM_128_REC_SEQ_SIZE],
                    }

                    pub struct tls12_crypto_info_chacha20_poly1305 
                    {
                        pub info: tls_crypto_info,
                        pub iv: [c_uchar; TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE],
                        pub key: [c_uchar; TLS_CIPHER_CHACHA20_POLY1305_KEY_SIZE],
                        pub salt: [c_uchar; TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE],
                        pub rec_seq: [c_uchar; TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE],
                    }

                    pub struct tls12_crypto_info_sm4_gcm 
                    {
                        pub info: tls_crypto_info,
                        pub iv: [c_uchar; TLS_CIPHER_SM4_GCM_IV_SIZE],
                        pub key: [c_uchar; TLS_CIPHER_SM4_GCM_KEY_SIZE],
                        pub salt: [c_uchar; TLS_CIPHER_SM4_GCM_SALT_SIZE],
                        pub rec_seq: [c_uchar; TLS_CIPHER_SM4_GCM_REC_SEQ_SIZE],
                    }

                    pub struct tls12_crypto_info_sm4_ccm 
                    {
                        pub info: tls_crypto_info,
                        pub iv: [c_uchar; TLS_CIPHER_SM4_CCM_IV_SIZE],
                        pub key: [c_uchar; TLS_CIPHER_SM4_CCM_KEY_SIZE],
                        pub salt: [c_uchar; TLS_CIPHER_SM4_CCM_SALT_SIZE],
                        pub rec_seq: [c_uchar; TLS_CIPHER_SM4_CCM_REC_SEQ_SIZE],
                    }

                    pub struct tls12_crypto_info_aria_gcm_128 
                    {
                        pub info: tls_crypto_info,
                        pub iv: [c_uchar; TLS_CIPHER_ARIA_GCM_128_IV_SIZE],
                        pub key: [c_uchar; TLS_CIPHER_ARIA_GCM_128_KEY_SIZE],
                        pub salt: [c_uchar; TLS_CIPHER_ARIA_GCM_128_SALT_SIZE],
                        pub rec_seq: [c_uchar; TLS_CIPHER_ARIA_GCM_128_REC_SEQ_SIZE],
                    }

                    pub struct tls12_crypto_info_aria_gcm_256 
                    {
                        pub info: tls_crypto_info,
                        pub iv: [c_uchar; TLS_CIPHER_ARIA_GCM_256_IV_SIZE],
                        pub key: [c_uchar; TLS_CIPHER_ARIA_GCM_256_KEY_SIZE],
                        pub salt: [c_uchar; TLS_CIPHER_ARIA_GCM_256_SALT_SIZE],
                        pub rec_seq: [c_uchar; TLS_CIPHER_ARIA_GCM_256_REC_SEQ_SIZE],
                    }

                    pub struct iw_param 
                    {
                        pub value: __s32,
                        pub fixed: __u8,
                        pub disabled: __u8,
                        pub flags: __u16,
                    }

                    pub struct iw_point 
                    {
                        pub pointer: *mut c_void,
                        pub length: __u16,
                        pub flags: __u16,
                    }

                    pub struct iw_freq 
                    {
                        pub m: __s32,
                        pub e: __s16,
                        pub i: __u8,
                        pub flags: __u8,
                    }

                    pub struct iw_quality 
                    {
                        pub qual: __u8,
                        pub level: __u8,
                        pub noise: __u8,
                        pub updated: __u8,
                    }

                    pub struct iw_discarded 
                    {
                        pub nwid: __u32,
                        pub code: __u32,
                        pub fragment: __u32,
                        pub retries: __u32,
                        pubmisc: __u32,
                    }

                    pub struct iw_missed 
                    {
                        pub beacon: __u32,
                    }

                    pub struct iw_scan_req 
                    {
                        pub scan_type: __u8,
                        pub essid_len: __u8,
                        pub num_channels: __u8,
                        pub flags: __u8,
                        pub bssid: sockaddr,
                        pub essid: [__u8; IW_ESSID_MAX_SIZE],
                        pub min_channel_time: __u32,
                        pub max_channel_time: __u32,
                        pub channel_list: [iw_freq; IW_MAX_FREQUENCIES],
                    }

                    pub struct iw_encode_ext 
                    {
                        pub ext_flags: __u32,
                        pub tx_seq: [__u8; IW_ENCODE_SEQ_MAX_SIZE],
                        pub rx_seq: [__u8; IW_ENCODE_SEQ_MAX_SIZE],
                        pub addr: sockaddr,
                        pub alg: __u16,
                        pub key_len: __u16,
                        pub key: [__u8; 0],
                    }

                    pub struct iw_pmksa 
                    {
                        pub cmd: __u32,
                        pub bssid: sockaddr,
                        pub pmkid: [__u8; IW_PMKID_LEN],
                    }

                    pub struct iw_pmkid_cand 
                    {
                        pub flags: __u32,
                        pub index: __u32,
                        pub bssid: sockaddr,
                    }

                    pub struct iw_statistics 
                    {
                        pub status: __u16,
                        pub qual: iw_quality,
                        pub discard: iw_discarded,
                        pub miss: iw_missed,
                    }

                    pub struct iw_range 
                    {
                        pub throughput: __u32,
                        pub min_nwid: __u32,
                        pub max_nwid: __u32,
                        pub old_num_channels: __u16,
                        pub old_num_frequency: __u8,
                        pub scan_capa: __u8,
                        pub event_capa: [__u32; 6],
                        pub sensitivity: __s32,
                        pub max_qual: iw_quality,
                        pub avg_qual: iw_quality,
                        pub num_bitrates: __u8,
                        pub bitrate: [__s32; IW_MAX_BITRATES],
                        pub min_rts: __s32,
                        pub max_rts: __s32,
                        pub min_frag: __s32,
                        pub max_frag: __s32,
                        pub min_pmp: __s32,
                        pub max_pmp: __s32,
                        pub min_pmt: __s32,
                        pub max_pmt: __s32,
                        pub pmp_flags: __u16,
                        pub pmt_flags: __u16,
                        pub pm_capa: __u16,
                        pub encoding_size: [__u16; IW_MAX_ENCODING_SIZES],
                        pub num_encoding_sizes: __u8,
                        pub max_encoding_tokens: __u8,
                        pub encoding_login_index: __u8,
                        pub txpower_capa: __u16,
                        pub num_txpower: __u8,
                        pub txpower: [__s32; IW_MAX_TXPOWER],
                        pub we_version_compiled: __u8,
                        pub we_version_source: __u8,
                        pub retry_capa: __u16,
                        pub retry_flags: __u16,
                        pub r_time_flags: __u16,
                        pub min_retry: __s32,
                        pub max_retry: __s32,
                        pub min_r_time: __s32,
                        pub max_r_time: __s32,
                        pub num_channels: __u16,
                        pub num_frequency: __u8,
                        pub freq: [iw_freq; IW_MAX_FREQUENCIES],
                        pub enc_capa: __u32,
                    }

                    pub struct iw_priv_args 
                    {
                        pub cmd: __u32,
                        pub set_args: __u16,
                        pub get_args: __u16,
                        pub name: [c_char; IFNAMSIZ],
                    }

                    pub struct epoll_params 
                    {
                        pub busy_poll_usecs: u32,
                        pub busy_poll_budget: u16,
                        pub prefer_busy_poll: u8,
                        pub __pad: u8
                    }

                    #[cfg_attr
                    (
                        any
                        (
                            target_pointer_width = "32",
                            target_arch = "x86_64",
                            target_arch = "powerpc64",
                            target_arch = "mips64",
                            target_arch = "mips64r6",
                            target_arch = "s390x",
                            target_arch = "sparc64",
                            target_arch = "aarch64",
                            target_arch = "riscv64",
                            target_arch = "riscv32",
                            target_arch = "loongarch64"
                        ),
                        repr(align(4))
                    )]

                    #[cfg_attr
                    (
                        not(any
                        (
                            target_pointer_width = "32",
                            target_arch = "x86_64",
                            target_arch = "powerpc64",
                            target_arch = "mips64",
                            target_arch = "mips64r6",
                            target_arch = "s390x",
                            target_arch = "sparc64",
                            target_arch = "aarch64",
                            target_arch = "riscv64",
                            target_arch = "riscv32",
                            target_arch = "loongarch64"
                        )),
                        repr(align(8))
                    )]
                    pub struct pthread_mutexattr_t 
                    {
                            size: [u8; __SIZEOF_PTHREAD_MUTEXATTR_T],
                    }

                    #[cfg_attr
                    (
                        any(target_env = "musl", target_env = "ohos", target_pointer_width = "32"),
                        repr(align(4))
                    )]

                    #[cfg_attr
                    (
                        all
                        (
                            not(target_env = "musl"),
                            not(target_env = "ohos"),
                            target_pointer_width = "64"
                        ),
                        repr(align(8))
                    )]
                    pub struct pthread_rwlockattr_t 
                    {
                            size: [u8; __SIZEOF_PTHREAD_RWLOCKATTR_T],
                    }

                    #[repr(align(4))]
                    pub struct pthread_condattr_t 
                    {
                            size: [u8; __SIZEOF_PTHREAD_CONDATTR_T],
                    }

                    #[repr(align(4))]
                    pub struct pthread_barrierattr_t 
                    {
                            size: [u8; __SIZEOF_PTHREAD_BARRIERATTR_T],
                    }

                    #[cfg(not(target_env = "musl"))]
                    #[repr(align(8))]
                    pub struct fanotify_event_metadata 
                    {
                        pub event_len: __u32,
                        pub vers: __u8,
                        pub reserved: __u8,
                        pub metadata_len: __u16,
                        pub mask: __u64,
                        pub fd: c_int,
                        pub pid: c_int,
                    }

                    pub struct ptp_sys_offset 
                    {
                        pub n_samples: c_uint,
                        pub rsv: [c_uint; 3],
                        pub ts: [ptp_clock_time; 51],
                    }

                    pub struct ptp_pin_desc 
                    {
                        pub name: [c_char; 64],
                        pub index: c_uint,
                        pub func: c_uint,
                        pub chan: c_uint,
                        pub rsv: [c_uint; 5],
                    }

                    pub struct ptp_clock_caps 
                    {
                        pub max_adj: c_int,
                        pub n_alarm: c_int,
                        pub n_ext_ts: c_int,
                        pub n_per_out: c_int,
                        pub pps: c_int,
                        pub n_pins: c_int,
                        pub cross_timestamping: c_int,
                        pub adjust_phase: c_int,
                        pub max_phase_adj: c_int,
                        pub rsv: [c_int; 11],
                    }

                    pub struct sockaddr_xdp 
                    {
                        pub sxdp_family: __u16,
                        pub sxdp_flags: __u16,
                        pub sxdp_ifindex: __u32,
                        pub sxdp_queue_id: __u32,
                        pub sxdp_shared_umem_fd: __u32,
                    }

                    pub struct xdp_ring_offset 
                    {
                        pub producer: __u64,
                        pub consumer: __u64,
                        pub desc: __u64,
                        pub flags: __u64,
                    }

                    pub struct xdp_mmap_offsets 
                    {
                        pub rx: xdp_ring_offset,
                        pub tx: xdp_ring_offset,
                        pub fr: xdp_ring_offset,
                        pub cr: xdp_ring_offset,
                    }

                    pub struct xdp_ring_offset_v1 
                    {
                        pub producer: __u64,
                        pub consumer: __u64,
                        pub desc: __u64,
                    }

                    pub struct xdp_mmap_offsets_v1 
                    {
                        pub rx: xdp_ring_offset_v1,
                        pub tx: xdp_ring_offset_v1,
                        pub fr: xdp_ring_offset_v1,
                        pub cr: xdp_ring_offset_v1,
                    }

                    pub struct xdp_umem_reg 
                    {
                        pub addr: __u64,
                        pub len: __u64,
                        pub chunk_size: __u32,
                        pub headroom: __u32,
                        pub flags: __u32,
                        pub tx_metadata_len: __u32,
                    }

                    pub struct xdp_umem_reg_v1 
                    {
                        pub addr: __u64,
                        pub len: __u64,
                        pub chunk_size: __u32,
                        pub headroom: __u32,
                    }

                    pub struct xdp_statistics 
                    {
                        pub rx_dropped: __u64,
                        pub rx_invalid_descs: __u64,
                        pub tx_invalid_descs: __u64,
                        pub rx_ring_full: __u64,
                        pub rx_fill_ring_empty_descs: __u64,
                        pub tx_ring_empty_descs: __u64,
                    }

                    pub struct xdp_statistics_v1 
                    {
                        pub rx_dropped: __u64,
                        pub rx_invalid_descs: __u64,
                        pub tx_invalid_descs: __u64,
                    }

                    pub struct xdp_options 
                    {
                        pub flags: __u32,
                    }

                    pub struct xdp_desc 
                    {
                        pub addr: __u64,
                        pub len: __u32,
                        pub options: __u32,
                    }

                    pub struct xsk_tx_metadata_completion 
                    {
                        pub tx_timestamp: __u64,
                    }

                    pub struct xsk_tx_metadata_request 
                    {
                        pub csum_start: __u16,
                        pub csum_offset: __u16,
                    }

                    pub struct mount_attr 
                    {
                        pub attr_set: __u64,
                        pub attr_clr: __u64,
                        pub propagation: __u64,
                        pub userns_fd: __u64,
                    }
                    
                    pub struct mnt_ns_info 
                    {
                        pub size: __u32,
                        pub nr_mounts: __u32,
                        pub mnt_ns_id: __u64,
                    }
                    
                    #[non_exhaustive]     pub struct pidfd_info 
                    {
                        pub mask: __u64,
                        pub cgroupid: __u64,
                        pub pid: __u32,
                        pub tgid: __u32,
                        pub ppid: __u32,
                        pub ruid: __u32,
                        pub rgid: __u32,
                        pub euid: __u32,
                        pub egid: __u32,
                        pub suid: __u32,
                        pub sgid: __u32,
                        pub fsuid: __u32,
                        pub fsgid: __u32,
                        pub exit_code: __s32,
                    }
                    
                    pub struct dmabuf_cmsg 
                    {
                        pub frag_offset: __u64,
                        pub frag_size: __u32,
                        pub frag_token: __u32,
                        pub dmabuf_id: __u32,
                        pub flags: __u32,
                    }

                    pub struct dmabuf_token 
                    {
                        pub token_start: __u32,
                        pub token_count: __u32,
                    }
                }

                s!
                {
                    pub struct iw_thrspy {
                        pub addr: sockaddr,
                        pub qual: iw_quality,
                        pub low: iw_quality,
                        pub high: iw_quality,
                    }

                    pub struct iw_mlme {
                        pub cmd: __u16,
                        pub reason_code: __u16,
                        pub addr: sockaddr,
                    }

                    pub struct iw_michaelmicfailure {
                        pub flags: __u32,
                        pub src_addr: sockaddr,
                        pub tsc: [__u8; IW_ENCODE_SEQ_MAX_SIZE],
                    }

                    pub struct __c_anonymous_elf32_rela {
                        pub r_offset: Elf32_Addr,
                        pub r_info: Elf32_Word,
                        pub r_addend: Elf32_Sword,
                    }

                    pub struct __c_anonymous_elf64_rela {
                        pub r_offset: Elf64_Addr,
                        pub r_info: Elf64_Xword,
                        pub r_addend: Elf64_Sxword,
                    }
                }

                s_no_extra_traits! 
                {
                    pub struct sockaddr_nl 
                    {
                        pub nl_family: sa_family_t,
                        nl_pad: c_ushort,
                        pub nl_pid: u32,
                        pub nl_groups: u32,
                    }

                    pub struct dirent 
                    {
                        pub d_ino: ino_t,
                        pub d_off: off_t,
                        pub d_reclen: c_ushort,
                        pub d_type: c_uchar,
                        pub d_name: [c_char; 256],
                    }

                    pub struct sockaddr_alg
                    {
                        pub salg_family: sa_family_t,
                        pub salg_type: [c_uchar; 14],
                        pub salg_feat: u32,
                        pub salg_mask: u32,
                        pub salg_name: [c_uchar; 64],
                    }

                    pub struct uinput_setup
                    {
                        pub id: input_id,
                        pub name: [c_char; UINPUT_MAX_NAME_SIZE],
                        pub ff_effects_max: __u32,
                    }

                    pub struct uinput_user_dev 
                    {
                        pub name: [c_char; UINPUT_MAX_NAME_SIZE],
                        pub id: input_id,
                        pub ff_effects_max: __u32,
                        pub absmax: [__s32; ABS_CNT],
                        pub absmin: [__s32; ABS_CNT],
                        pub absfuzz: [__s32; ABS_CNT],
                        pub absflat: [__s32; ABS_CNT],
                    }

                    pub struct af_alg_iv 
                    {
                        pub ivlen: u32,
                        pub iv: [c_uchar; 0],
                    }
                    
                    pub struct mq_attr
                    {
                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                        pub mq_flags: i64,
                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                        pub mq_maxmsg: i64,
                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                        pub mq_msgsize: i64,
                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                        pub mq_curmsgs: i64,
                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                        pad: [i64; 4],

                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                        pub mq_flags: c_long,
                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                        pub mq_maxmsg: c_long,
                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                        pub mq_msgsize: c_long,
                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                        pub mq_curmsgs: c_long,
                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                        pad: [c_long; 4],
                    }

                    pub union __c_anonymous_ifr_ifru 
                    {
                        pub ifru_addr: sockaddr,
                        pub ifru_dstaddr: sockaddr,
                        pub ifru_broadaddr: sockaddr,
                        pub ifru_netmask: sockaddr,
                        pub ifru_hwaddr: sockaddr,
                        pub ifru_flags: c_short,
                        pub ifru_ifindex: c_int,
                        pub ifru_metric: c_int,
                        pub ifru_mtu: c_int,
                        pub ifru_map: __c_anonymous_ifru_map,
                        pub ifru_slave: [c_char; IFNAMSIZ],
                        pub ifru_newname: [c_char; IFNAMSIZ],
                        pub ifru_data: *mut c_char,
                    }

                    pub struct ifreq
                    {
                        pub ifr_name: [c_char; IFNAMSIZ],
                        pub ifr_ifru: __c_anonymous_ifr_ifru,
                    }

                    pub union __c_anonymous_ifc_ifcu 
                    {
                        pub ifcu_buf: *mut c_char,
                        pub ifcu_req: *mut ifreq,
                    }
                    /// Structure used in SIOCGIFCONF request.
                    pub struct ifconf 
                    {
                        pub ifc_len: c_int,
                        pub ifc_ifcu: __c_anonymous_ifc_ifcu,
                    }

                    pub struct hwtstamp_config 
                    {
                        pub flags: c_int,
                        pub tx_type: c_int,
                        pub rx_filter: c_int,
                    }

                    pub struct dirent64 
                    {
                        pub d_ino: ino64_t,
                        pub d_off: off64_t,
                        pub d_reclen: c_ushort,
                        pub d_type: c_uchar,
                        pub d_name: [c_char; 256],
                    }

                    pub struct sched_attr 
                    {
                        pub size: __u32,
                        pub sched_policy: __u32,
                        pub sched_flags: __u64,
                        pub sched_nice: __s32,
                        pub sched_priority: __u32,
                        pub sched_runtime: __u64,
                        pub sched_deadline: __u64,
                        pub sched_period: __u64,
                    }

                    pub union tpacket_req_u 
                    {
                        pub req: tpacket_req,
                        pub req3: tpacket_req3,
                    }

                    pub union tpacket_bd_header_u 
                    {
                        pub bh1: tpacket_hdr_v1,
                    }

                    pub struct tpacket_block_desc 
                    {
                        pub version: __u32,
                        pub offset_to_priv: __u32,
                        pub hdr: tpacket_bd_header_u,
                    }

                    #[cfg_attr
                    (
                        all
                        (
                            any(target_env = "musl", target_env = "ohos"),
                            target_pointer_width = "32"
                        ),
                        repr(align(4))
                    )]

                    #[cfg_attr
                    (
                        all
                        (
                            any(target_env = "musl", target_env = "ohos"),
                            target_pointer_width = "64"
                        ),
                        repr(align(8))
                    )]

                    #[cfg_attr
                    (
                        all
                        (
                            not(any(target_env = "musl", target_env = "ohos")),
                            target_arch = "x86"
                        ),
                        repr(align(4))
                    )]

                    #[cfg_attr
                    (
                        all
                        (
                            not(any(target_env = "musl", target_env = "ohos")),
                            not(target_arch = "x86")
                        ),
                        repr(align(8))
                    )]
                    pub struct pthread_cond_t 
                    {
                            size: [u8; __SIZEOF_PTHREAD_COND_T],
                    }

                    #[cfg_attr
                    (
                        all
                        (
                            target_pointer_width = "32",
                            any
                            (
                                target_arch = "mips",
                                target_arch = "mips32r6",
                                target_arch = "arm",
                                target_arch = "hexagon",
                                target_arch = "m68k",
                                target_arch = "csky",
                                target_arch = "powerpc",
                                target_arch = "sparc",
                                target_arch = "x86_64",
                                target_arch = "x86"
                            )
                        ),
                        repr(align(4))
                    )]

                    #[cfg_attr
                    (
                        any
                        (
                            target_pointer_width = "64",
                            not(any
                            (
                                target_arch = "mips",
                                target_arch = "mips32r6",
                                target_arch = "arm",
                                target_arch = "hexagon",
                                target_arch = "m68k",
                                target_arch = "csky",
                                target_arch = "powerpc",
                                target_arch = "sparc",
                                target_arch = "x86_64",
                                target_arch = "x86"
                            ))
                        ),
                        repr(align(8))
                    )]
                    pub struct pthread_mutex_t 
                    {
                            size: [u8; __SIZEOF_PTHREAD_MUTEX_T],
                    }

                    #[cfg_attr
                    (
                        all(
                            target_pointer_width = "32",
                            any(
                                target_arch = "mips",
                                target_arch = "mips32r6",
                                target_arch = "arm",
                                target_arch = "hexagon",
                                target_arch = "m68k",
                                target_arch = "csky",
                                target_arch = "powerpc",
                                target_arch = "sparc",
                                target_arch = "x86_64",
                                target_arch = "x86"
                            )
                        ),
                        repr(align(4))
                    )]

                    #[cfg_attr
                    (
                        any
                        (
                            target_pointer_width = "64",
                            not(any
                            (
                                target_arch = "mips",
                                target_arch = "mips32r6",
                                target_arch = "arm",
                                target_arch = "hexagon",
                                target_arch = "m68k",
                                target_arch = "powerpc",
                                target_arch = "sparc",
                                target_arch = "x86_64",
                                target_arch = "x86"
                            ))
                        ),
                        repr(align(8))
                    )]
                    pub struct pthread_rwlock_t 
                    {
                        size: [u8; __SIZEOF_PTHREAD_RWLOCK_T],
                    }

                    #[cfg_attr
                    (
                        all
                        (
                            target_pointer_width = "32",
                            any
                            (
                                target_arch = "mips",
                                target_arch = "mips32r6",
                                target_arch = "arm",
                                target_arch = "hexagon",
                                target_arch = "m68k",
                                target_arch = "csky",
                                target_arch = "powerpc",
                                target_arch = "sparc",
                                target_arch = "x86_64",
                                target_arch = "x86"
                            )
                        ),
                        repr(align(4))
                    )]

                    #[cfg_attr
                    (
                        any
                        (
                            target_pointer_width = "64",
                            not(any
                            (
                                target_arch = "mips",
                                target_arch = "mips32r6",
                                target_arch = "arm",
                                target_arch = "hexagon",
                                target_arch = "m68k",
                                target_arch = "csky",
                                target_arch = "powerpc",
                                target_arch = "sparc",
                                target_arch = "x86_64",
                                target_arch = "x86"
                            ))
                        ),
                        repr(align(8))
                    )]
                    pub struct pthread_barrier_t 
                    {
                        size: [u8; __SIZEOF_PTHREAD_BARRIER_T],
                    }
                    
                    pub struct sock_txtime 
                    {
                        pub clockid: clockid_t,
                        pub flags: __u32,
                    }
                    
                    pub union iwreq_data 
                    {
                        pub name: [c_char; IFNAMSIZ],
                        pub essid: iw_point,
                        pub nwid: iw_param,
                        pub freq: iw_freq,
                        pub sens: iw_param,
                        pub bitrate: iw_param,
                        pub txpower: iw_param,
                        pub rts: iw_param,
                        pub frag: iw_param,
                        pub mode: __u32,
                        pub retry: iw_param,
                        pub encoding: iw_point,
                        pub power: iw_param,
                        pub qual: iw_quality,
                        pub ap_addr: sockaddr,
                        pub addr: sockaddr,
                        pub param: iw_param,
                        pub data: iw_point,
                    }

                    pub struct iw_event 
                    {
                        pub len: __u16,
                        pub cmd: __u16,
                        pub u: iwreq_data,
                    }

                    pub union __c_anonymous_iwreq 
                    {
                        pub ifrn_name: [c_char; IFNAMSIZ],
                    }

                    pub struct iwreq 
                    {
                        pub ifr_ifrn: __c_anonymous_iwreq,
                        pub u: iwreq_data,
                    }
                    
                    pub union __c_anonymous_ptp_perout_request_1 
                    {
                        pub start: ptp_clock_time,
                        pub phase: ptp_clock_time,
                    }

                    pub union __c_anonymous_ptp_perout_request_2 
                    {
                        pub on: ptp_clock_time,
                        pub rsv: [c_uint; 4],
                    }

                    pub struct ptp_perout_request 
                    {
                        pub anonymous_1: __c_anonymous_ptp_perout_request_1,
                        pub period: ptp_clock_time,
                        pub index: c_uint,
                        pub flags: c_uint,
                        pub anonymous_2: __c_anonymous_ptp_perout_request_2,
                    }
                    
                    pub struct xsk_tx_metadata 
                    {
                        pub flags: __u64,
                        pub xsk_tx_metadata_union: __c_anonymous_xsk_tx_metadata_union,
                    }

                    pub union __c_anonymous_xsk_tx_metadata_union 
                    {
                        pub request: xsk_tx_metadata_request,
                        pub completion: xsk_tx_metadata_completion,
                    }
                }

                impl ::fmt::Debug for input_id
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        write!(f, "{:?}", self.bustype )
                    }
                } 

                impl ::fmt::Debug for __c_anonymous_ifr_ifru
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.ifru_newname ) }
                    }
                }
                
                impl ::fmt::Debug for __c_anonymous_ifc_ifcu
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.ifcu_buf ) }
                    }
                }
                
                impl ::fmt::Debug for tpacket_hdr_v1
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.block_status ) }
                    }
                }
                
                impl ::fmt::Debug for tpacket_bd_header_u
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.bh1 ) }
                    }
                }
                
                impl ::fmt::Debug for iwreq_data
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.name ) }
                    }
                }
                
                impl ::fmt::Debug for __c_anonymous_iwreq
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.ifrn_name ) }
                    }
                }
                
                impl ::fmt::Debug for __c_anonymous_ptp_perout_request_1
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.start ) }
                    }
                }
                
                impl ::fmt::Debug for ptp_clock_time
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.sec ) }
                    }
                }
                
                impl ::fmt::Debug for __c_anonymous_ptp_perout_request_2
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.on ) }
                    }
                }
                
                impl ::fmt::Debug for xsk_tx_metadata_request
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.csum_start ) }
                    }
                }
                
                impl ::fmt::Debug for __c_anonymous_xsk_tx_metadata_union
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result
                    {
                        unsafe { write!(f, "{:?}", self.request ) }
                    }
                }
                
                impl PartialEq for input_id
                {
                    fn eq(&self, other: &input_id) -> bool
                    {
                        self.bustype == other.bustype
                    }
                }

                impl Eq for input_id {}

                impl ::hash::Hash for input_id
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                    {
                        self.bustype.hash(state);
                    }
                }

                
                impl PartialEq for sockaddr_nl
                {
                    fn eq(&self, other: &sockaddr_nl) -> bool
                    {
                        self.nl_family == other.nl_family
                        && self.nl_pid == other.nl_pid
                        && self.nl_groups == other.nl_groups
                    }
                }

                impl Eq for sockaddr_nl {}

                impl ::hash::Hash for sockaddr_nl
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                    {
                        self.nl_family.hash(state);
                        self.nl_pid.hash(state);
                        self.nl_groups.hash(state);
                    }
                }

                impl PartialEq for dirent
                {
                    fn eq(&self, other: &dirent) -> bool
                    {
                        self.d_ino == other.d_ino
                        && self.d_off == other.d_off
                        && self.d_reclen == other.d_reclen
                        && self.d_type == other.d_type
                        && self
                        .d_name
                        .iter()
                        .zip(other.d_name.iter())
                        .all(|(a, b)| a == b)
                    }
                }

                impl Eq for dirent {}

                impl ::hash::Hash for dirent
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                    {
                        self.d_ino.hash(state);
                        self.d_off.hash(state);
                        self.d_reclen.hash(state);
                        self.d_type.hash(state);
                        self.d_name.hash(state);
                    }
                }

                impl PartialEq for dirent64
                {
                    fn eq(&self, other: &dirent64) -> bool
                    {
                        self.d_ino == other.d_ino
                        && self.d_off == other.d_off
                        && self.d_reclen == other.d_reclen
                        && self.d_type == other.d_type
                        && self
                        .d_name
                        .iter()
                        .zip(other.d_name.iter())
                        .all(|(a, b)| a == b)
                    }
                }

                impl Eq for dirent64 {}

                impl ::hash::Hash for dirent64 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.d_ino.hash(state);
                        self.d_off.hash(state);
                        self.d_reclen.hash(state);
                        self.d_type.hash(state);
                        self.d_name.hash(state);
                    }
                }

                impl PartialEq for pthread_cond_t 
                {
                    fn eq(&self, other: &pthread_cond_t) -> bool 
                    {
                        self.size.iter().zip(other.size.iter()).all(|(a, b)| a == b)
                    }
                }

                impl Eq for pthread_cond_t {}

                impl ::hash::Hash for pthread_cond_t 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.size.hash(state);
                    }
                }

                impl PartialEq for pthread_mutex_t 
                {
                    fn eq(&self, other: &pthread_mutex_t) -> bool 
                    {
                        self.size.iter().zip(other.size.iter()).all(|(a, b)| a == b)
                    }
                }

                impl Eq for pthread_mutex_t {}

                impl ::hash::Hash for pthread_mutex_t 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.size.hash(state);
                    }
                }

                impl PartialEq for pthread_rwlock_t
                {
                    fn eq(&self, other: &pthread_rwlock_t) -> bool
                    {
                        self.size.iter().zip(other.size.iter()).all(|(a, b)| a == b)
                    }
                }

                impl Eq for pthread_rwlock_t {}

                impl ::hash::Hash for pthread_rwlock_t 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.size.hash(state);
                    }
                }

                impl PartialEq for pthread_barrier_t 
                {
                    fn eq(&self, other: &pthread_barrier_t) -> bool 
                    {
                        self.size.iter().zip(other.size.iter()).all(|(a, b)| a == b)
                    }
                }

                impl Eq for pthread_barrier_t {}

                impl ::hash::Hash for pthread_barrier_t 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.size.hash(state);
                    }
                }

                impl PartialEq for sockaddr_alg 
                {
                    fn eq(&self, other: &sockaddr_alg) -> bool 
                    {
                        self.salg_family == other.salg_family
                        && self
                        .salg_type
                        .iter()
                        .zip(other.salg_type.iter())
                        .all(|(a, b)| a == b)
                        && self.salg_feat == other.salg_feat
                        && self.salg_mask == other.salg_mask
                        && self
                        .salg_name
                        .iter()
                        .zip(other.salg_name.iter())
                        .all(|(a, b)| a == b)
                    }
                }

                impl Eq for sockaddr_alg {}

                impl ::hash::Hash for sockaddr_alg 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.salg_family.hash(state);
                        self.salg_type.hash(state);
                        self.salg_feat.hash(state);
                        self.salg_mask.hash(state);
                        self.salg_name.hash(state);
                    }
                }

                impl PartialEq for uinput_setup 
                {
                    fn eq(&self, other: &uinput_setup) -> bool 
                    {
                        self.id == other.id
                        && self.name[..] == other.name[..]
                        && self.ff_effects_max == other.ff_effects_max
                    }
                }

                impl Eq for uinput_setup {}

                impl ::hash::Hash for uinput_setup 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) {
                        self.id.hash(state);
                        self.name.hash(state);
                        self.ff_effects_max.hash(state);
                    }
                }

                impl PartialEq for uinput_user_dev 
                {
                    fn eq(&self, other: &uinput_user_dev) -> bool 
                    {
                        self.name[..] == other.name[..]
                        && self.id == other.id
                        && self.ff_effects_max == other.ff_effects_max
                        && self.absmax[..] == other.absmax[..]
                        && self.absmin[..] == other.absmin[..]
                        && self.absfuzz[..] == other.absfuzz[..]
                        && self.absflat[..] == other.absflat[..]
                    }
                }

                impl Eq for uinput_user_dev {}

                impl ::hash::Hash for uinput_user_dev 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.name.hash(state);
                        self.id.hash(state);
                        self.ff_effects_max.hash(state);
                        self.absmax.hash(state);
                        self.absmin.hash(state);
                        self.absfuzz.hash(state);
                        self.absflat.hash(state);
                    }
                }

                impl PartialEq for mq_attr 
                {
                    fn eq(&self, other: &mq_attr) -> bool 
                    {
                        self.mq_flags == other.mq_flags
                            && self.mq_maxmsg == other.mq_maxmsg
                            && self.mq_msgsize == other.mq_msgsize
                            && self.mq_curmsgs == other.mq_curmsgs
                    }
                }

                impl Eq for mq_attr {}

                impl ::hash::Hash for mq_attr 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.mq_flags.hash(state);
                        self.mq_maxmsg.hash(state);
                        self.mq_msgsize.hash(state);
                        self.mq_curmsgs.hash(state);
                    }
                }

                impl PartialEq for hwtstamp_config 
                {
                    fn eq(&self, other: &hwtstamp_config) -> bool 
                    {
                        self.flags == other.flags
                        && self.tx_type == other.tx_type
                        && self.rx_filter == other.rx_filter
                    }
                }

                impl Eq for hwtstamp_config {}

                impl ::hash::Hash for hwtstamp_config 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.flags.hash(state);
                        self.tx_type.hash(state);
                        self.rx_filter.hash(state);
                    }
                }

                impl PartialEq for sched_attr 
                {
                    fn eq(&self, other: &sched_attr) -> bool 
                    {
                        self.size == other.size
                        && self.sched_policy == other.sched_policy
                        && self.sched_flags == other.sched_flags
                        && self.sched_nice == other.sched_nice
                        && self.sched_priority == other.sched_priority
                        && self.sched_runtime == other.sched_runtime
                        && self.sched_deadline == other.sched_deadline
                        && self.sched_period == other.sched_period
                    }
                }

                impl Eq for sched_attr {}

                impl ::hash::Hash for sched_attr 
                {
                    fn hash<H: ::hash::Hasher>(&self, state: &mut H) 
                    {
                        self.size.hash(state);
                        self.sched_policy.hash(state);
                        self.sched_flags.hash(state);
                        self.sched_nice.hash(state);
                        self.sched_priority.hash(state);
                        self.sched_runtime.hash(state);
                        self.sched_deadline.hash(state);
                        self.sched_period.hash(state);
                    }
                }

                cfg_if! 
                {
                    if #[cfg(any
                    (
                        target_env = "gnu",
                        target_env = "musl",
                        target_env = "ohos"
                    ))] {
                        pub const ABDAY_1: nl_item = 0x20000;
                        pub const ABDAY_2: nl_item = 0x20001;
                        pub const ABDAY_3: nl_item = 0x20002;
                        pub const ABDAY_4: nl_item = 0x20003;
                        pub const ABDAY_5: nl_item = 0x20004;
                        pub const ABDAY_6: nl_item = 0x20005;
                        pub const ABDAY_7: nl_item = 0x20006;

                        pub const DAY_1: nl_item = 0x20007;
                        pub const DAY_2: nl_item = 0x20008;
                        pub const DAY_3: nl_item = 0x20009;
                        pub const DAY_4: nl_item = 0x2000A;
                        pub const DAY_5: nl_item = 0x2000B;
                        pub const DAY_6: nl_item = 0x2000C;
                        pub const DAY_7: nl_item = 0x2000D;

                        pub const ABMON_1: nl_item = 0x2000E;
                        pub const ABMON_2: nl_item = 0x2000F;
                        pub const ABMON_3: nl_item = 0x20010;
                        pub const ABMON_4: nl_item = 0x20011;
                        pub const ABMON_5: nl_item = 0x20012;
                        pub const ABMON_6: nl_item = 0x20013;
                        pub const ABMON_7: nl_item = 0x20014;
                        pub const ABMON_8: nl_item = 0x20015;
                        pub const ABMON_9: nl_item = 0x20016;
                        pub const ABMON_10: nl_item = 0x20017;
                        pub const ABMON_11: nl_item = 0x20018;
                        pub const ABMON_12: nl_item = 0x20019;

                        pub const MON_1: nl_item = 0x2001A;
                        pub const MON_2: nl_item = 0x2001B;
                        pub const MON_3: nl_item = 0x2001C;
                        pub const MON_4: nl_item = 0x2001D;
                        pub const MON_5: nl_item = 0x2001E;
                        pub const MON_6: nl_item = 0x2001F;
                        pub const MON_7: nl_item = 0x20020;
                        pub const MON_8: nl_item = 0x20021;
                        pub const MON_9: nl_item = 0x20022;
                        pub const MON_10: nl_item = 0x20023;
                        pub const MON_11: nl_item = 0x20024;
                        pub const MON_12: nl_item = 0x20025;

                        pub const AM_STR: nl_item = 0x20026;
                        pub const PM_STR: nl_item = 0x20027;

                        pub const D_T_FMT: nl_item = 0x20028;
                        pub const D_FMT: nl_item = 0x20029;
                        pub const T_FMT: nl_item = 0x2002A;
                        pub const T_FMT_AMPM: nl_item = 0x2002B;

                        pub const ERA: nl_item = 0x2002C;
                        pub const ERA_D_FMT: nl_item = 0x2002E;
                        pub const ALT_DIGITS: nl_item = 0x2002F;
                        pub const ERA_D_T_FMT: nl_item = 0x20030;
                        pub const ERA_T_FMT: nl_item = 0x20031;

                        pub const CODESET: nl_item = 14;
                        pub const CRNCYSTR: nl_item = 0x4000F;
                        pub const RADIXCHAR: nl_item = 0x10000;
                        pub const THOUSEP: nl_item = 0x10001;
                        pub const YESEXPR: nl_item = 0x50000;
                        pub const NOEXPR: nl_item = 0x50001;
                        pub const YESSTR: nl_item = 0x50002;
                        pub const NOSTR: nl_item = 0x50003;
                    }
                }

                pub const RUSAGE_CHILDREN: c_int = -1;
                pub const L_tmpnam: c_uint = 20;
                pub const _PC_LINK_MAX: c_int = 0;
                pub const _PC_MAX_CANON: c_int = 1;
                pub const _PC_MAX_INPUT: c_int = 2;
                pub const _PC_NAME_MAX: c_int = 3;
                pub const _PC_PATH_MAX: c_int = 4;
                pub const _PC_PIPE_BUF: c_int = 5;
                pub const _PC_CHOWN_RESTRICTED: c_int = 6;
                pub const _PC_NO_TRUNC: c_int = 7;
                pub const _PC_VDISABLE: c_int = 8;
                pub const _PC_SYNC_IO: c_int = 9;
                pub const _PC_ASYNC_IO: c_int = 10;
                pub const _PC_PRIO_IO: c_int = 11;
                pub const _PC_SOCK_MAXBUF: c_int = 12;
                pub const _PC_FILESIZEBITS: c_int = 13;
                pub const _PC_REC_INCR_XFER_SIZE: c_int = 14;
                pub const _PC_REC_MAX_XFER_SIZE: c_int = 15;
                pub const _PC_REC_MIN_XFER_SIZE: c_int = 16;
                pub const _PC_REC_XFER_ALIGN: c_int = 17;
                pub const _PC_ALLOC_SIZE_MIN: c_int = 18;
                pub const _PC_SYMLINK_MAX: c_int = 19;
                pub const _PC_2_SYMLINKS: c_int = 20;

                pub const MS_NOUSER: c_ulong = 0xffffffff80000000;

                pub const _SC_ARG_MAX: c_int = 0;
                pub const _SC_CHILD_MAX: c_int = 1;
                pub const _SC_CLK_TCK: c_int = 2;
                pub const _SC_NGROUPS_MAX: c_int = 3;
                pub const _SC_OPEN_MAX: c_int = 4;
                pub const _SC_STREAM_MAX: c_int = 5;
                pub const _SC_TZNAME_MAX: c_int = 6;
                pub const _SC_JOB_CONTROL: c_int = 7;
                pub const _SC_SAVED_IDS: c_int = 8;
                pub const _SC_REALTIME_SIGNALS: c_int = 9;
                pub const _SC_PRIORITY_SCHEDULING: c_int = 10;
                pub const _SC_TIMERS: c_int = 11;
                pub const _SC_ASYNCHRONOUS_IO: c_int = 12;
                pub const _SC_PRIORITIZED_IO: c_int = 13;
                pub const _SC_SYNCHRONIZED_IO: c_int = 14;
                pub const _SC_FSYNC: c_int = 15;
                pub const _SC_MAPPED_FILES: c_int = 16;
                pub const _SC_MEMLOCK: c_int = 17;
                pub const _SC_MEMLOCK_RANGE: c_int = 18;
                pub const _SC_MEMORY_PROTECTION: c_int = 19;
                pub const _SC_MESSAGE_PASSING: c_int = 20;
                pub const _SC_SEMAPHORES: c_int = 21;
                pub const _SC_SHARED_MEMORY_OBJECTS: c_int = 22;
                pub const _SC_AIO_LISTIO_MAX: c_int = 23;
                pub const _SC_AIO_MAX: c_int = 24;
                pub const _SC_AIO_PRIO_DELTA_MAX: c_int = 25;
                pub const _SC_DELAYTIMER_MAX: c_int = 26;
                pub const _SC_MQ_OPEN_MAX: c_int = 27;
                pub const _SC_MQ_PRIO_MAX: c_int = 28;
                pub const _SC_VERSION: c_int = 29;
                pub const _SC_PAGESIZE: c_int = 30;
                pub const _SC_PAGE_SIZE: c_int = _SC_PAGESIZE;
                pub const _SC_RTSIG_MAX: c_int = 31;
                pub const _SC_SEM_NSEMS_MAX: c_int = 32;
                pub const _SC_SEM_VALUE_MAX: c_int = 33;
                pub const _SC_SIGQUEUE_MAX: c_int = 34;
                pub const _SC_TIMER_MAX: c_int = 35;
                pub const _SC_BC_BASE_MAX: c_int = 36;
                pub const _SC_BC_DIM_MAX: c_int = 37;
                pub const _SC_BC_SCALE_MAX: c_int = 38;
                pub const _SC_BC_STRING_MAX: c_int = 39;
                pub const _SC_COLL_WEIGHTS_MAX: c_int = 40;
                pub const _SC_EXPR_NEST_MAX: c_int = 42;
                pub const _SC_LINE_MAX: c_int = 43;
                pub const _SC_RE_DUP_MAX: c_int = 44;
                pub const _SC_2_VERSION: c_int = 46;
                pub const _SC_2_C_BIND: c_int = 47;
                pub const _SC_2_C_DEV: c_int = 48;
                pub const _SC_2_FORT_DEV: c_int = 49;
                pub const _SC_2_FORT_RUN: c_int = 50;
                pub const _SC_2_SW_DEV: c_int = 51;
                pub const _SC_2_LOCALEDEF: c_int = 52;
                pub const _SC_UIO_MAXIOV: c_int = 60;
                pub const _SC_IOV_MAX: c_int = 60;
                pub const _SC_THREADS: c_int = 67;
                pub const _SC_THREAD_SAFE_FUNCTIONS: c_int = 68;
                pub const _SC_GETGR_R_SIZE_MAX: c_int = 69;
                pub const _SC_GETPW_R_SIZE_MAX: c_int = 70;
                pub const _SC_LOGIN_NAME_MAX: c_int = 71;
                pub const _SC_TTY_NAME_MAX: c_int = 72;
                pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: c_int = 73;
                pub const _SC_THREAD_KEYS_MAX: c_int = 74;
                pub const _SC_THREAD_STACK_MIN: c_int = 75;
                pub const _SC_THREAD_THREADS_MAX: c_int = 76;
                pub const _SC_THREAD_ATTR_STACKADDR: c_int = 77;
                pub const _SC_THREAD_ATTR_STACKSIZE: c_int = 78;
                pub const _SC_THREAD_PRIORITY_SCHEDULING: c_int = 79;
                pub const _SC_THREAD_PRIO_INHERIT: c_int = 80;
                pub const _SC_THREAD_PRIO_PROTECT: c_int = 81;
                pub const _SC_THREAD_PROCESS_SHARED: c_int = 82;
                pub const _SC_NPROCESSORS_CONF: c_int = 83;
                pub const _SC_NPROCESSORS_ONLN: c_int = 84;
                pub const _SC_PHYS_PAGES: c_int = 85;
                pub const _SC_AVPHYS_PAGES: c_int = 86;
                pub const _SC_ATEXIT_MAX: c_int = 87;
                pub const _SC_PASS_MAX: c_int = 88;
                pub const _SC_XOPEN_VERSION: c_int = 89;
                pub const _SC_XOPEN_XCU_VERSION: c_int = 90;
                pub const _SC_XOPEN_UNIX: c_int = 91;
                pub const _SC_XOPEN_CRYPT: c_int = 92;
                pub const _SC_XOPEN_ENH_I18N: c_int = 93;
                pub const _SC_XOPEN_SHM: c_int = 94;
                pub const _SC_2_CHAR_TERM: c_int = 95;
                pub const _SC_2_UPE: c_int = 97;
                pub const _SC_XOPEN_XPG2: c_int = 98;
                pub const _SC_XOPEN_XPG3: c_int = 99;
                pub const _SC_XOPEN_XPG4: c_int = 100;
                pub const _SC_NZERO: c_int = 109;
                pub const _SC_XBS5_ILP32_OFF32: c_int = 125;
                pub const _SC_XBS5_ILP32_OFFBIG: c_int = 126;
                pub const _SC_XBS5_LP64_OFF64: c_int = 127;
                pub const _SC_XBS5_LPBIG_OFFBIG: c_int = 128;
                pub const _SC_XOPEN_LEGACY: c_int = 129;
                pub const _SC_XOPEN_REALTIME: c_int = 130;
                pub const _SC_XOPEN_REALTIME_THREADS: c_int = 131;
                pub const _SC_ADVISORY_INFO: c_int = 132;
                pub const _SC_BARRIERS: c_int = 133;
                pub const _SC_CLOCK_SELECTION: c_int = 137;
                pub const _SC_CPUTIME: c_int = 138;
                pub const _SC_THREAD_CPUTIME: c_int = 139;
                pub const _SC_MONOTONIC_CLOCK: c_int = 149;
                pub const _SC_READER_WRITER_LOCKS: c_int = 153;
                pub const _SC_SPIN_LOCKS: c_int = 154;
                pub const _SC_REGEXP: c_int = 155;
                pub const _SC_SHELL: c_int = 157;
                pub const _SC_SPAWN: c_int = 159;
                pub const _SC_SPORADIC_SERVER: c_int = 160;
                pub const _SC_THREAD_SPORADIC_SERVER: c_int = 161;
                pub const _SC_TIMEOUTS: c_int = 164;
                pub const _SC_TYPED_MEMORY_OBJECTS: c_int = 165;
                pub const _SC_2_PBS: c_int = 168;
                pub const _SC_2_PBS_ACCOUNTING: c_int = 169;
                pub const _SC_2_PBS_LOCATE: c_int = 170;
                pub const _SC_2_PBS_MESSAGE: c_int = 171;
                pub const _SC_2_PBS_TRACK: c_int = 172;
                pub const _SC_SYMLOOP_MAX: c_int = 173;
                pub const _SC_STREAMS: c_int = 174;
                pub const _SC_2_PBS_CHECKPOINT: c_int = 175;
                pub const _SC_V6_ILP32_OFF32: c_int = 176;
                pub const _SC_V6_ILP32_OFFBIG: c_int = 177;
                pub const _SC_V6_LP64_OFF64: c_int = 178;
                pub const _SC_V6_LPBIG_OFFBIG: c_int = 179;
                pub const _SC_HOST_NAME_MAX: c_int = 180;
                pub const _SC_TRACE: c_int = 181;
                pub const _SC_TRACE_EVENT_FILTER: c_int = 182;
                pub const _SC_TRACE_INHERIT: c_int = 183;
                pub const _SC_TRACE_LOG: c_int = 184;
                pub const _SC_IPV6: c_int = 235;
                pub const _SC_RAW_SOCKETS: c_int = 236;
                pub const _SC_V7_ILP32_OFF32: c_int = 237;
                pub const _SC_V7_ILP32_OFFBIG: c_int = 238;
                pub const _SC_V7_LP64_OFF64: c_int = 239;
                pub const _SC_V7_LPBIG_OFFBIG: c_int = 240;
                pub const _SC_SS_REPL_MAX: c_int = 241;
                pub const _SC_TRACE_EVENT_NAME_MAX: c_int = 242;
                pub const _SC_TRACE_NAME_MAX: c_int = 243;
                pub const _SC_TRACE_SYS_MAX: c_int = 244;
                pub const _SC_TRACE_USER_EVENT_MAX: c_int = 245;
                pub const _SC_XOPEN_STREAMS: c_int = 246;
                pub const _SC_THREAD_ROBUST_PRIO_INHERIT: c_int = 247;
                pub const _SC_THREAD_ROBUST_PRIO_PROTECT: c_int = 248;

                pub const _CS_PATH: c_int = 0;
                pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: c_int = 1;
                pub const _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS: c_int = 4;
                pub const _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS: c_int = 5;
                pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: c_int = 1116;
                pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: c_int = 1117;
                pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: c_int = 1118;
                pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: c_int = 1119;
                pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: c_int = 1120;
                pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: c_int = 1121;
                pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: c_int = 1122;
                pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: c_int = 1123;
                pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: c_int = 1124;
                pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: c_int = 1125;
                pub const _CS_POSIX_V6_LP64_OFF64_LIBS: c_int = 1126;
                pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: c_int = 1127;
                pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: c_int = 1128;
                pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: c_int = 1129;
                pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: c_int = 1130;
                pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: c_int = 1131;
                pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: c_int = 1132;
                pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: c_int = 1133;
                pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: c_int = 1134;
                pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: c_int = 1135;
                pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: c_int = 1136;
                pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: c_int = 1137;
                pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: c_int = 1138;
                pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: c_int = 1139;
                pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: c_int = 1140;
                pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: c_int = 1141;
                pub const _CS_POSIX_V7_LP64_OFF64_LIBS: c_int = 1142;
                pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: c_int = 1143;
                pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: c_int = 1144;
                pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: c_int = 1145;
                pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: c_int = 1146;
                pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: c_int = 1147;

                pub const RLIM_SAVED_MAX: rlim_t = RLIM_INFINITY;
                pub const RLIM_SAVED_CUR: rlim_t = RLIM_INFINITY;
                
                pub const EI_NIDENT: usize = 16;

                pub const EI_MAG0: usize = 0;
                pub const ELFMAG0: u8 = 0x7f;
                pub const EI_MAG1: usize = 1;
                pub const ELFMAG1: u8 = b'E';
                pub const EI_MAG2: usize = 2;
                pub const ELFMAG2: u8 = b'L';
                pub const EI_MAG3: usize = 3;
                pub const ELFMAG3: u8 = b'F';
                pub const SELFMAG: usize = 4;

                pub const EI_CLASS: usize = 4;
                pub const ELFCLASSNONE: u8 = 0;
                pub const ELFCLASS32: u8 = 1;
                pub const ELFCLASS64: u8 = 2;
                pub const ELFCLASSNUM: usize = 3;

                pub const EI_DATA: usize = 5;
                pub const ELFDATANONE: u8 = 0;
                pub const ELFDATA2LSB: u8 = 1;
                pub const ELFDATA2MSB: u8 = 2;
                pub const ELFDATANUM: usize = 3;

                pub const EI_VERSION: usize = 6;

                pub const EI_OSABI: usize = 7;
                pub const ELFOSABI_NONE: u8 = 0;
                pub const ELFOSABI_SYSV: u8 = 0;
                pub const ELFOSABI_HPUX: u8 = 1;
                pub const ELFOSABI_NETBSD: u8 = 2;
                pub const ELFOSABI_GNU: u8 = 3;
                pub const ELFOSABI_LINUX: u8 = ELFOSABI_GNU;
                pub const ELFOSABI_SOLARIS: u8 = 6;
                pub const ELFOSABI_AIX: u8 = 7;
                pub const ELFOSABI_IRIX: u8 = 8;
                pub const ELFOSABI_FREEBSD: u8 = 9;
                pub const ELFOSABI_TRU64: u8 = 10;
                pub const ELFOSABI_MODESTO: u8 = 11;
                pub const ELFOSABI_OPENBSD: u8 = 12;
                pub const ELFOSABI_ARM: u8 = 97;
                pub const ELFOSABI_STANDALONE: u8 = 255;

                pub const EI_ABIVERSION: usize = 8;

                pub const EI_PAD: usize = 9;
                
                pub const ET_NONE: u16 = 0;
                pub const ET_REL: u16 = 1;
                pub const ET_EXEC: u16 = 2;
                pub const ET_DYN: u16 = 3;
                pub const ET_CORE: u16 = 4;
                pub const ET_NUM: u16 = 5;
                pub const ET_LOOS: u16 = 0xfe00;
                pub const ET_HIOS: u16 = 0xfeff;
                pub const ET_LOPROC: u16 = 0xff00;
                pub const ET_HIPROC: u16 = 0xffff;
                
                pub const EM_NONE: u16 = 0;
                pub const EM_M32: u16 = 1;
                pub const EM_SPARC: u16 = 2;
                pub const EM_386: u16 = 3;
                pub const EM_68K: u16 = 4;
                pub const EM_88K: u16 = 5;
                pub const EM_860: u16 = 7;
                pub const EM_MIPS: u16 = 8;
                pub const EM_S370: u16 = 9;
                pub const EM_MIPS_RS3_LE: u16 = 10;
                pub const EM_PARISC: u16 = 15;
                pub const EM_VPP500: u16 = 17;
                pub const EM_SPARC32PLUS: u16 = 18;
                pub const EM_960: u16 = 19;
                pub const EM_PPC: u16 = 20;
                pub const EM_PPC64: u16 = 21;
                pub const EM_S390: u16 = 22;
                pub const EM_V800: u16 = 36;
                pub const EM_FR20: u16 = 37;
                pub const EM_RH32: u16 = 38;
                pub const EM_RCE: u16 = 39;
                pub const EM_ARM: u16 = 40;
                pub const EM_FAKE_ALPHA: u16 = 41;
                pub const EM_SH: u16 = 42;
                pub const EM_SPARCV9: u16 = 43;
                pub const EM_TRICORE: u16 = 44;
                pub const EM_ARC: u16 = 45;
                pub const EM_H8_300: u16 = 46;
                pub const EM_H8_300H: u16 = 47;
                pub const EM_H8S: u16 = 48;
                pub const EM_H8_500: u16 = 49;
                pub const EM_IA_64: u16 = 50;
                pub const EM_MIPS_X: u16 = 51;
                pub const EM_COLDFIRE: u16 = 52;
                pub const EM_68HC12: u16 = 53;
                pub const EM_MMA: u16 = 54;
                pub const EM_PCP: u16 = 55;
                pub const EM_NCPU: u16 = 56;
                pub const EM_NDR1: u16 = 57;
                pub const EM_STARCORE: u16 = 58;
                pub const EM_ME16: u16 = 59;
                pub const EM_ST100: u16 = 60;
                pub const EM_TINYJ: u16 = 61;
                pub const EM_X86_64: u16 = 62;
                pub const EM_PDSP: u16 = 63;
                pub const EM_FX66: u16 = 66;
                pub const EM_ST9PLUS: u16 = 67;
                pub const EM_ST7: u16 = 68;
                pub const EM_68HC16: u16 = 69;
                pub const EM_68HC11: u16 = 70;
                pub const EM_68HC08: u16 = 71;
                pub const EM_68HC05: u16 = 72;
                pub const EM_SVX: u16 = 73;
                pub const EM_ST19: u16 = 74;
                pub const EM_VAX: u16 = 75;
                pub const EM_CRIS: u16 = 76;
                pub const EM_JAVELIN: u16 = 77;
                pub const EM_FIREPATH: u16 = 78;
                pub const EM_ZSP: u16 = 79;
                pub const EM_MMIX: u16 = 80;
                pub const EM_HUANY: u16 = 81;
                pub const EM_PRISM: u16 = 82;
                pub const EM_AVR: u16 = 83;
                pub const EM_FR30: u16 = 84;
                pub const EM_D10V: u16 = 85;
                pub const EM_D30V: u16 = 86;
                pub const EM_V850: u16 = 87;
                pub const EM_M32R: u16 = 88;
                pub const EM_MN10300: u16 = 89;
                pub const EM_MN10200: u16 = 90;
                pub const EM_PJ: u16 = 91;
                pub const EM_OPENRISC: u16 = 92;
                pub const EM_ARC_A5: u16 = 93;
                pub const EM_XTENSA: u16 = 94;
                pub const EM_AARCH64: u16 = 183;
                pub const EM_TILEPRO: u16 = 188;
                pub const EM_TILEGX: u16 = 191;
                pub const EM_ALPHA: u16 = 0x9026;
                
                pub const EV_NONE: u32 = 0;
                pub const EV_CURRENT: u32 = 1;
                pub const EV_NUM: u32 = 2;
                
                pub const PT_NULL: u32 = 0;
                pub const PT_LOAD: u32 = 1;
                pub const PT_DYNAMIC: u32 = 2;
                pub const PT_INTERP: u32 = 3;
                pub const PT_NOTE: u32 = 4;
                pub const PT_SHLIB: u32 = 5;
                pub const PT_PHDR: u32 = 6;
                pub const PT_TLS: u32 = 7;
                pub const PT_NUM: u32 = 8;
                pub const PT_LOOS: u32 = 0x60000000;
                pub const PT_GNU_EH_FRAME: u32 = 0x6474e550;
                pub const PT_GNU_STACK: u32 = 0x6474e551;
                pub const PT_GNU_RELRO: u32 = 0x6474e552;
                pub const PT_LOSUNW: u32 = 0x6ffffffa;
                pub const PT_SUNWBSS: u32 = 0x6ffffffa;
                pub const PT_SUNWSTACK: u32 = 0x6ffffffb;
                pub const PT_HISUNW: u32 = 0x6fffffff;
                pub const PT_HIOS: u32 = 0x6fffffff;
                pub const PT_LOPROC: u32 = 0x70000000;
                pub const PT_HIPROC: u32 = 0x7fffffff;
                
                pub const PF_X: u32 = 1 << 0;
                pub const PF_W: u32 = 1 << 1;
                pub const PF_R: u32 = 1 << 2;
                pub const PF_MASKOS: u32 = 0x0ff00000;
                pub const PF_MASKPROC: u32 = 0xf0000000;
                
                pub const AT_NULL: c_ulong = 0;
                pub const AT_IGNORE: c_ulong = 1;
                pub const AT_EXECFD: c_ulong = 2;
                pub const AT_PHDR: c_ulong = 3;
                pub const AT_PHENT: c_ulong = 4;
                pub const AT_PHNUM: c_ulong = 5;
                pub const AT_PAGESZ: c_ulong = 6;
                pub const AT_BASE: c_ulong = 7;
                pub const AT_FLAGS: c_ulong = 8;
                pub const AT_ENTRY: c_ulong = 9;
                pub const AT_NOTELF: c_ulong = 10;
                pub const AT_UID: c_ulong = 11;
                pub const AT_EUID: c_ulong = 12;
                pub const AT_GID: c_ulong = 13;
                pub const AT_EGID: c_ulong = 14;
                pub const AT_PLATFORM: c_ulong = 15;
                pub const AT_HWCAP: c_ulong = 16;
                pub const AT_CLKTCK: c_ulong = 17;

                pub const AT_SECURE: c_ulong = 23;
                pub const AT_BASE_PLATFORM: c_ulong = 24;
                pub const AT_RANDOM: c_ulong = 25;
                pub const AT_HWCAP2: c_ulong = 26;

                pub const AT_EXECFN: c_ulong = 31;
                
                pub const AT_SYSINFO_EHDR: c_ulong = 33;
                pub const AT_MINSIGSTKSZ: c_ulong = 51;

                pub const GLOB_ERR: c_int = 1 << 0;
                pub const GLOB_MARK: c_int = 1 << 1;
                pub const GLOB_NOSORT: c_int = 1 << 2;
                pub const GLOB_DOOFFS: c_int = 1 << 3;
                pub const GLOB_NOCHECK: c_int = 1 << 4;
                pub const GLOB_APPEND: c_int = 1 << 5;
                pub const GLOB_NOESCAPE: c_int = 1 << 6;

                pub const GLOB_NOSPACE: c_int = 1;
                pub const GLOB_ABORTED: c_int = 2;
                pub const GLOB_NOMATCH: c_int = 3;

                pub const POSIX_MADV_NORMAL: c_int = 0;
                pub const POSIX_MADV_RANDOM: c_int = 1;
                pub const POSIX_MADV_SEQUENTIAL: c_int = 2;
                pub const POSIX_MADV_WILLNEED: c_int = 3;
                pub const POSIX_SPAWN_USEVFORK: c_short = 64;
                pub const POSIX_SPAWN_SETSID: c_short = 128;

                pub const S_IEXEC: mode_t = 0o0100;
                pub const S_IWRITE: mode_t = 0o0200;
                pub const S_IREAD: mode_t = 0o0400;

                pub const F_LOCK: c_int = 1;
                pub const F_TEST: c_int = 3;
                pub const F_TLOCK: c_int = 2;
                pub const F_ULOCK: c_int = 0;

                pub const F_SEAL_FUTURE_WRITE: c_int = 0x0010;
                pub const F_SEAL_EXEC: c_int = 0x0020;

                pub const IFF_LOWER_UP: c_int = 0x10000;
                pub const IFF_DORMANT: c_int = 0x20000;
                pub const IFF_ECHO: c_int = 0x40000;
                
                pub const IFA_UNSPEC: c_ushort = 0;
                pub const IFA_ADDRESS: c_ushort = 1;
                pub const IFA_LOCAL: c_ushort = 2;
                pub const IFA_LABEL: c_ushort = 3;
                pub const IFA_BROADCAST: c_ushort = 4;
                pub const IFA_ANYCAST: c_ushort = 5;
                pub const IFA_CACHEINFO: c_ushort = 6;
                pub const IFA_MULTICAST: c_ushort = 7;
                pub const IFA_FLAGS: c_ushort = 8;

                pub const IFA_F_SECONDARY: u32 = 0x01;
                pub const IFA_F_TEMPORARY: u32 = 0x01;
                pub const IFA_F_NODAD: u32 = 0x02;
                pub const IFA_F_OPTIMISTIC: u32 = 0x04;
                pub const IFA_F_DADFAILED: u32 = 0x08;
                pub const IFA_F_HOMEADDRESS: u32 = 0x10;
                pub const IFA_F_DEPRECATED: u32 = 0x20;
                pub const IFA_F_TENTATIVE: u32 = 0x40;
                pub const IFA_F_PERMANENT: u32 = 0x80;
                pub const IFA_F_MANAGETEMPADDR: u32 = 0x100;
                pub const IFA_F_NOPREFIXROUTE: u32 = 0x200;
                pub const IFA_F_MCAUTOJOIN: u32 = 0x400;
                pub const IFA_F_STABLE_PRIVACY: u32 = 0x800;
                
                pub const RWF_HIPRI: c_int = 0x00000001;
                pub const RWF_DSYNC: c_int = 0x00000002;
                pub const RWF_SYNC: c_int = 0x00000004;
                pub const RWF_NOWAIT: c_int = 0x00000008;
                pub const RWF_APPEND: c_int = 0x00000010;
                pub const RWF_NOAPPEND: c_int = 0x00000020;
                pub const RWF_ATOMIC: c_int = 0x00000040;
                pub const RWF_DONTCACHE: c_int = 0x00000080;
                
                pub const IFLA_UNSPEC: c_ushort = 0;
                pub const IFLA_ADDRESS: c_ushort = 1;
                pub const IFLA_BROADCAST: c_ushort = 2;
                pub const IFLA_IFNAME: c_ushort = 3;
                pub const IFLA_MTU: c_ushort = 4;
                pub const IFLA_LINK: c_ushort = 5;
                pub const IFLA_QDISC: c_ushort = 6;
                pub const IFLA_STATS: c_ushort = 7;
                pub const IFLA_COST: c_ushort = 8;
                pub const IFLA_PRIORITY: c_ushort = 9;
                pub const IFLA_MASTER: c_ushort = 10;
                pub const IFLA_WIRELESS: c_ushort = 11;
                pub const IFLA_PROTINFO: c_ushort = 12;
                pub const IFLA_TXQLEN: c_ushort = 13;
                pub const IFLA_MAP: c_ushort = 14;
                pub const IFLA_WEIGHT: c_ushort = 15;
                pub const IFLA_OPERSTATE: c_ushort = 16;
                pub const IFLA_LINKMODE: c_ushort = 17;
                pub const IFLA_LINKINFO: c_ushort = 18;
                pub const IFLA_NET_NS_PID: c_ushort = 19;
                pub const IFLA_IFALIAS: c_ushort = 20;
                pub const IFLA_NUM_VF: c_ushort = 21;
                pub const IFLA_VFINFO_LIST: c_ushort = 22;
                pub const IFLA_STATS64: c_ushort = 23;
                pub const IFLA_VF_PORTS: c_ushort = 24;
                pub const IFLA_PORT_SELF: c_ushort = 25;
                pub const IFLA_AF_SPEC: c_ushort = 26;
                pub const IFLA_GROUP: c_ushort = 27;
                pub const IFLA_NET_NS_FD: c_ushort = 28;
                pub const IFLA_EXT_MASK: c_ushort = 29;
                pub const IFLA_PROMISCUITY: c_ushort = 30;
                pub const IFLA_NUM_TX_QUEUES: c_ushort = 31;
                pub const IFLA_NUM_RX_QUEUES: c_ushort = 32;
                pub const IFLA_CARRIER: c_ushort = 33;
                pub const IFLA_PHYS_PORT_ID: c_ushort = 34;
                pub const IFLA_CARRIER_CHANGES: c_ushort = 35;
                pub const IFLA_PHYS_SWITCH_ID: c_ushort = 36;
                pub const IFLA_LINK_NETNSID: c_ushort = 37;
                pub const IFLA_PHYS_PORT_NAME: c_ushort = 38;
                pub const IFLA_PROTO_DOWN: c_ushort = 39;
                pub const IFLA_GSO_MAX_SEGS: c_ushort = 40;
                pub const IFLA_GSO_MAX_SIZE: c_ushort = 41;
                pub const IFLA_PAD: c_ushort = 42;
                pub const IFLA_XDP: c_ushort = 43;
                pub const IFLA_EVENT: c_ushort = 44;
                pub const IFLA_NEW_NETNSID: c_ushort = 45;
                pub const IFLA_IF_NETNSID: c_ushort = 46;
                pub const IFLA_TARGET_NETNSID: c_ushort = IFLA_IF_NETNSID;
                pub const IFLA_CARRIER_UP_COUNT: c_ushort = 47;
                pub const IFLA_CARRIER_DOWN_COUNT: c_ushort = 48;
                pub const IFLA_NEW_IFINDEX: c_ushort = 49;
                pub const IFLA_MIN_MTU: c_ushort = 50;
                pub const IFLA_MAX_MTU: c_ushort = 51;
                pub const IFLA_PROP_LIST: c_ushort = 52;
                pub const IFLA_ALT_IFNAME: c_ushort = 53;
                pub const IFLA_PERM_ADDRESS: c_ushort = 54;
                pub const IFLA_PROTO_DOWN_REASON: c_ushort = 55;
                pub const IFLA_PARENT_DEV_NAME: c_ushort = 56;
                pub const IFLA_PARENT_DEV_BUS_NAME: c_ushort = 57;
                pub const IFLA_GRO_MAX_SIZE: c_ushort = 58;
                pub const IFLA_TSO_MAX_SIZE: c_ushort = 59;
                pub const IFLA_TSO_MAX_SEGS: c_ushort = 60;
                pub const IFLA_ALLMULTI: c_ushort = 61;

                pub const IFLA_INFO_UNSPEC: c_ushort = 0;
                pub const IFLA_INFO_KIND: c_ushort = 1;
                pub const IFLA_INFO_DATA: c_ushort = 2;
                pub const IFLA_INFO_XSTATS: c_ushort = 3;
                pub const IFLA_INFO_SLAVE_KIND: c_ushort = 4;
                pub const IFLA_INFO_SLAVE_DATA: c_ushort = 5;
                
                pub const SEEK_DATA: c_int = 3;
                pub const SEEK_HOLE: c_int = 4;

                pub const ST_RDONLY: c_ulong = 1;
                pub const ST_NOSUID: c_ulong = 2;
                pub const ST_NODEV: c_ulong = 4;
                pub const ST_NOEXEC: c_ulong = 8;
                pub const ST_SYNCHRONOUS: c_ulong = 16;
                pub const ST_MANDLOCK: c_ulong = 64;
                pub const ST_WRITE: c_ulong = 128;
                pub const ST_APPEND: c_ulong = 256;
                pub const ST_IMMUTABLE: c_ulong = 512;
                pub const ST_NOATIME: c_ulong = 1024;
                pub const ST_NODIRATIME: c_ulong = 2048;

                pub const RTLD_NEXT: *mut c_void = -1i64 as *mut c_void;
                pub const RTLD_DEFAULT: *mut c_void = 0i64 as *mut c_void;
                pub const RTLD_NODELETE: c_int = 0x1000;
                pub const RTLD_NOW: c_int = 0x2;

                pub const AT_EACCESS: c_int = 0x200;
                
                pub const MPOL_DEFAULT: c_int = 0;
                pub const MPOL_PREFERRED: c_int = 1;
                pub const MPOL_BIND: c_int = 2;
                pub const MPOL_INTERLEAVE: c_int = 3;
                pub const MPOL_LOCAL: c_int = 4;
                pub const MPOL_F_NUMA_BALANCING: c_int = 1 << 13;
                pub const MPOL_F_RELATIVE_NODES: c_int = 1 << 14;
                pub const MPOL_F_STATIC_NODES: c_int = 1 << 15;
                
                pub const MEMBARRIER_CMD_QUERY: c_int = 0;
                pub const MEMBARRIER_CMD_GLOBAL: c_int = 1 << 0;
                pub const MEMBARRIER_CMD_GLOBAL_EXPEDITED: c_int = 1 << 1;
                pub const MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED: c_int = 1 << 2;
                pub const MEMBARRIER_CMD_PRIVATE_EXPEDITED: c_int = 1 << 3;
                pub const MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED: c_int = 1 << 4;
                pub const MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE: c_int = 1 << 5;
                pub const MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE: c_int = 1 << 6;
                pub const MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ: c_int = 1 << 7;
                pub const MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ: c_int = 1 << 8;

                pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t 
                {
                    size: [0; __SIZEOF_PTHREAD_MUTEX_T],
                };

                pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t 
                {
                    size: [0; __SIZEOF_PTHREAD_COND_T],
                };

                pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t 
                {
                    size: [0; __SIZEOF_PTHREAD_RWLOCK_T],
                };


                pub const PTHREAD_BARRIER_SERIAL_THREAD: c_int = -1;
                pub const PTHREAD_ONCE_INIT: pthread_once_t = 0;
                pub const PTHREAD_MUTEX_NORMAL: c_int = 0;
                pub const PTHREAD_MUTEX_RECURSIVE: c_int = 1;
                pub const PTHREAD_MUTEX_ERRORCHECK: c_int = 2;
                pub const PTHREAD_MUTEX_DEFAULT: c_int = PTHREAD_MUTEX_NORMAL;
                pub const PTHREAD_MUTEX_STALLED: c_int = 0;
                pub const PTHREAD_MUTEX_ROBUST: c_int = 1;
                pub const PTHREAD_PRIO_NONE: c_int = 0;
                pub const PTHREAD_PRIO_INHERIT: c_int = 1;
                pub const PTHREAD_PRIO_PROTECT: c_int = 2;
                pub const PTHREAD_PROCESS_PRIVATE: c_int = 0;
                pub const PTHREAD_PROCESS_SHARED: c_int = 1;
                pub const PTHREAD_INHERIT_SCHED: c_int = 0;
                pub const PTHREAD_EXPLICIT_SCHED: c_int = 1;
                pub const __SIZEOF_PTHREAD_COND_T: usize = 48;

                pub const RENAME_NOREPLACE: c_uint = 1;
                pub const RENAME_EXCHANGE: c_uint = 2;
                pub const RENAME_WHITEOUT: c_uint = 4;
                
                #[deprecated(
                    since = "0.2.80",
                    note = "This value was increased in the newer kernel \
                            and we'll change this following upstream in the future release. \
                            See #1896 for more info."
                )]
                pub const IPPROTO_MAX: c_int = 256;
                
                pub const IPC_PRIVATE: key_t = 0;

                pub const IPC_CREAT: c_int = 0o1000;
                pub const IPC_EXCL: c_int = 0o2000;
                pub const IPC_NOWAIT: c_int = 0o4000;

                pub const IPC_RMID: c_int = 0;
                pub const IPC_SET: c_int = 1;
                pub const IPC_STAT: c_int = 2;
                pub const IPC_INFO: c_int = 3;
                pub const MSG_STAT: c_int = 11;
                pub const MSG_INFO: c_int = 12;
                pub const MSG_NOTIFICATION: c_int = 0x8000;

                pub const MSG_NOERROR: c_int = 0o10000;
                pub const MSG_EXCEPT: c_int = 0o20000;
                pub const MSG_ZEROCOPY: c_int = 0x4000000;

                pub const SEM_UNDO: c_int = 0x1000;

                pub const GETPID: c_int = 11;
                pub const GETVAL: c_int = 12;
                pub const GETALL: c_int = 13;
                pub const GETNCNT: c_int = 14;
                pub const GETZCNT: c_int = 15;
                pub const SETVAL: c_int = 16;
                pub const SETALL: c_int = 17;
                pub const SEM_STAT: c_int = 18;
                pub const SEM_INFO: c_int = 19;
                pub const SEM_STAT_ANY: c_int = 20;

                pub const SHM_R: c_int = 0o400;
                pub const SHM_W: c_int = 0o200;

                pub const SHM_RDONLY: c_int = 0o10000;
                pub const SHM_RND: c_int = 0o20000;
                pub const SHM_REMAP: c_int = 0o40000;

                pub const SHM_LOCK: c_int = 11;
                pub const SHM_UNLOCK: c_int = 12;

                pub const SHM_HUGETLB: c_int = 0o4000;
                #[cfg(not(all(target_env = "uclibc", target_arch = "mips")))]
                pub const SHM_NORESERVE: c_int = 0o10000;

                pub const QFMT_VFS_OLD: c_int = 1;
                pub const QFMT_VFS_V0: c_int = 2;
                pub const QFMT_VFS_V1: c_int = 4;

                pub const EFD_SEMAPHORE: c_int = 0x1;

                pub const LOG_NFACILITIES: c_int = 24;

                pub const SEM_FAILED: *mut sem_t = 0 as *mut sem_t;

                pub const RB_AUTOBOOT: c_int = 0x01234567u32 as i32;
                pub const RB_HALT_SYSTEM: c_int = 0xcdef0123u32 as i32;
                pub const RB_ENABLE_CAD: c_int = 0x89abcdefu32 as i32;
                pub const RB_DISABLE_CAD: c_int = 0x00000000u32 as i32;
                pub const RB_POWER_OFF: c_int = 0x4321fedcu32 as i32;
                pub const RB_SW_SUSPEND: c_int = 0xd000fce2u32 as i32;
                pub const RB_KEXEC: c_int = 0x45584543u32 as i32;

                pub const AI_PASSIVE: c_int = 0x0001;
                pub const AI_CANONNAME: c_int = 0x0002;
                pub const AI_NUMERICHOST: c_int = 0x0004;
                pub const AI_V4MAPPED: c_int = 0x0008;
                pub const AI_ALL: c_int = 0x0010;
                pub const AI_ADDRCONFIG: c_int = 0x0020;

                pub const AI_NUMERICSERV: c_int = 0x0400;

                pub const EAI_BADFLAGS: c_int = -1;
                pub const EAI_NONAME: c_int = -2;
                pub const EAI_AGAIN: c_int = -3;
                pub const EAI_FAIL: c_int = -4;
                pub const EAI_NODATA: c_int = -5;
                pub const EAI_FAMILY: c_int = -6;
                pub const EAI_SOCKTYPE: c_int = -7;
                pub const EAI_SERVICE: c_int = -8;
                pub const EAI_MEMORY: c_int = -10;
                pub const EAI_SYSTEM: c_int = -11;
                pub const EAI_OVERFLOW: c_int = -12;

                pub const NI_NUMERICHOST: c_int = 1;
                pub const NI_NUMERICSERV: c_int = 2;
                pub const NI_NOFQDN: c_int = 4;
                pub const NI_NAMEREQD: c_int = 8;
                pub const NI_DGRAM: c_int = 16;
                pub const NI_IDN: c_int = 32;

                pub const SYNC_FILE_RANGE_WAIT_BEFORE: c_uint = 1;
                pub const SYNC_FILE_RANGE_WRITE: c_uint = 2;
                pub const SYNC_FILE_RANGE_WAIT_AFTER: c_uint = 4;

                cfg_if! 
                {
                    if #[cfg(not(target_env = "uclibc"))] 
                    {
                        pub const AIO_CANCELED: c_int = 0;
                        pub const AIO_NOTCANCELED: c_int = 1;
                        pub const AIO_ALLDONE: c_int = 2;
                        pub const LIO_READ: c_int = 0;
                        pub const LIO_WRITE: c_int = 1;
                        pub const LIO_NOP: c_int = 2;
                        pub const LIO_WAIT: c_int = 0;
                        pub const LIO_NOWAIT: c_int = 1;
                        pub const RUSAGE_THREAD: c_int = 1;
                        pub const MSG_COPY: c_int = 0o40000;
                        pub const SHM_EXEC: c_int = 0o100000;
                        pub const IPV6_MULTICAST_ALL: c_int = 29;
                        pub const IPV6_ROUTER_ALERT_ISOLATE: c_int = 30;
                        pub const PACKET_MR_UNICAST: c_int = 3;
                        pub const PTRACE_EVENT_STOP: c_int = 128;
                        pub const UDP_SEGMENT: c_int = 103;
                        pub const UDP_GRO: c_int = 104;
                    }
                }

                pub const MREMAP_MAYMOVE: c_int = 1;
                pub const MREMAP_FIXED: c_int = 2;
                pub const MREMAP_DONTUNMAP: c_int = 4;
                
                const NSIO: c_uint = 0xb7;

                pub const NS_GET_USERNS: Ioctl = _IO(NSIO, 0x1);
                pub const NS_GET_PARENT: Ioctl = _IO(NSIO, 0x2);
                pub const NS_GET_NSTYPE: Ioctl = _IO(NSIO, 0x3);
                pub const NS_GET_OWNER_UID: Ioctl = _IO(NSIO, 0x4);

                pub const NS_GET_MNTNS_ID: Ioctl = _IOR::<__u64>(NSIO, 0x5);

                pub const NS_GET_PID_FROM_PIDNS: Ioctl = _IOR::<c_int>(NSIO, 0x6);
                pub const NS_GET_TGID_FROM_PIDNS: Ioctl = _IOR::<c_int>(NSIO, 0x7);
                pub const NS_GET_PID_IN_PIDNS: Ioctl = _IOR::<c_int>(NSIO, 0x8);
                pub const NS_GET_TGID_IN_PIDNS: Ioctl = _IOR::<c_int>(NSIO, 0x9);

                pub const MNT_NS_INFO_SIZE_VER0: Ioctl = 16;

                pub const NS_MNT_GET_INFO: Ioctl = _IOR::<mnt_ns_info>(NSIO, 10);
                pub const NS_MNT_GET_NEXT: Ioctl = _IOR::<mnt_ns_info>(NSIO, 11);
                pub const NS_MNT_GET_PREV: Ioctl = _IOR::<mnt_ns_info>(NSIO, 12);
                
                pub const PIDFD_NONBLOCK: c_uint = O_NONBLOCK as c_uint;
                pub const PIDFD_THREAD: c_uint = O_EXCL as c_uint;

                pub const PIDFD_SIGNAL_THREAD: c_uint = 1 << 0;
                pub const PIDFD_SIGNAL_THREAD_GROUP: c_uint = 1 << 1;
                pub const PIDFD_SIGNAL_PROCESS_GROUP: c_uint = 1 << 2;

                pub const PIDFD_INFO_PID: c_uint = 1 << 0;
                pub const PIDFD_INFO_CREDS: c_uint = 1 << 1;
                pub const PIDFD_INFO_CGROUPID: c_uint = 1 << 2;
                pub const PIDFD_INFO_EXIT: c_uint = 1 << 3;

                pub const PIDFD_INFO_SIZE_VER0: c_uint = 64;

                const PIDFS_IOCTL_MAGIC: c_uint = 0xFF;
                pub const PIDFD_GET_CGROUP_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 1);
                pub const PIDFD_GET_IPC_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 2);
                pub const PIDFD_GET_MNT_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 3);
                pub const PIDFD_GET_NET_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 4);
                pub const PIDFD_GET_PID_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 5);
                pub const PIDFD_GET_PID_FOR_CHILDREN_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 6);
                pub const PIDFD_GET_TIME_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 7);
                pub const PIDFD_GET_TIME_FOR_CHILDREN_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 8);
                pub const PIDFD_GET_USER_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 9);
                pub const PIDFD_GET_UTS_NAMESPACE: Ioctl = _IO(PIDFS_IOCTL_MAGIC, 10);
                pub const PIDFD_GET_INFO: Ioctl = _IOWR::<pidfd_info>(PIDFS_IOCTL_MAGIC, 11);
                
                pub const PR_SET_PDEATHSIG: c_int = 1;
                pub const PR_GET_PDEATHSIG: c_int = 2;

                pub const PR_GET_DUMPABLE: c_int = 3;
                pub const PR_SET_DUMPABLE: c_int = 4;

                pub const PR_GET_UNALIGN: c_int = 5;
                pub const PR_SET_UNALIGN: c_int = 6;
                pub const PR_UNALIGN_NOPRINT: c_int = 1;
                pub const PR_UNALIGN_SIGBUS: c_int = 2;

                pub const PR_GET_KEEPCAPS: c_int = 7;
                pub const PR_SET_KEEPCAPS: c_int = 8;

                pub const PR_GET_FPEMU: c_int = 9;
                pub const PR_SET_FPEMU: c_int = 10;
                pub const PR_FPEMU_NOPRINT: c_int = 1;
                pub const PR_FPEMU_SIGFPE: c_int = 2;

                pub const PR_GET_FPEXC: c_int = 11;
                pub const PR_SET_FPEXC: c_int = 12;
                pub const PR_FP_EXC_SW_ENABLE: c_int = 0x80;
                pub const PR_FP_EXC_DIV: c_int = 0x010000;
                pub const PR_FP_EXC_OVF: c_int = 0x020000;
                pub const PR_FP_EXC_UND: c_int = 0x040000;
                pub const PR_FP_EXC_RES: c_int = 0x080000;
                pub const PR_FP_EXC_INV: c_int = 0x100000;
                pub const PR_FP_EXC_DISABLED: c_int = 0;
                pub const PR_FP_EXC_NONRECOV: c_int = 1;
                pub const PR_FP_EXC_ASYNC: c_int = 2;
                pub const PR_FP_EXC_PRECISE: c_int = 3;

                pub const PR_GET_TIMING: c_int = 13;
                pub const PR_SET_TIMING: c_int = 14;
                pub const PR_TIMING_STATISTICAL: c_int = 0;
                pub const PR_TIMING_TIMESTAMP: c_int = 1;

                pub const PR_SET_NAME: c_int = 15;
                pub const PR_GET_NAME: c_int = 16;

                pub const PR_GET_ENDIAN: c_int = 19;
                pub const PR_SET_ENDIAN: c_int = 20;
                pub const PR_ENDIAN_BIG: c_int = 0;
                pub const PR_ENDIAN_LITTLE: c_int = 1;
                pub const PR_ENDIAN_PPC_LITTLE: c_int = 2;

                pub const PR_GET_SECCOMP: c_int = 21;
                pub const PR_SET_SECCOMP: c_int = 22;

                pub const PR_CAPBSET_READ: c_int = 23;
                pub const PR_CAPBSET_DROP: c_int = 24;

                pub const PR_GET_TSC: c_int = 25;
                pub const PR_SET_TSC: c_int = 26;
                pub const PR_TSC_ENABLE: c_int = 1;
                pub const PR_TSC_SIGSEGV: c_int = 2;

                pub const PR_GET_SECUREBITS: c_int = 27;
                pub const PR_SET_SECUREBITS: c_int = 28;

                pub const PR_SET_TIMERSLACK: c_int = 29;
                pub const PR_GET_TIMERSLACK: c_int = 30;

                pub const PR_TASK_PERF_EVENTS_DISABLE: c_int = 31;
                pub const PR_TASK_PERF_EVENTS_ENABLE: c_int = 32;

                pub const PR_MCE_KILL: c_int = 33;
                pub const PR_MCE_KILL_CLEAR: c_int = 0;
                pub const PR_MCE_KILL_SET: c_int = 1;

                pub const PR_MCE_KILL_LATE: c_int = 0;
                pub const PR_MCE_KILL_EARLY: c_int = 1;
                pub const PR_MCE_KILL_DEFAULT: c_int = 2;

                pub const PR_MCE_KILL_GET: c_int = 34;

                pub const PR_SET_MM: c_int = 35;
                pub const PR_SET_MM_START_CODE: c_int = 1;
                pub const PR_SET_MM_END_CODE: c_int = 2;
                pub const PR_SET_MM_START_DATA: c_int = 3;
                pub const PR_SET_MM_END_DATA: c_int = 4;
                pub const PR_SET_MM_START_STACK: c_int = 5;
                pub const PR_SET_MM_START_BRK: c_int = 6;
                pub const PR_SET_MM_BRK: c_int = 7;
                pub const PR_SET_MM_ARG_START: c_int = 8;
                pub const PR_SET_MM_ARG_END: c_int = 9;
                pub const PR_SET_MM_ENV_START: c_int = 10;
                pub const PR_SET_MM_ENV_END: c_int = 11;
                pub const PR_SET_MM_AUXV: c_int = 12;
                pub const PR_SET_MM_EXE_FILE: c_int = 13;
                pub const PR_SET_MM_MAP: c_int = 14;
                pub const PR_SET_MM_MAP_SIZE: c_int = 15;

                pub const PR_SET_PTRACER: c_int = 0x59616d61;
                pub const PR_SET_PTRACER_ANY: c_ulong = 0xffffffffffffffff;

                pub const PR_SET_CHILD_SUBREAPER: c_int = 36;
                pub const PR_GET_CHILD_SUBREAPER: c_int = 37;

                pub const PR_SET_NO_NEW_PRIVS: c_int = 38;
                pub const PR_GET_NO_NEW_PRIVS: c_int = 39;

                pub const PR_SET_MDWE: c_int = 65;
                pub const PR_GET_MDWE: c_int = 66;
                pub const PR_MDWE_REFUSE_EXEC_GAIN: c_uint = 1 << 0;
                pub const PR_MDWE_NO_INHERIT: c_uint = 1 << 1;

                pub const PR_GET_TID_ADDRESS: c_int = 40;

                pub const PR_SET_THP_DISABLE: c_int = 41;
                pub const PR_GET_THP_DISABLE: c_int = 42;

                pub const PR_MPX_ENABLE_MANAGEMENT: c_int = 43;
                pub const PR_MPX_DISABLE_MANAGEMENT: c_int = 44;

                pub const PR_SET_FP_MODE: c_int = 45;
                pub const PR_GET_FP_MODE: c_int = 46;
                pub const PR_FP_MODE_FR: c_int = 1 << 0;
                pub const PR_FP_MODE_FRE: c_int = 1 << 1;

                pub const PR_CAP_AMBIENT: c_int = 47;
                pub const PR_CAP_AMBIENT_IS_SET: c_int = 1;
                pub const PR_CAP_AMBIENT_RAISE: c_int = 2;
                pub const PR_CAP_AMBIENT_LOWER: c_int = 3;
                pub const PR_CAP_AMBIENT_CLEAR_ALL: c_int = 4;

                pub const PR_SET_VMA: c_int = 0x53564d41;
                pub const PR_SET_VMA_ANON_NAME: c_int = 0;

                pub const PR_SCHED_CORE: c_int = 62;
                pub const PR_SCHED_CORE_GET: c_int = 0;
                pub const PR_SCHED_CORE_CREATE: c_int = 1;
                pub const PR_SCHED_CORE_SHARE_TO: c_int = 2;
                pub const PR_SCHED_CORE_SHARE_FROM: c_int = 3;
                pub const PR_SCHED_CORE_MAX: c_int = 4;
                pub const PR_SCHED_CORE_SCOPE_THREAD: c_int = 0;
                pub const PR_SCHED_CORE_SCOPE_THREAD_GROUP: c_int = 1;
                pub const PR_SCHED_CORE_SCOPE_PROCESS_GROUP: c_int = 2;

                pub const GRND_NONBLOCK: c_uint = 0x0001;
                pub const GRND_RANDOM: c_uint = 0x0002;
                pub const GRND_INSECURE: c_uint = 0x0004;
                
                pub const SECCOMP_MODE_DISABLED: c_uint = 0;
                pub const SECCOMP_MODE_STRICT: c_uint = 1;
                pub const SECCOMP_MODE_FILTER: c_uint = 2;

                pub const SECCOMP_SET_MODE_STRICT: c_uint = 0;
                pub const SECCOMP_SET_MODE_FILTER: c_uint = 1;
                pub const SECCOMP_GET_ACTION_AVAIL: c_uint = 2;
                pub const SECCOMP_GET_NOTIF_SIZES: c_uint = 3;

                pub const SECCOMP_FILTER_FLAG_TSYNC: c_ulong = 1 << 0;
                pub const SECCOMP_FILTER_FLAG_LOG: c_ulong = 1 << 1;
                pub const SECCOMP_FILTER_FLAG_SPEC_ALLOW: c_ulong = 1 << 2;
                pub const SECCOMP_FILTER_FLAG_NEW_LISTENER: c_ulong = 1 << 3;
                pub const SECCOMP_FILTER_FLAG_TSYNC_ESRCH: c_ulong = 1 << 4;
                pub const SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV: c_ulong = 1 << 5;

                pub const SECCOMP_RET_KILL_PROCESS: c_uint = 0x80000000;
                pub const SECCOMP_RET_KILL_THREAD: c_uint = 0x00000000;
                pub const SECCOMP_RET_KILL: c_uint = SECCOMP_RET_KILL_THREAD;
                pub const SECCOMP_RET_TRAP: c_uint = 0x00030000;
                pub const SECCOMP_RET_ERRNO: c_uint = 0x00050000;
                pub const SECCOMP_RET_USER_NOTIF: c_uint = 0x7fc00000;
                pub const SECCOMP_RET_TRACE: c_uint = 0x7ff00000;
                pub const SECCOMP_RET_LOG: c_uint = 0x7ffc0000;
                pub const SECCOMP_RET_ALLOW: c_uint = 0x7fff0000;

                pub const SECCOMP_RET_ACTION_FULL: c_uint = 0xffff0000;
                pub const SECCOMP_RET_ACTION: c_uint = 0x7fff0000;
                pub const SECCOMP_RET_DATA: c_uint = 0x0000ffff;

                pub const SECCOMP_USER_NOTIF_FLAG_CONTINUE: c_ulong = 1;

                pub const SECCOMP_ADDFD_FLAG_SETFD: c_ulong = 1;
                pub const SECCOMP_ADDFD_FLAG_SEND: c_ulong = 2;

                pub const ITIMER_REAL: c_int = 0;
                pub const ITIMER_VIRTUAL: c_int = 1;
                pub const ITIMER_PROF: c_int = 2;

                pub const TFD_CLOEXEC: c_int = O_CLOEXEC;
                pub const TFD_NONBLOCK: c_int = O_NONBLOCK;
                pub const TFD_TIMER_ABSTIME: c_int = 1;
                pub const TFD_TIMER_CANCEL_ON_SET: c_int = 2;

                pub const _POSIX_VDISABLE: cc_t = 0;

                pub const FALLOC_FL_KEEP_SIZE: c_int = 0x01;
                pub const FALLOC_FL_PUNCH_HOLE: c_int = 0x02;
                pub const FALLOC_FL_COLLAPSE_RANGE: c_int = 0x08;
                pub const FALLOC_FL_ZERO_RANGE: c_int = 0x10;
                pub const FALLOC_FL_INSERT_RANGE: c_int = 0x20;
                pub const FALLOC_FL_UNSHARE_RANGE: c_int = 0x40;

                #[deprecated(
                    since = "0.2.55",
                    note = "ENOATTR is not available on Linux; use ENODATA instead"
                )]
                pub const ENOATTR: c_int = ENODATA;

                pub const SO_ORIGINAL_DST: c_int = 80;

                pub const IP_RECVFRAGSIZE: c_int = 25;

                pub const IPV6_FLOWINFO: c_int = 11;
                pub const IPV6_FLOWLABEL_MGR: c_int = 32;
                pub const IPV6_FLOWINFO_SEND: c_int = 33;
                pub const IPV6_RECVFRAGSIZE: c_int = 77;
                pub const IPV6_FREEBIND: c_int = 78;
                pub const IPV6_FLOWINFO_FLOWLABEL: c_int = 0x000fffff;
                pub const IPV6_FLOWINFO_PRIORITY: c_int = 0x0ff00000;

                pub const IPV6_RTHDR_LOOSE: c_int = 0;
                pub const IPV6_RTHDR_STRICT: c_int = 1;
                
                pub const SK_MEMINFO_RMEM_ALLOC: c_int = 0;
                pub const SK_MEMINFO_RCVBUF: c_int = 1;
                pub const SK_MEMINFO_WMEM_ALLOC: c_int = 2;
                pub const SK_MEMINFO_SNDBUF: c_int = 3;
                pub const SK_MEMINFO_FWD_ALLOC: c_int = 4;
                pub const SK_MEMINFO_WMEM_QUEUED: c_int = 5;
                pub const SK_MEMINFO_OPTMEM: c_int = 6;
                pub const SK_MEMINFO_BACKLOG: c_int = 7;
                pub const SK_MEMINFO_DROPS: c_int = 8;

                pub const IUTF8: tcflag_t = 0x00004000;
                #[cfg(not(all(target_env = "uclibc", target_arch = "mips")))]
                pub const CMSPAR: tcflag_t = 0o10000000000;

                pub const MFD_CLOEXEC: c_uint = 0x0001;
                pub const MFD_ALLOW_SEALING: c_uint = 0x0002;
                pub const MFD_HUGETLB: c_uint = 0x0004;
                pub const MFD_NOEXEC_SEAL: c_uint = 0x0008;
                pub const MFD_EXEC: c_uint = 0x0010;
                pub const MFD_HUGE_64KB: c_uint = 0x40000000;
                pub const MFD_HUGE_512KB: c_uint = 0x4c000000;
                pub const MFD_HUGE_1MB: c_uint = 0x50000000;
                pub const MFD_HUGE_2MB: c_uint = 0x54000000;
                pub const MFD_HUGE_8MB: c_uint = 0x5c000000;
                pub const MFD_HUGE_16MB: c_uint = 0x60000000;
                pub const MFD_HUGE_32MB: c_uint = 0x64000000;
                pub const MFD_HUGE_256MB: c_uint = 0x70000000;
                pub const MFD_HUGE_512MB: c_uint = 0x74000000;
                pub const MFD_HUGE_1GB: c_uint = 0x78000000;
                pub const MFD_HUGE_2GB: c_uint = 0x7c000000;
                pub const MFD_HUGE_16GB: c_uint = 0x88000000;
                pub const MFD_HUGE_MASK: c_uint = 63;
                pub const MFD_HUGE_SHIFT: c_uint = 26;
                
                pub const CLOSE_RANGE_UNSHARE: c_uint = 1 << 1;
                pub const CLOSE_RANGE_CLOEXEC: c_uint = 1 << 2;
                
                pub const SKF_AD_OFF: c_int = -0x1000;
                pub const SKF_AD_PROTOCOL: c_int = 0;
                pub const SKF_AD_PKTTYPE: c_int = 4;
                pub const SKF_AD_IFINDEX: c_int = 8;
                pub const SKF_AD_NLATTR: c_int = 12;
                pub const SKF_AD_NLATTR_NEST: c_int = 16;
                pub const SKF_AD_MARK: c_int = 20;
                pub const SKF_AD_QUEUE: c_int = 24;
                pub const SKF_AD_HATYPE: c_int = 28;
                pub const SKF_AD_RXHASH: c_int = 32;
                pub const SKF_AD_CPU: c_int = 36;
                pub const SKF_AD_ALU_XOR_X: c_int = 40;
                pub const SKF_AD_VLAN_TAG: c_int = 44;
                pub const SKF_AD_VLAN_TAG_PRESENT: c_int = 48;
                pub const SKF_AD_PAY_OFFSET: c_int = 52;
                pub const SKF_AD_RANDOM: c_int = 56;
                pub const SKF_AD_VLAN_TPID: c_int = 60;
                pub const SKF_AD_MAX: c_int = 64;
                pub const SKF_NET_OFF: c_int = -0x100000;
                pub const SKF_LL_OFF: c_int = -0x200000;
                pub const BPF_NET_OFF: c_int = SKF_NET_OFF;
                pub const BPF_LL_OFF: c_int = SKF_LL_OFF;
                pub const BPF_MEMWORDS: c_int = 16;
                pub const BPF_MAXINSNS: c_int = 4096;
                
                pub const BPF_LD: __u32 = 0x00;
                pub const BPF_LDX: __u32 = 0x01;
                pub const BPF_ST: __u32 = 0x02;
                pub const BPF_STX: __u32 = 0x03;
                pub const BPF_ALU: __u32 = 0x04;
                pub const BPF_JMP: __u32 = 0x05;
                pub const BPF_RET: __u32 = 0x06;
                pub const BPF_MISC: __u32 = 0x07;
                pub const BPF_W: __u32 = 0x00;
                pub const BPF_H: __u32 = 0x08;
                pub const BPF_B: __u32 = 0x10;
                pub const BPF_IMM: __u32 = 0x00;
                pub const BPF_ABS: __u32 = 0x20;
                pub const BPF_IND: __u32 = 0x40;
                pub const BPF_MEM: __u32 = 0x60;
                pub const BPF_LEN: __u32 = 0x80;
                pub const BPF_MSH: __u32 = 0xa0;
                pub const BPF_ADD: __u32 = 0x00;
                pub const BPF_SUB: __u32 = 0x10;
                pub const BPF_MUL: __u32 = 0x20;
                pub const BPF_DIV: __u32 = 0x30;
                pub const BPF_OR: __u32 = 0x40;
                pub const BPF_AND: __u32 = 0x50;
                pub const BPF_LSH: __u32 = 0x60;
                pub const BPF_RSH: __u32 = 0x70;
                pub const BPF_NEG: __u32 = 0x80;
                pub const BPF_MOD: __u32 = 0x90;
                pub const BPF_XOR: __u32 = 0xa0;
                pub const BPF_JA: __u32 = 0x00;
                pub const BPF_JEQ: __u32 = 0x10;
                pub const BPF_JGT: __u32 = 0x20;
                pub const BPF_JGE: __u32 = 0x30;
                pub const BPF_JSET: __u32 = 0x40;
                pub const BPF_K: __u32 = 0x00;
                pub const BPF_X: __u32 = 0x08;

                pub const BPF_A: __u32 = 0x10;
                pub const BPF_TAX: __u32 = 0x00;
                pub const BPF_TXA: __u32 = 0x80;
                
                pub const RESOLVE_NO_XDEV: __u64 = 0x01;
                pub const RESOLVE_NO_MAGICLINKS: __u64 = 0x02;
                pub const RESOLVE_NO_SYMLINKS: __u64 = 0x04;
                pub const RESOLVE_BENEATH: __u64 = 0x08;
                pub const RESOLVE_IN_ROOT: __u64 = 0x10;
                pub const RESOLVE_CACHED: __u64 = 0x20;
                
                pub const ETH_ALEN: c_int = 6;
                pub const ETH_HLEN: c_int = 14;
                pub const ETH_ZLEN: c_int = 60;
                pub const ETH_DATA_LEN: c_int = 1500;
                pub const ETH_FRAME_LEN: c_int = 1514;
                pub const ETH_FCS_LEN: c_int = 4;
                
                pub const ETH_P_LOOP: c_int = 0x0060;
                pub const ETH_P_PUP: c_int = 0x0200;
                pub const ETH_P_PUPAT: c_int = 0x0201;
                pub const ETH_P_IP: c_int = 0x0800;
                pub const ETH_P_X25: c_int = 0x0805;
                pub const ETH_P_ARP: c_int = 0x0806;
                pub const ETH_P_BPQ: c_int = 0x08FF;
                pub const ETH_P_IEEEPUP: c_int = 0x0a00;
                pub const ETH_P_IEEEPUPAT: c_int = 0x0a01;
                pub const ETH_P_BATMAN: c_int = 0x4305;
                pub const ETH_P_DEC: c_int = 0x6000;
                pub const ETH_P_DNA_DL: c_int = 0x6001;
                pub const ETH_P_DNA_RC: c_int = 0x6002;
                pub const ETH_P_DNA_RT: c_int = 0x6003;
                pub const ETH_P_LAT: c_int = 0x6004;
                pub const ETH_P_DIAG: c_int = 0x6005;
                pub const ETH_P_CUST: c_int = 0x6006;
                pub const ETH_P_SCA: c_int = 0x6007;
                pub const ETH_P_TEB: c_int = 0x6558;
                pub const ETH_P_RARP: c_int = 0x8035;
                pub const ETH_P_ATALK: c_int = 0x809B;
                pub const ETH_P_AARP: c_int = 0x80F3;
                pub const ETH_P_8021Q: c_int = 0x8100;
                pub const ETH_P_IPX: c_int = 0x8137;
                pub const ETH_P_IPV6: c_int = 0x86DD;
                pub const ETH_P_PAUSE: c_int = 0x8808;
                pub const ETH_P_SLOW: c_int = 0x8809;
                pub const ETH_P_WCCP: c_int = 0x883E;
                pub const ETH_P_MPLS_UC: c_int = 0x8847;
                pub const ETH_P_MPLS_MC: c_int = 0x8848;
                pub const ETH_P_ATMMPOA: c_int = 0x884c;
                pub const ETH_P_PPP_DISC: c_int = 0x8863;
                pub const ETH_P_PPP_SES: c_int = 0x8864;
                pub const ETH_P_LINK_CTL: c_int = 0x886c;
                pub const ETH_P_ATMFATE: c_int = 0x8884;
                pub const ETH_P_PAE: c_int = 0x888E;
                pub const ETH_P_AOE: c_int = 0x88A2;
                pub const ETH_P_8021AD: c_int = 0x88A8;
                pub const ETH_P_802_EX1: c_int = 0x88B5;
                pub const ETH_P_TIPC: c_int = 0x88CA;
                pub const ETH_P_MACSEC: c_int = 0x88E5;
                pub const ETH_P_8021AH: c_int = 0x88E7;
                pub const ETH_P_MVRP: c_int = 0x88F5;
                pub const ETH_P_1588: c_int = 0x88F7;
                pub const ETH_P_PRP: c_int = 0x88FB;
                pub const ETH_P_FCOE: c_int = 0x8906;
                pub const ETH_P_TDLS: c_int = 0x890D;
                pub const ETH_P_FIP: c_int = 0x8914;
                pub const ETH_P_80221: c_int = 0x8917;
                pub const ETH_P_LOOPBACK: c_int = 0x9000;
                pub const ETH_P_QINQ1: c_int = 0x9100;
                pub const ETH_P_QINQ2: c_int = 0x9200;
                pub const ETH_P_QINQ3: c_int = 0x9300;
                pub const ETH_P_EDSA: c_int = 0xDADA;
                pub const ETH_P_AF_IUCV: c_int = 0xFBFB;

                pub const ETH_P_802_3_MIN: c_int = 0x0600;
                
                pub const ETH_P_802_3: c_int = 0x0001;
                pub const ETH_P_AX25: c_int = 0x0002;
                pub const ETH_P_ALL: c_int = 0x0003;
                pub const ETH_P_802_2: c_int = 0x0004;
                pub const ETH_P_SNAP: c_int = 0x0005;
                pub const ETH_P_DDCMP: c_int = 0x0006;
                pub const ETH_P_WAN_PPP: c_int = 0x0007;
                pub const ETH_P_PPP_MP: c_int = 0x0008;
                pub const ETH_P_LOCALTALK: c_int = 0x0009;
                pub const ETH_P_CANFD: c_int = 0x000D;
                pub const ETH_P_PPPTALK: c_int = 0x0010;
                pub const ETH_P_TR_802_2: c_int = 0x0011;
                pub const ETH_P_MOBITEX: c_int = 0x0015;
                pub const ETH_P_CONTROL: c_int = 0x0016;
                pub const ETH_P_IRDA: c_int = 0x0017;
                pub const ETH_P_ECONET: c_int = 0x0018;
                pub const ETH_P_HDLC: c_int = 0x0019;
                pub const ETH_P_ARCNET: c_int = 0x001A;
                pub const ETH_P_DSA: c_int = 0x001B;
                pub const ETH_P_TRAILER: c_int = 0x001C;
                pub const ETH_P_PHONET: c_int = 0x00F5;
                pub const ETH_P_IEEE802154: c_int = 0x00F6;
                pub const ETH_P_CAIF: c_int = 0x00F7;

                pub const POSIX_SPAWN_RESETIDS: c_short = 0x01;
                pub const POSIX_SPAWN_SETPGROUP: c_short = 0x02;
                pub const POSIX_SPAWN_SETSIGDEF: c_short = 0x04;
                pub const POSIX_SPAWN_SETSIGMASK: c_short = 0x08;
                pub const POSIX_SPAWN_SETSCHEDPARAM: c_short = 0x10;
                pub const POSIX_SPAWN_SETSCHEDULER: c_short = 0x20;

                pub const NLMSG_NOOP: c_int = 0x1;
                pub const NLMSG_ERROR: c_int = 0x2;
                pub const NLMSG_DONE: c_int = 0x3;
                pub const NLMSG_OVERRUN: c_int = 0x4;
                pub const NLMSG_MIN_TYPE: c_int = 0x10;
                
                pub const NFNLGRP_NONE: c_int = 0;
                pub const NFNLGRP_CONNTRACK_NEW: c_int = 1;
                pub const NFNLGRP_CONNTRACK_UPDATE: c_int = 2;
                pub const NFNLGRP_CONNTRACK_DESTROY: c_int = 3;
                pub const NFNLGRP_CONNTRACK_EXP_NEW: c_int = 4;
                pub const NFNLGRP_CONNTRACK_EXP_UPDATE: c_int = 5;
                pub const NFNLGRP_CONNTRACK_EXP_DESTROY: c_int = 6;
                pub const NFNLGRP_NFTABLES: c_int = 7;
                pub const NFNLGRP_ACCT_QUOTA: c_int = 8;
                pub const NFNLGRP_NFTRACE: c_int = 9;

                pub const NFNETLINK_V0: c_int = 0;

                pub const NFNL_SUBSYS_NONE: c_int = 0;
                pub const NFNL_SUBSYS_CTNETLINK: c_int = 1;
                pub const NFNL_SUBSYS_CTNETLINK_EXP: c_int = 2;
                pub const NFNL_SUBSYS_QUEUE: c_int = 3;
                pub const NFNL_SUBSYS_ULOG: c_int = 4;
                pub const NFNL_SUBSYS_OSF: c_int = 5;
                pub const NFNL_SUBSYS_IPSET: c_int = 6;
                pub const NFNL_SUBSYS_ACCT: c_int = 7;
                pub const NFNL_SUBSYS_CTNETLINK_TIMEOUT: c_int = 8;
                pub const NFNL_SUBSYS_CTHELPER: c_int = 9;
                pub const NFNL_SUBSYS_NFTABLES: c_int = 10;
                pub const NFNL_SUBSYS_NFT_COMPAT: c_int = 11;
                pub const NFNL_SUBSYS_HOOK: c_int = 12;
                pub const NFNL_SUBSYS_COUNT: c_int = 13;

                pub const NFNL_MSG_BATCH_BEGIN: c_int = NLMSG_MIN_TYPE;
                pub const NFNL_MSG_BATCH_END: c_int = NLMSG_MIN_TYPE + 1;

                pub const NFNL_BATCH_UNSPEC: c_int = 0;
                pub const NFNL_BATCH_GENID: c_int = 1;
                
                pub const NFULNL_MSG_PACKET: c_int = 0;
                pub const NFULNL_MSG_CONFIG: c_int = 1;

                pub const NFULA_VLAN_UNSPEC: c_int = 0;
                pub const NFULA_VLAN_PROTO: c_int = 1;
                pub const NFULA_VLAN_TCI: c_int = 2;

                pub const NFULA_UNSPEC: c_int = 0;
                pub const NFULA_PACKET_HDR: c_int = 1;
                pub const NFULA_MARK: c_int = 2;
                pub const NFULA_TIMESTAMP: c_int = 3;
                pub const NFULA_IFINDEX_INDEV: c_int = 4;
                pub const NFULA_IFINDEX_OUTDEV: c_int = 5;
                pub const NFULA_IFINDEX_PHYSINDEV: c_int = 6;
                pub const NFULA_IFINDEX_PHYSOUTDEV: c_int = 7;
                pub const NFULA_HWADDR: c_int = 8;
                pub const NFULA_PAYLOAD: c_int = 9;
                pub const NFULA_PREFIX: c_int = 10;
                pub const NFULA_UID: c_int = 11;
                pub const NFULA_SEQ: c_int = 12;
                pub const NFULA_SEQ_GLOBAL: c_int = 13;
                pub const NFULA_GID: c_int = 14;
                pub const NFULA_HWTYPE: c_int = 15;
                pub const NFULA_HWHEADER: c_int = 16;
                pub const NFULA_HWLEN: c_int = 17;
                pub const NFULA_CT: c_int = 18;
                pub const NFULA_CT_INFO: c_int = 19;
                pub const NFULA_VLAN: c_int = 20;
                pub const NFULA_L2HDR: c_int = 21;

                pub const NFULNL_CFG_CMD_NONE: c_int = 0;
                pub const NFULNL_CFG_CMD_BIND: c_int = 1;
                pub const NFULNL_CFG_CMD_UNBIND: c_int = 2;
                pub const NFULNL_CFG_CMD_PF_BIND: c_int = 3;
                pub const NFULNL_CFG_CMD_PF_UNBIND: c_int = 4;

                pub const NFULA_CFG_UNSPEC: c_int = 0;
                pub const NFULA_CFG_CMD: c_int = 1;
                pub const NFULA_CFG_MODE: c_int = 2;
                pub const NFULA_CFG_NLBUFSIZ: c_int = 3;
                pub const NFULA_CFG_TIMEOUT: c_int = 4;
                pub const NFULA_CFG_QTHRESH: c_int = 5;
                pub const NFULA_CFG_FLAGS: c_int = 6;

                pub const NFULNL_COPY_NONE: c_int = 0x00;
                pub const NFULNL_COPY_META: c_int = 0x01;
                pub const NFULNL_COPY_PACKET: c_int = 0x02;

                pub const NFULNL_CFG_F_SEQ: c_int = 0x0001;
                pub const NFULNL_CFG_F_SEQ_GLOBAL: c_int = 0x0002;
                pub const NFULNL_CFG_F_CONNTRACK: c_int = 0x0004;
                
                pub const NFQNL_MSG_PACKET: c_int = 0;
                pub const NFQNL_MSG_VERDICT: c_int = 1;
                pub const NFQNL_MSG_CONFIG: c_int = 2;
                pub const NFQNL_MSG_VERDICT_BATCH: c_int = 3;

                pub const NFQA_UNSPEC: c_int = 0;
                pub const NFQA_PACKET_HDR: c_int = 1;
                pub const NFQA_VERDICT_HDR: c_int = 2;
                pub const NFQA_MARK: c_int = 3;
                pub const NFQA_TIMESTAMP: c_int = 4;
                pub const NFQA_IFINDEX_INDEV: c_int = 5;
                pub const NFQA_IFINDEX_OUTDEV: c_int = 6;
                pub const NFQA_IFINDEX_PHYSINDEV: c_int = 7;
                pub const NFQA_IFINDEX_PHYSOUTDEV: c_int = 8;
                pub const NFQA_HWADDR: c_int = 9;
                pub const NFQA_PAYLOAD: c_int = 10;
                pub const NFQA_CT: c_int = 11;
                pub const NFQA_CT_INFO: c_int = 12;
                pub const NFQA_CAP_LEN: c_int = 13;
                pub const NFQA_SKB_INFO: c_int = 14;
                pub const NFQA_EXP: c_int = 15;
                pub const NFQA_UID: c_int = 16;
                pub const NFQA_GID: c_int = 17;
                pub const NFQA_SECCTX: c_int = 18;
                pub const NFQA_VLAN: c_int = 19;
                pub const NFQA_L2HDR: c_int = 20;
                pub const NFQA_PRIORITY: c_int = 21;

                pub const NFQA_VLAN_UNSPEC: c_int = 0;
                pub const NFQA_VLAN_PROTO: c_int = 1;
                pub const NFQA_VLAN_TCI: c_int = 2;

                pub const NFQNL_CFG_CMD_NONE: c_int = 0;
                pub const NFQNL_CFG_CMD_BIND: c_int = 1;
                pub const NFQNL_CFG_CMD_UNBIND: c_int = 2;
                pub const NFQNL_CFG_CMD_PF_BIND: c_int = 3;
                pub const NFQNL_CFG_CMD_PF_UNBIND: c_int = 4;

                pub const NFQNL_COPY_NONE: c_int = 0;
                pub const NFQNL_COPY_META: c_int = 1;
                pub const NFQNL_COPY_PACKET: c_int = 2;

                pub const NFQA_CFG_UNSPEC: c_int = 0;
                pub const NFQA_CFG_CMD: c_int = 1;
                pub const NFQA_CFG_PARAMS: c_int = 2;
                pub const NFQA_CFG_QUEUE_MAXLEN: c_int = 3;
                pub const NFQA_CFG_MASK: c_int = 4;
                pub const NFQA_CFG_FLAGS: c_int = 5;

                pub const NFQA_CFG_F_FAIL_OPEN: c_int = 0x0001;
                pub const NFQA_CFG_F_CONNTRACK: c_int = 0x0002;
                pub const NFQA_CFG_F_GSO: c_int = 0x0004;
                pub const NFQA_CFG_F_UID_GID: c_int = 0x0008;
                pub const NFQA_CFG_F_SECCTX: c_int = 0x0010;
                pub const NFQA_CFG_F_MAX: c_int = 0x0020;

                pub const NFQA_SKB_CSUMNOTREADY: c_int = 0x0001;
                pub const NFQA_SKB_GSO: c_int = 0x0002;
                pub const NFQA_SKB_CSUM_NOTVERIFIED: c_int = 0x0004;
                
                pub const GENL_NAMSIZ: c_int = 16;

                pub const GENL_MIN_ID: c_int = NLMSG_MIN_TYPE;
                pub const GENL_MAX_ID: c_int = 1023;

                pub const GENL_ADMIN_PERM: c_int = 0x01;
                pub const GENL_CMD_CAP_DO: c_int = 0x02;
                pub const GENL_CMD_CAP_DUMP: c_int = 0x04;
                pub const GENL_CMD_CAP_HASPOL: c_int = 0x08;

                pub const GENL_ID_CTRL: c_int = NLMSG_MIN_TYPE;

                pub const CTRL_CMD_UNSPEC: c_int = 0;
                pub const CTRL_CMD_NEWFAMILY: c_int = 1;
                pub const CTRL_CMD_DELFAMILY: c_int = 2;
                pub const CTRL_CMD_GETFAMILY: c_int = 3;
                pub const CTRL_CMD_NEWOPS: c_int = 4;
                pub const CTRL_CMD_DELOPS: c_int = 5;
                pub const CTRL_CMD_GETOPS: c_int = 6;
                pub const CTRL_CMD_NEWMCAST_GRP: c_int = 7;
                pub const CTRL_CMD_DELMCAST_GRP: c_int = 8;
                pub const CTRL_CMD_GETMCAST_GRP: c_int = 9;

                pub const CTRL_ATTR_UNSPEC: c_int = 0;
                pub const CTRL_ATTR_FAMILY_ID: c_int = 1;
                pub const CTRL_ATTR_FAMILY_NAME: c_int = 2;
                pub const CTRL_ATTR_VERSION: c_int = 3;
                pub const CTRL_ATTR_HDRSIZE: c_int = 4;
                pub const CTRL_ATTR_MAXATTR: c_int = 5;
                pub const CTRL_ATTR_OPS: c_int = 6;
                pub const CTRL_ATTR_MCAST_GROUPS: c_int = 7;

                pub const CTRL_ATTR_OP_UNSPEC: c_int = 0;
                pub const CTRL_ATTR_OP_ID: c_int = 1;
                pub const CTRL_ATTR_OP_FLAGS: c_int = 2;

                pub const CTRL_ATTR_MCAST_GRP_UNSPEC: c_int = 0;
                pub const CTRL_ATTR_MCAST_GRP_NAME: c_int = 1;
                pub const CTRL_ATTR_MCAST_GRP_ID: c_int = 2;
                
                pub const PACKET_HOST: c_uchar = 0;
                pub const PACKET_BROADCAST: c_uchar = 1;
                pub const PACKET_MULTICAST: c_uchar = 2;
                pub const PACKET_OTHERHOST: c_uchar = 3;
                pub const PACKET_OUTGOING: c_uchar = 4;
                pub const PACKET_LOOPBACK: c_uchar = 5;
                pub const PACKET_USER: c_uchar = 6;
                pub const PACKET_KERNEL: c_uchar = 7;

                pub const PACKET_ADD_MEMBERSHIP: c_int = 1;
                pub const PACKET_DROP_MEMBERSHIP: c_int = 2;
                pub const PACKET_RX_RING: c_int = 5;
                pub const PACKET_STATISTICS: c_int = 6;
                pub const PACKET_AUXDATA: c_int = 8;
                pub const PACKET_VERSION: c_int = 10;
                pub const PACKET_RESERVE: c_int = 12;
                pub const PACKET_TX_RING: c_int = 13;
                pub const PACKET_LOSS: c_int = 14;
                pub const PACKET_TIMESTAMP: c_int = 17;
                pub const PACKET_FANOUT: c_int = 18;
                pub const PACKET_QDISC_BYPASS: c_int = 20;
                pub const PACKET_IGNORE_OUTGOING: c_int = 23;

                pub const PACKET_FANOUT_HASH: c_uint = 0;
                pub const PACKET_FANOUT_LB: c_uint = 1;
                pub const PACKET_FANOUT_CPU: c_uint = 2;
                pub const PACKET_FANOUT_ROLLOVER: c_uint = 3;
                pub const PACKET_FANOUT_RND: c_uint = 4;
                pub const PACKET_FANOUT_QM: c_uint = 5;
                pub const PACKET_FANOUT_CBPF: c_uint = 6;
                pub const PACKET_FANOUT_EBPF: c_uint = 7;
                pub const PACKET_FANOUT_FLAG_ROLLOVER: c_uint = 0x1000;
                pub const PACKET_FANOUT_FLAG_UNIQUEID: c_uint = 0x2000;
                pub const PACKET_FANOUT_FLAG_DEFRAG: c_uint = 0x8000;

                pub const PACKET_MR_MULTICAST: c_int = 0;
                pub const PACKET_MR_PROMISC: c_int = 1;
                pub const PACKET_MR_ALLMULTI: c_int = 2;

                pub const TP_STATUS_KERNEL: __u32 = 0;
                pub const TP_STATUS_USER: __u32 = 1 << 0;
                pub const TP_STATUS_COPY: __u32 = 1 << 1;
                pub const TP_STATUS_LOSING: __u32 = 1 << 2;
                pub const TP_STATUS_CSUMNOTREADY: __u32 = 1 << 3;
                pub const TP_STATUS_VLAN_VALID: __u32 = 1 << 4;
                pub const TP_STATUS_BLK_TMO: __u32 = 1 << 5;
                pub const TP_STATUS_VLAN_TPID_VALID: __u32 = 1 << 6;
                pub const TP_STATUS_CSUM_VALID: __u32 = 1 << 7;

                pub const TP_STATUS_AVAILABLE: __u32 = 0;
                pub const TP_STATUS_SEND_REQUEST: __u32 = 1 << 0;
                pub const TP_STATUS_SENDING: __u32 = 1 << 1;
                pub const TP_STATUS_WRONG_FORMAT: __u32 = 1 << 2;

                pub const TP_STATUS_TS_SOFTWARE: __u32 = 1 << 29;
                pub const TP_STATUS_TS_SYS_HARDWARE: __u32 = 1 << 30;
                pub const TP_STATUS_TS_RAW_HARDWARE: __u32 = 1 << 31;

                pub const TP_FT_REQ_FILL_RXHASH: __u32 = 1;

                pub const TPACKET_ALIGNMENT: usize = 16;

                pub const TPACKET_HDRLEN: usize = ((size_of::<tpacket_hdr>() + TPACKET_ALIGNMENT - 1)
                    & !(TPACKET_ALIGNMENT - 1))
                    + size_of::<sockaddr_ll>();
                pub const TPACKET2_HDRLEN: usize = ((size_of::<tpacket2_hdr>() + TPACKET_ALIGNMENT - 1)
                    & !(TPACKET_ALIGNMENT - 1))
                    + size_of::<sockaddr_ll>();
                pub const TPACKET3_HDRLEN: usize = ((size_of::<tpacket3_hdr>() + TPACKET_ALIGNMENT - 1)
                    & !(TPACKET_ALIGNMENT - 1))
                    + size_of::<sockaddr_ll>();
                    
                pub const NF_DROP: c_int = 0;
                pub const NF_ACCEPT: c_int = 1;
                pub const NF_STOLEN: c_int = 2;
                pub const NF_QUEUE: c_int = 3;
                pub const NF_REPEAT: c_int = 4;
                pub const NF_STOP: c_int = 5;
                pub const NF_MAX_VERDICT: c_int = NF_STOP;

                pub const NF_VERDICT_MASK: c_int = 0x000000ff;
                pub const NF_VERDICT_FLAG_QUEUE_BYPASS: c_int = 0x00008000;

                pub const NF_VERDICT_QMASK: c_uint = 0xffff0000;
                pub const NF_VERDICT_QBITS: c_int = 16;

                pub const NF_VERDICT_BITS: c_int = 16;

                pub const NF_INET_PRE_ROUTING: c_int = 0;
                pub const NF_INET_LOCAL_IN: c_int = 1;
                pub const NF_INET_FORWARD: c_int = 2;
                pub const NF_INET_LOCAL_OUT: c_int = 3;
                pub const NF_INET_POST_ROUTING: c_int = 4;
                pub const NF_INET_NUMHOOKS: c_int = 5;
                pub const NF_INET_INGRESS: c_int = NF_INET_NUMHOOKS;

                pub const NF_NETDEV_INGRESS: c_int = 0;
                pub const NF_NETDEV_EGRESS: c_int = 1;
                pub const NF_NETDEV_NUMHOOKS: c_int = 2;
                
                pub const NFPROTO_UNSPEC: c_int = 0;
                pub const NFPROTO_INET: c_int = 1;
                pub const NFPROTO_IPV4: c_int = 2;
                pub const NFPROTO_ARP: c_int = 3;
                pub const NFPROTO_NETDEV: c_int = 5;
                pub const NFPROTO_BRIDGE: c_int = 7;
                pub const NFPROTO_IPV6: c_int = 10;
                pub const NFPROTO_DECNET: c_int = 12;
                pub const NFPROTO_NUMPROTO: c_int = 13;
                
                pub const NF_ARP: c_int = 0;
                pub const NF_ARP_IN: c_int = 0;
                pub const NF_ARP_OUT: c_int = 1;
                pub const NF_ARP_FORWARD: c_int = 2;
                pub const NF_ARP_NUMHOOKS: c_int = 3;
                
                pub const NF_BR_PRE_ROUTING: c_int = 0;
                pub const NF_BR_LOCAL_IN: c_int = 1;
                pub const NF_BR_FORWARD: c_int = 2;
                pub const NF_BR_LOCAL_OUT: c_int = 3;
                pub const NF_BR_POST_ROUTING: c_int = 4;
                pub const NF_BR_BROUTING: c_int = 5;
                pub const NF_BR_NUMHOOKS: c_int = 6;

                pub const NF_BR_PRI_FIRST: c_int = INT_MIN;
                pub const NF_BR_PRI_NAT_DST_BRIDGED: c_int = -300;
                pub const NF_BR_PRI_FILTER_BRIDGED: c_int = -200;
                pub const NF_BR_PRI_BRNF: c_int = 0;
                pub const NF_BR_PRI_NAT_DST_OTHER: c_int = 100;
                pub const NF_BR_PRI_FILTER_OTHER: c_int = 200;
                pub const NF_BR_PRI_NAT_SRC: c_int = 300;
                pub const NF_BR_PRI_LAST: c_int = INT_MAX;
                
                pub const NF_IP_PRE_ROUTING: c_int = 0;
                pub const NF_IP_LOCAL_IN: c_int = 1;
                pub const NF_IP_FORWARD: c_int = 2;
                pub const NF_IP_LOCAL_OUT: c_int = 3;
                pub const NF_IP_POST_ROUTING: c_int = 4;
                pub const NF_IP_NUMHOOKS: c_int = 5;

                pub const NF_IP_PRI_FIRST: c_int = INT_MIN;
                pub const NF_IP_PRI_RAW_BEFORE_DEFRAG: c_int = -450;
                pub const NF_IP_PRI_CONNTRACK_DEFRAG: c_int = -400;
                pub const NF_IP_PRI_RAW: c_int = -300;
                pub const NF_IP_PRI_SELINUX_FIRST: c_int = -225;
                pub const NF_IP_PRI_CONNTRACK: c_int = -200;
                pub const NF_IP_PRI_MANGLE: c_int = -150;
                pub const NF_IP_PRI_NAT_DST: c_int = -100;
                pub const NF_IP_PRI_FILTER: c_int = 0;
                pub const NF_IP_PRI_SECURITY: c_int = 50;
                pub const NF_IP_PRI_NAT_SRC: c_int = 100;
                pub const NF_IP_PRI_SELINUX_LAST: c_int = 225;
                pub const NF_IP_PRI_CONNTRACK_HELPER: c_int = 300;
                pub const NF_IP_PRI_CONNTRACK_CONFIRM: c_int = INT_MAX;
                pub const NF_IP_PRI_LAST: c_int = INT_MAX;
                
                pub const NF_IP6_PRE_ROUTING: c_int = 0;
                pub const NF_IP6_LOCAL_IN: c_int = 1;
                pub const NF_IP6_FORWARD: c_int = 2;
                pub const NF_IP6_LOCAL_OUT: c_int = 3;
                pub const NF_IP6_POST_ROUTING: c_int = 4;
                pub const NF_IP6_NUMHOOKS: c_int = 5;

                pub const NF_IP6_PRI_FIRST: c_int = INT_MIN;
                pub const NF_IP6_PRI_RAW_BEFORE_DEFRAG: c_int = -450;
                pub const NF_IP6_PRI_CONNTRACK_DEFRAG: c_int = -400;
                pub const NF_IP6_PRI_RAW: c_int = -300;
                pub const NF_IP6_PRI_SELINUX_FIRST: c_int = -225;
                pub const NF_IP6_PRI_CONNTRACK: c_int = -200;
                pub const NF_IP6_PRI_MANGLE: c_int = -150;
                pub const NF_IP6_PRI_NAT_DST: c_int = -100;
                pub const NF_IP6_PRI_FILTER: c_int = 0;
                pub const NF_IP6_PRI_SECURITY: c_int = 50;
                pub const NF_IP6_PRI_NAT_SRC: c_int = 100;
                pub const NF_IP6_PRI_SELINUX_LAST: c_int = 225;
                pub const NF_IP6_PRI_CONNTRACK_HELPER: c_int = 300;
                pub const NF_IP6_PRI_LAST: c_int = INT_MAX;
                
                pub const IP6T_SO_ORIGINAL_DST: c_int = 80;

                pub const SIOCADDRT: c_ulong = 0x0000890B;
                pub const SIOCDELRT: c_ulong = 0x0000890C;
                pub const SIOCGIFNAME: c_ulong = 0x00008910;
                pub const SIOCSIFLINK: c_ulong = 0x00008911;
                pub const SIOCGIFCONF: c_ulong = 0x00008912;
                pub const SIOCGIFFLAGS: c_ulong = 0x00008913;
                pub const SIOCSIFFLAGS: c_ulong = 0x00008914;
                pub const SIOCGIFADDR: c_ulong = 0x00008915;
                pub const SIOCSIFADDR: c_ulong = 0x00008916;
                pub const SIOCGIFDSTADDR: c_ulong = 0x00008917;
                pub const SIOCSIFDSTADDR: c_ulong = 0x00008918;
                pub const SIOCGIFBRDADDR: c_ulong = 0x00008919;
                pub const SIOCSIFBRDADDR: c_ulong = 0x0000891A;
                pub const SIOCGIFNETMASK: c_ulong = 0x0000891B;
                pub const SIOCSIFNETMASK: c_ulong = 0x0000891C;
                pub const SIOCGIFMETRIC: c_ulong = 0x0000891D;
                pub const SIOCSIFMETRIC: c_ulong = 0x0000891E;
                pub const SIOCGIFMEM: c_ulong = 0x0000891F;
                pub const SIOCSIFMEM: c_ulong = 0x00008920;
                pub const SIOCGIFMTU: c_ulong = 0x00008921;
                pub const SIOCSIFMTU: c_ulong = 0x00008922;
                pub const SIOCSIFNAME: c_ulong = 0x00008923;
                pub const SIOCSIFHWADDR: c_ulong = 0x00008924;
                pub const SIOCGIFENCAP: c_ulong = 0x00008925;
                pub const SIOCSIFENCAP: c_ulong = 0x00008926;
                pub const SIOCGIFHWADDR: c_ulong = 0x00008927;
                pub const SIOCGIFSLAVE: c_ulong = 0x00008929;
                pub const SIOCSIFSLAVE: c_ulong = 0x00008930;
                pub const SIOCADDMULTI: c_ulong = 0x00008931;
                pub const SIOCDELMULTI: c_ulong = 0x00008932;
                pub const SIOCGIFINDEX: c_ulong = 0x00008933;
                pub const SIOGIFINDEX: c_ulong = SIOCGIFINDEX;
                pub const SIOCSIFPFLAGS: c_ulong = 0x00008934;
                pub const SIOCGIFPFLAGS: c_ulong = 0x00008935;
                pub const SIOCDIFADDR: c_ulong = 0x00008936;
                pub const SIOCSIFHWBROADCAST: c_ulong = 0x00008937;
                pub const SIOCGIFCOUNT: c_ulong = 0x00008938;
                pub const SIOCGIFBR: c_ulong = 0x00008940;
                pub const SIOCSIFBR: c_ulong = 0x00008941;
                pub const SIOCGIFTXQLEN: c_ulong = 0x00008942;
                pub const SIOCSIFTXQLEN: c_ulong = 0x00008943;
                pub const SIOCETHTOOL: c_ulong = 0x00008946;
                pub const SIOCGMIIPHY: c_ulong = 0x00008947;
                pub const SIOCGMIIREG: c_ulong = 0x00008948;
                pub const SIOCSMIIREG: c_ulong = 0x00008949;
                pub const SIOCWANDEV: c_ulong = 0x0000894A;
                pub const SIOCOUTQNSD: c_ulong = 0x0000894B;
                pub const SIOCGSKNS: c_ulong = 0x0000894C;
                pub const SIOCDARP: c_ulong = 0x00008953;
                pub const SIOCGARP: c_ulong = 0x00008954;
                pub const SIOCSARP: c_ulong = 0x00008955;
                pub const SIOCDRARP: c_ulong = 0x00008960;
                pub const SIOCGRARP: c_ulong = 0x00008961;
                pub const SIOCSRARP: c_ulong = 0x00008962;
                pub const SIOCGIFMAP: c_ulong = 0x00008970;
                pub const SIOCSIFMAP: c_ulong = 0x00008971;
                pub const SIOCSHWTSTAMP: c_ulong = 0x000089b0;
                pub const SIOCGHWTSTAMP: c_ulong = 0x000089b1;
                
                pub const WIRELESS_EXT: c_ulong = 0x16;

                pub const SIOCSIWCOMMIT: c_ulong = 0x8B00;
                pub const SIOCGIWNAME: c_ulong = 0x8B01;

                pub const SIOCSIWNWID: c_ulong = 0x8B02;
                pub const SIOCGIWNWID: c_ulong = 0x8B03;
                pub const SIOCSIWFREQ: c_ulong = 0x8B04;
                pub const SIOCGIWFREQ: c_ulong = 0x8B05;
                pub const SIOCSIWMODE: c_ulong = 0x8B06;
                pub const SIOCGIWMODE: c_ulong = 0x8B07;
                pub const SIOCSIWSENS: c_ulong = 0x8B08;
                pub const SIOCGIWSENS: c_ulong = 0x8B09;

                pub const SIOCSIWRANGE: c_ulong = 0x8B0A;
                pub const SIOCGIWRANGE: c_ulong = 0x8B0B;
                pub const SIOCSIWPRIV: c_ulong = 0x8B0C;
                pub const SIOCGIWPRIV: c_ulong = 0x8B0D;
                pub const SIOCSIWSTATS: c_ulong = 0x8B0E;
                pub const SIOCGIWSTATS: c_ulong = 0x8B0F;

                pub const SIOCSIWSPY: c_ulong = 0x8B10;
                pub const SIOCGIWSPY: c_ulong = 0x8B11;
                pub const SIOCSIWTHRSPY: c_ulong = 0x8B12;
                pub const SIOCGIWTHRSPY: c_ulong = 0x8B13;

                pub const SIOCSIWAP: c_ulong = 0x8B14;
                pub const SIOCGIWAP: c_ulong = 0x8B15;
                pub const SIOCGIWAPLIST: c_ulong = 0x8B17;
                pub const SIOCSIWSCAN: c_ulong = 0x8B18;
                pub const SIOCGIWSCAN: c_ulong = 0x8B19;

                pub const SIOCSIWESSID: c_ulong = 0x8B1A;
                pub const SIOCGIWESSID: c_ulong = 0x8B1B;
                pub const SIOCSIWNICKN: c_ulong = 0x8B1C;
                pub const SIOCGIWNICKN: c_ulong = 0x8B1D;

                pub const SIOCSIWRATE: c_ulong = 0x8B20;
                pub const SIOCGIWRATE: c_ulong = 0x8B21;
                pub const SIOCSIWRTS: c_ulong = 0x8B22;
                pub const SIOCGIWRTS: c_ulong = 0x8B23;
                pub const SIOCSIWFRAG: c_ulong = 0x8B24;
                pub const SIOCGIWFRAG: c_ulong = 0x8B25;
                pub const SIOCSIWTXPOW: c_ulong = 0x8B26;
                pub const SIOCGIWTXPOW: c_ulong = 0x8B27;
                pub const SIOCSIWRETRY: c_ulong = 0x8B28;
                pub const SIOCGIWRETRY: c_ulong = 0x8B29;

                pub const SIOCSIWENCODE: c_ulong = 0x8B2A;
                pub const SIOCGIWENCODE: c_ulong = 0x8B2B;

                pub const SIOCSIWPOWER: c_ulong = 0x8B2C;
                pub const SIOCGIWPOWER: c_ulong = 0x8B2D;

                pub const SIOCSIWGENIE: c_ulong = 0x8B30;
                pub const SIOCGIWGENIE: c_ulong = 0x8B31;

                pub const SIOCSIWMLME: c_ulong = 0x8B16;

                pub const SIOCSIWAUTH: c_ulong = 0x8B32;
                pub const SIOCGIWAUTH: c_ulong = 0x8B33;

                pub const SIOCSIWENCODEEXT: c_ulong = 0x8B34;
                pub const SIOCGIWENCODEEXT: c_ulong = 0x8B35;

                pub const SIOCSIWPMKSA: c_ulong = 0x8B36;

                pub const SIOCIWFIRSTPRIV: c_ulong = 0x8BE0;
                pub const SIOCIWLASTPRIV: c_ulong = 0x8BFF;

                pub const SIOCIWFIRST: c_ulong = 0x8B00;
                pub const SIOCIWLAST: c_ulong = SIOCIWLASTPRIV;

                pub const IWEVTXDROP: c_ulong = 0x8C00;
                pub const IWEVQUAL: c_ulong = 0x8C01;
                pub const IWEVCUSTOM: c_ulong = 0x8C02;
                pub const IWEVREGISTERED: c_ulong = 0x8C03;
                pub const IWEVEXPIRED: c_ulong = 0x8C04;
                pub const IWEVGENIE: c_ulong = 0x8C05;
                pub const IWEVMICHAELMICFAILURE: c_ulong = 0x8C06;
                pub const IWEVASSOCREQIE: c_ulong = 0x8C07;
                pub const IWEVASSOCRESPIE: c_ulong = 0x8C08;
                pub const IWEVPMKIDCAND: c_ulong = 0x8C09;
                pub const IWEVFIRST: c_ulong = 0x8C00;

                pub const IW_PRIV_TYPE_MASK: c_ulong = 0x7000;
                pub const IW_PRIV_TYPE_NONE: c_ulong = 0x0000;
                pub const IW_PRIV_TYPE_BYTE: c_ulong = 0x1000;
                pub const IW_PRIV_TYPE_CHAR: c_ulong = 0x2000;
                pub const IW_PRIV_TYPE_INT: c_ulong = 0x4000;
                pub const IW_PRIV_TYPE_FLOAT: c_ulong = 0x5000;
                pub const IW_PRIV_TYPE_ADDR: c_ulong = 0x6000;

                pub const IW_PRIV_SIZE_FIXED: c_ulong = 0x0800;

                pub const IW_PRIV_SIZE_MASK: c_ulong = 0x07FF;

                pub const IW_MAX_FREQUENCIES: usize = 32;
                pub const IW_MAX_BITRATES: usize = 32;
                pub const IW_MAX_TXPOWER: usize = 8;
                pub const IW_MAX_SPY: usize = 8;
                pub const IW_MAX_AP: usize = 64;
                pub const IW_ESSID_MAX_SIZE: usize = 32;

                pub const IW_MODE_AUTO: usize = 0;
                pub const IW_MODE_ADHOC: usize = 1;
                pub const IW_MODE_INFRA: usize = 2;
                pub const IW_MODE_MASTER: usize = 3;
                pub const IW_MODE_REPEAT: usize = 4;
                pub const IW_MODE_SECOND: usize = 5;
                pub const IW_MODE_MONITOR: usize = 6;
                pub const IW_MODE_MESH: usize = 7;

                pub const IW_QUAL_QUAL_UPDATED: c_ulong = 0x01;
                pub const IW_QUAL_LEVEL_UPDATED: c_ulong = 0x02;
                pub const IW_QUAL_NOISE_UPDATED: c_ulong = 0x04;
                pub const IW_QUAL_ALL_UPDATED: c_ulong = 0x07;
                pub const IW_QUAL_DBM: c_ulong = 0x08;
                pub const IW_QUAL_QUAL_INVALID: c_ulong = 0x10;
                pub const IW_QUAL_LEVEL_INVALID: c_ulong = 0x20;
                pub const IW_QUAL_NOISE_INVALID: c_ulong = 0x40;
                pub const IW_QUAL_RCPI: c_ulong = 0x80;
                pub const IW_QUAL_ALL_INVALID: c_ulong = 0x70;

                pub const IW_FREQ_AUTO: c_ulong = 0x00;
                pub const IW_FREQ_FIXED: c_ulong = 0x01;

                pub const IW_MAX_ENCODING_SIZES: usize = 8;
                pub const IW_ENCODING_TOKEN_MAX: usize = 64;

                pub const IW_ENCODE_INDEX: c_ulong = 0x00FF;
                pub const IW_ENCODE_FLAGS: c_ulong = 0xFF00;
                pub const IW_ENCODE_MODE: c_ulong = 0xF000;
                pub const IW_ENCODE_DISABLED: c_ulong = 0x8000;
                pub const IW_ENCODE_ENABLED: c_ulong = 0x0000;
                pub const IW_ENCODE_RESTRICTED: c_ulong = 0x4000;
                pub const IW_ENCODE_OPEN: c_ulong = 0x2000;
                pub const IW_ENCODE_NOKEY: c_ulong = 0x0800;
                pub const IW_ENCODE_TEMP: c_ulong = 0x0400;

                pub const IW_POWER_ON: c_ulong = 0x0000;
                pub const IW_POWER_TYPE: c_ulong = 0xF000;
                pub const IW_POWER_PERIOD: c_ulong = 0x1000;
                pub const IW_POWER_TIMEOUT: c_ulong = 0x2000;
                pub const IW_POWER_MODE: c_ulong = 0x0F00;
                pub const IW_POWER_UNICAST_R: c_ulong = 0x0100;
                pub const IW_POWER_MULTICAST_R: c_ulong = 0x0200;
                pub const IW_POWER_ALL_R: c_ulong = 0x0300;
                pub const IW_POWER_FORCE_S: c_ulong = 0x0400;
                pub const IW_POWER_REPEATER: c_ulong = 0x0800;
                pub const IW_POWER_MODIFIER: c_ulong = 0x000F;
                pub const IW_POWER_MIN: c_ulong = 0x0001;
                pub const IW_POWER_MAX: c_ulong = 0x0002;
                pub const IW_POWER_RELATIVE: c_ulong = 0x0004;

                pub const IW_TXPOW_TYPE: c_ulong = 0x00FF;
                pub const IW_TXPOW_DBM: c_ulong = 0x0000;
                pub const IW_TXPOW_MWATT: c_ulong = 0x0001;
                pub const IW_TXPOW_RELATIVE: c_ulong = 0x0002;
                pub const IW_TXPOW_RANGE: c_ulong = 0x1000;

                pub const IW_RETRY_ON: c_ulong = 0x0000;
                pub const IW_RETRY_TYPE: c_ulong = 0xF000;
                pub const IW_RETRY_LIMIT: c_ulong = 0x1000;
                pub const IW_RETRY_LIFETIME: c_ulong = 0x2000;
                pub const IW_RETRY_MODIFIER: c_ulong = 0x00FF;
                pub const IW_RETRY_MIN: c_ulong = 0x0001;
                pub const IW_RETRY_MAX: c_ulong = 0x0002;
                pub const IW_RETRY_RELATIVE: c_ulong = 0x0004;
                pub const IW_RETRY_SHORT: c_ulong = 0x0010;
                pub const IW_RETRY_LONG: c_ulong = 0x0020;

                pub const IW_SCAN_DEFAULT: c_ulong = 0x0000;
                pub const IW_SCAN_ALL_ESSID: c_ulong = 0x0001;
                pub const IW_SCAN_THIS_ESSID: c_ulong = 0x0002;
                pub const IW_SCAN_ALL_FREQ: c_ulong = 0x0004;
                pub const IW_SCAN_THIS_FREQ: c_ulong = 0x0008;
                pub const IW_SCAN_ALL_MODE: c_ulong = 0x0010;
                pub const IW_SCAN_THIS_MODE: c_ulong = 0x0020;
                pub const IW_SCAN_ALL_RATE: c_ulong = 0x0040;
                pub const IW_SCAN_THIS_RATE: c_ulong = 0x0080;

                pub const IW_SCAN_TYPE_ACTIVE: usize = 0;
                pub const IW_SCAN_TYPE_PASSIVE: usize = 1;

                pub const IW_SCAN_MAX_DATA: usize = 4096;

                pub const IW_SCAN_CAPA_NONE: c_ulong = 0x00;
                pub const IW_SCAN_CAPA_ESSID: c_ulong = 0x01;
                pub const IW_SCAN_CAPA_BSSID: c_ulong = 0x02;
                pub const IW_SCAN_CAPA_CHANNEL: c_ulong = 0x04;
                pub const IW_SCAN_CAPA_MODE: c_ulong = 0x08;
                pub const IW_SCAN_CAPA_RATE: c_ulong = 0x10;
                pub const IW_SCAN_CAPA_TYPE: c_ulong = 0x20;
                pub const IW_SCAN_CAPA_TIME: c_ulong = 0x40;

                pub const IW_CUSTOM_MAX: c_ulong = 256;

                pub const IW_GENERIC_IE_MAX: c_ulong = 1024;

                pub const IW_MLME_DEAUTH: c_ulong = 0;
                pub const IW_MLME_DISASSOC: c_ulong = 1;
                pub const IW_MLME_AUTH: c_ulong = 2;
                pub const IW_MLME_ASSOC: c_ulong = 3;

                pub const IW_AUTH_INDEX: c_ulong = 0x0FFF;
                pub const IW_AUTH_FLAGS: c_ulong = 0xF000;

                pub const IW_AUTH_WPA_VERSION: usize = 0;
                pub const IW_AUTH_CIPHER_PAIRWISE: usize = 1;
                pub const IW_AUTH_CIPHER_GROUP: usize = 2;
                pub const IW_AUTH_KEY_MGMT: usize = 3;
                pub const IW_AUTH_TKIP_COUNTERMEASURES: usize = 4;
                pub const IW_AUTH_DROP_UNENCRYPTED: usize = 5;
                pub const IW_AUTH_80211_AUTH_ALG: usize = 6;
                pub const IW_AUTH_WPA_ENABLED: usize = 7;
                pub const IW_AUTH_RX_UNENCRYPTED_EAPOL: usize = 8;
                pub const IW_AUTH_ROAMING_CONTROL: usize = 9;
                pub const IW_AUTH_PRIVACY_INVOKED: usize = 10;
                pub const IW_AUTH_CIPHER_GROUP_MGMT: usize = 11;
                pub const IW_AUTH_MFP: usize = 12;

                pub const IW_AUTH_WPA_VERSION_DISABLED: c_ulong = 0x00000001;
                pub const IW_AUTH_WPA_VERSION_WPA: c_ulong = 0x00000002;
                pub const IW_AUTH_WPA_VERSION_WPA2: c_ulong = 0x00000004;

                pub const IW_AUTH_CIPHER_NONE: c_ulong = 0x00000001;
                pub const IW_AUTH_CIPHER_WEP40: c_ulong = 0x00000002;
                pub const IW_AUTH_CIPHER_TKIP: c_ulong = 0x00000004;
                pub const IW_AUTH_CIPHER_CCMP: c_ulong = 0x00000008;
                pub const IW_AUTH_CIPHER_WEP104: c_ulong = 0x00000010;
                pub const IW_AUTH_CIPHER_AES_CMAC: c_ulong = 0x00000020;

                pub const IW_AUTH_KEY_MGMT_802_1X: usize = 1;
                pub const IW_AUTH_KEY_MGMT_PSK: usize = 2;

                pub const IW_AUTH_ALG_OPEN_SYSTEM: c_ulong = 0x00000001;
                pub const IW_AUTH_ALG_SHARED_KEY: c_ulong = 0x00000002;
                pub const IW_AUTH_ALG_LEAP: c_ulong = 0x00000004;

                pub const IW_AUTH_ROAMING_ENABLE: usize = 0;
                pub const IW_AUTH_ROAMING_DISABLE: usize = 1;

                pub const IW_AUTH_MFP_DISABLED: usize = 0;
                pub const IW_AUTH_MFP_OPTIONAL: usize = 1;
                pub const IW_AUTH_MFP_REQUIRED: usize = 2;

                pub const IW_ENCODE_SEQ_MAX_SIZE: usize = 8;

                pub const IW_ENCODE_ALG_NONE: usize = 0;
                pub const IW_ENCODE_ALG_WEP: usize = 1;
                pub const IW_ENCODE_ALG_TKIP: usize = 2;
                pub const IW_ENCODE_ALG_CCMP: usize = 3;
                pub const IW_ENCODE_ALG_PMK: usize = 4;
                pub const IW_ENCODE_ALG_AES_CMAC: usize = 5;

                pub const IW_ENCODE_EXT_TX_SEQ_VALID: c_ulong = 0x00000001;
                pub const IW_ENCODE_EXT_RX_SEQ_VALID: c_ulong = 0x00000002;
                pub const IW_ENCODE_EXT_GROUP_KEY: c_ulong = 0x00000004;
                pub const IW_ENCODE_EXT_SET_TX_KEY: c_ulong = 0x00000008;

                pub const IW_MICFAILURE_KEY_ID: c_ulong = 0x00000003;
                pub const IW_MICFAILURE_GROUP: c_ulong = 0x00000004;
                pub const IW_MICFAILURE_PAIRWISE: c_ulong = 0x00000008;
                pub const IW_MICFAILURE_STAKEY: c_ulong = 0x00000010;
                pub const IW_MICFAILURE_COUNT: c_ulong = 0x00000060;

                pub const IW_ENC_CAPA_WPA: c_ulong = 0x00000001;
                pub const IW_ENC_CAPA_WPA2: c_ulong = 0x00000002;
                pub const IW_ENC_CAPA_CIPHER_TKIP: c_ulong = 0x00000004;
                pub const IW_ENC_CAPA_CIPHER_CCMP: c_ulong = 0x00000008;
                pub const IW_ENC_CAPA_4WAY_HANDSHAKE: c_ulong = 0x00000010;

                pub const IW_EVENT_CAPA_K_0: c_ulong = 0x4000050;
                pub const IW_EVENT_CAPA_K_1: c_ulong = 0x400;

                pub const IW_PMKSA_ADD: usize = 1;
                pub const IW_PMKSA_REMOVE: usize = 2;
                pub const IW_PMKSA_FLUSH: usize = 3;

                pub const IW_PMKID_LEN: usize = 16;

                pub const IW_PMKID_CAND_PREAUTH: c_ulong = 0x00000001;

                pub const IW_EV_LCP_PK_LEN: usize = 4;

                pub const IW_EV_CHAR_PK_LEN: usize = 20;
                pub const IW_EV_UINT_PK_LEN: usize = 8;
                pub const IW_EV_FREQ_PK_LEN: usize = 12;
                pub const IW_EV_PARAM_PK_LEN: usize = 12;
                pub const IW_EV_ADDR_PK_LEN: usize = 20; 
                pub const IW_EV_QUAL_PK_LEN: usize = 8; 
                pub const IW_EV_POINT_PK_LEN: usize = 8; 

                pub const IPTOS_TOS_MASK: u8 = 0x1E;
                pub const IPTOS_PREC_MASK: u8 = 0xE0;

                pub const IPTOS_ECN_NOT_ECT: u8 = 0x00;

                pub const RTF_UP: c_ushort = 0x0001;
                pub const RTF_GATEWAY: c_ushort = 0x0002;

                pub const RTF_HOST: c_ushort = 0x0004;
                pub const RTF_REINSTATE: c_ushort = 0x0008;
                pub const RTF_DYNAMIC: c_ushort = 0x0010;
                pub const RTF_MODIFIED: c_ushort = 0x0020;
                pub const RTF_MTU: c_ushort = 0x0040;
                pub const RTF_MSS: c_ushort = RTF_MTU;
                pub const RTF_WINDOW: c_ushort = 0x0080;
                pub const RTF_IRTT: c_ushort = 0x0100;
                pub const RTF_REJECT: c_ushort = 0x0200;
                pub const RTF_STATIC: c_ushort = 0x0400;
                pub const RTF_XRESOLVE: c_ushort = 0x0800;
                pub const RTF_NOFORWARD: c_ushort = 0x1000;
                pub const RTF_THROW: c_ushort = 0x2000;
                pub const RTF_NOPMTUDISC: c_ushort = 0x4000;

                pub const RTF_DEFAULT: u32 = 0x00010000;
                pub const RTF_ALLONLINK: u32 = 0x00020000;
                pub const RTF_ADDRCONF: u32 = 0x00040000;
                pub const RTF_LINKRT: u32 = 0x00100000;
                pub const RTF_NONEXTHOP: u32 = 0x00200000;
                pub const RTF_CACHE: u32 = 0x01000000;
                pub const RTF_FLOW: u32 = 0x02000000;
                pub const RTF_POLICY: u32 = 0x04000000;

                pub const RTCF_VALVE: u32 = 0x00200000;
                pub const RTCF_MASQ: u32 = 0x00400000;
                pub const RTCF_NAT: u32 = 0x00800000;
                pub const RTCF_DOREDIRECT: u32 = 0x01000000;
                pub const RTCF_LOG: u32 = 0x02000000;
                pub const RTCF_DIRECTSRC: u32 = 0x04000000;

                pub const RTF_LOCAL: u32 = 0x80000000;
                pub const RTF_INTERFACE: u32 = 0x40000000;
                pub const RTF_MULTICAST: u32 = 0x20000000;
                pub const RTF_BROADCAST: u32 = 0x10000000;
                pub const RTF_NAT: u32 = 0x08000000;
                pub const RTF_ADDRCLASSMASK: u32 = 0xF8000000;

                pub const RT_CLASS_UNSPEC: u8 = 0;
                pub const RT_CLASS_DEFAULT: u8 = 253;
                pub const RT_CLASS_MAIN: u8 = 254;
                pub const RT_CLASS_LOCAL: u8 = 255;
                pub const RT_CLASS_MAX: u8 = 255;
                
                pub const NUD_NONE: u16 = 0x00;
                pub const NUD_INCOMPLETE: u16 = 0x01;
                pub const NUD_REACHABLE: u16 = 0x02;
                pub const NUD_STALE: u16 = 0x04;
                pub const NUD_DELAY: u16 = 0x08;
                pub const NUD_PROBE: u16 = 0x10;
                pub const NUD_FAILED: u16 = 0x20;
                pub const NUD_NOARP: u16 = 0x40;
                pub const NUD_PERMANENT: u16 = 0x80;

                pub const NTF_USE: u8 = 0x01;
                pub const NTF_SELF: u8 = 0x02;
                pub const NTF_MASTER: u8 = 0x04;
                pub const NTF_PROXY: u8 = 0x08;
                pub const NTF_ROUTER: u8 = 0x80;

                pub const NDA_UNSPEC: c_ushort = 0;
                pub const NDA_DST: c_ushort = 1;
                pub const NDA_LLADDR: c_ushort = 2;
                pub const NDA_CACHEINFO: c_ushort = 3;
                pub const NDA_PROBES: c_ushort = 4;
                pub const NDA_VLAN: c_ushort = 5;
                pub const NDA_PORT: c_ushort = 6;
                pub const NDA_VNI: c_ushort = 7;
                pub const NDA_IFINDEX: c_ushort = 8;
                
                pub const NLA_ALIGNTO: c_int = 4;

                pub const NETLINK_ROUTE: c_int = 0;
                pub const NETLINK_UNUSED: c_int = 1;
                pub const NETLINK_USERSOCK: c_int = 2;
                pub const NETLINK_FIREWALL: c_int = 3;
                pub const NETLINK_SOCK_DIAG: c_int = 4;
                pub const NETLINK_NFLOG: c_int = 5;
                pub const NETLINK_XFRM: c_int = 6;
                pub const NETLINK_SELINUX: c_int = 7;
                pub const NETLINK_ISCSI: c_int = 8;
                pub const NETLINK_AUDIT: c_int = 9;
                pub const NETLINK_FIB_LOOKUP: c_int = 10;
                pub const NETLINK_CONNECTOR: c_int = 11;
                pub const NETLINK_NETFILTER: c_int = 12;
                pub const NETLINK_IP6_FW: c_int = 13;
                pub const NETLINK_DNRTMSG: c_int = 14;
                pub const NETLINK_KOBJECT_UEVENT: c_int = 15;
                pub const NETLINK_GENERIC: c_int = 16;
                pub const NETLINK_SCSITRANSPORT: c_int = 18;
                pub const NETLINK_ECRYPTFS: c_int = 19;
                pub const NETLINK_RDMA: c_int = 20;
                pub const NETLINK_CRYPTO: c_int = 21;
                pub const NETLINK_INET_DIAG: c_int = NETLINK_SOCK_DIAG;

                pub const NLM_F_REQUEST: c_int = 1;
                pub const NLM_F_MULTI: c_int = 2;
                pub const NLM_F_ACK: c_int = 4;
                pub const NLM_F_ECHO: c_int = 8;
                pub const NLM_F_DUMP_INTR: c_int = 16;
                pub const NLM_F_DUMP_FILTERED: c_int = 32;

                pub const NLM_F_ROOT: c_int = 0x100;
                pub const NLM_F_MATCH: c_int = 0x200;
                pub const NLM_F_ATOMIC: c_int = 0x400;
                pub const NLM_F_DUMP: c_int = NLM_F_ROOT | NLM_F_MATCH;

                pub const NLM_F_REPLACE: c_int = 0x100;
                pub const NLM_F_EXCL: c_int = 0x200;
                pub const NLM_F_CREATE: c_int = 0x400;
                pub const NLM_F_APPEND: c_int = 0x800;

                pub const NLM_F_NONREC: c_int = 0x100;
                pub const NLM_F_BULK: c_int = 0x200;

                pub const NLM_F_CAPPED: c_int = 0x100;
                pub const NLM_F_ACK_TLVS: c_int = 0x200;

                pub const NETLINK_ADD_MEMBERSHIP: c_int = 1;
                pub const NETLINK_DROP_MEMBERSHIP: c_int = 2;
                pub const NETLINK_PKTINFO: c_int = 3;
                pub const NETLINK_BROADCAST_ERROR: c_int = 4;
                pub const NETLINK_NO_ENOBUFS: c_int = 5;
                pub const NETLINK_RX_RING: c_int = 6;
                pub const NETLINK_TX_RING: c_int = 7;
                pub const NETLINK_LISTEN_ALL_NSID: c_int = 8;
                pub const NETLINK_LIST_MEMBERSHIPS: c_int = 9;
                pub const NETLINK_CAP_ACK: c_int = 10;
                pub const NETLINK_EXT_ACK: c_int = 11;
                pub const NETLINK_GET_STRICT_CHK: c_int = 12;

                pub const NLA_F_NESTED: c_int = 1 << 15;
                pub const NLA_F_NET_BYTEORDER: c_int = 1 << 14;
                pub const NLA_TYPE_MASK: c_int = !(NLA_F_NESTED | NLA_F_NET_BYTEORDER);
                
                pub const TCA_UNSPEC: c_ushort = 0;
                pub const TCA_KIND: c_ushort = 1;
                pub const TCA_OPTIONS: c_ushort = 2;
                pub const TCA_STATS: c_ushort = 3;
                pub const TCA_XSTATS: c_ushort = 4;
                pub const TCA_RATE: c_ushort = 5;
                pub const TCA_FCNT: c_ushort = 6;
                pub const TCA_STATS2: c_ushort = 7;
                pub const TCA_STAB: c_ushort = 8;

                pub const RTM_NEWLINK: u16 = 16;
                pub const RTM_DELLINK: u16 = 17;
                pub const RTM_GETLINK: u16 = 18;
                pub const RTM_SETLINK: u16 = 19;
                pub const RTM_NEWADDR: u16 = 20;
                pub const RTM_DELADDR: u16 = 21;
                pub const RTM_GETADDR: u16 = 22;
                pub const RTM_NEWROUTE: u16 = 24;
                pub const RTM_DELROUTE: u16 = 25;
                pub const RTM_GETROUTE: u16 = 26;
                pub const RTM_NEWNEIGH: u16 = 28;
                pub const RTM_DELNEIGH: u16 = 29;
                pub const RTM_GETNEIGH: u16 = 30;
                pub const RTM_NEWRULE: u16 = 32;
                pub const RTM_DELRULE: u16 = 33;
                pub const RTM_GETRULE: u16 = 34;
                pub const RTM_NEWQDISC: u16 = 36;
                pub const RTM_DELQDISC: u16 = 37;
                pub const RTM_GETQDISC: u16 = 38;
                pub const RTM_NEWTCLASS: u16 = 40;
                pub const RTM_DELTCLASS: u16 = 41;
                pub const RTM_GETTCLASS: u16 = 42;
                pub const RTM_NEWTFILTER: u16 = 44;
                pub const RTM_DELTFILTER: u16 = 45;
                pub const RTM_GETTFILTER: u16 = 46;
                pub const RTM_NEWACTION: u16 = 48;
                pub const RTM_DELACTION: u16 = 49;
                pub const RTM_GETACTION: u16 = 50;
                pub const RTM_NEWPREFIX: u16 = 52;
                pub const RTM_GETMULTICAST: u16 = 58;
                pub const RTM_GETANYCAST: u16 = 62;
                pub const RTM_NEWNEIGHTBL: u16 = 64;
                pub const RTM_GETNEIGHTBL: u16 = 66;
                pub const RTM_SETNEIGHTBL: u16 = 67;
                pub const RTM_NEWNDUSEROPT: u16 = 68;
                pub const RTM_NEWADDRLABEL: u16 = 72;
                pub const RTM_DELADDRLABEL: u16 = 73;
                pub const RTM_GETADDRLABEL: u16 = 74;
                pub const RTM_GETDCB: u16 = 78;
                pub const RTM_SETDCB: u16 = 79;
                pub const RTM_NEWNETCONF: u16 = 80;
                pub const RTM_GETNETCONF: u16 = 82;
                pub const RTM_NEWMDB: u16 = 84;
                pub const RTM_DELMDB: u16 = 85;
                pub const RTM_GETMDB: u16 = 86;
                pub const RTM_NEWNSID: u16 = 88;
                pub const RTM_DELNSID: u16 = 89;
                pub const RTM_GETNSID: u16 = 90;

                pub const RTM_F_NOTIFY: c_uint = 0x100;
                pub const RTM_F_CLONED: c_uint = 0x200;
                pub const RTM_F_EQUALIZE: c_uint = 0x400;
                pub const RTM_F_PREFIX: c_uint = 0x800;

                pub const RTA_UNSPEC: c_ushort = 0;
                pub const RTA_DST: c_ushort = 1;
                pub const RTA_SRC: c_ushort = 2;
                pub const RTA_IIF: c_ushort = 3;
                pub const RTA_OIF: c_ushort = 4;
                pub const RTA_GATEWAY: c_ushort = 5;
                pub const RTA_PRIORITY: c_ushort = 6;
                pub const RTA_PREFSRC: c_ushort = 7;
                pub const RTA_METRICS: c_ushort = 8;
                pub const RTA_MULTIPATH: c_ushort = 9;
                pub const RTA_PROTOINFO: c_ushort = 10;
                pub const RTA_FLOW: c_ushort = 11;
                pub const RTA_CACHEINFO: c_ushort = 12;
                pub const RTA_SESSION: c_ushort = 13;
                pub const RTA_MP_ALGO: c_ushort = 14;
                pub const RTA_TABLE: c_ushort = 15;
                pub const RTA_MARK: c_ushort = 16;
                pub const RTA_MFC_STATS: c_ushort = 17;

                pub const RTN_UNSPEC: c_uchar = 0;
                pub const RTN_UNICAST: c_uchar = 1;
                pub const RTN_LOCAL: c_uchar = 2;
                pub const RTN_BROADCAST: c_uchar = 3;
                pub const RTN_ANYCAST: c_uchar = 4;
                pub const RTN_MULTICAST: c_uchar = 5;
                pub const RTN_BLACKHOLE: c_uchar = 6;
                pub const RTN_UNREACHABLE: c_uchar = 7;
                pub const RTN_PROHIBIT: c_uchar = 8;
                pub const RTN_THROW: c_uchar = 9;
                pub const RTN_NAT: c_uchar = 10;
                pub const RTN_XRESOLVE: c_uchar = 11;

                pub const RTPROT_UNSPEC: c_uchar = 0;
                pub const RTPROT_REDIRECT: c_uchar = 1;
                pub const RTPROT_KERNEL: c_uchar = 2;
                pub const RTPROT_BOOT: c_uchar = 3;
                pub const RTPROT_STATIC: c_uchar = 4;

                pub const RT_SCOPE_UNIVERSE: c_uchar = 0;
                pub const RT_SCOPE_SITE: c_uchar = 200;
                pub const RT_SCOPE_LINK: c_uchar = 253;
                pub const RT_SCOPE_HOST: c_uchar = 254;
                pub const RT_SCOPE_NOWHERE: c_uchar = 255;

                pub const RT_TABLE_UNSPEC: c_uchar = 0;
                pub const RT_TABLE_COMPAT: c_uchar = 252;
                pub const RT_TABLE_DEFAULT: c_uchar = 253;
                pub const RT_TABLE_MAIN: c_uchar = 254;
                pub const RT_TABLE_LOCAL: c_uchar = 255;

                pub const RTMSG_OVERRUN: u32 = NLMSG_OVERRUN as u32;
                pub const RTMSG_NEWDEVICE: u32 = 0x11;
                pub const RTMSG_DELDEVICE: u32 = 0x12;
                pub const RTMSG_NEWROUTE: u32 = 0x21;
                pub const RTMSG_DELROUTE: u32 = 0x22;
                pub const RTMSG_NEWRULE: u32 = 0x31;
                pub const RTMSG_DELRULE: u32 = 0x32;
                pub const RTMSG_CONTROL: u32 = 0x40;
                pub const RTMSG_AR_FAILED: u32 = 0x51;

                pub const MAX_ADDR_LEN: usize = 7;
                pub const ARPD_UPDATE: c_ushort = 0x01;
                pub const ARPD_LOOKUP: c_ushort = 0x02;
                pub const ARPD_FLUSH: c_ushort = 0x03;
                pub const ATF_MAGIC: c_int = 0x80;

                pub const RTEXT_FILTER_VF: c_int = 1 << 0;
                pub const RTEXT_FILTER_BRVLAN: c_int = 1 << 1;
                pub const RTEXT_FILTER_BRVLAN_COMPRESSED: c_int = 1 << 2;
                pub const RTEXT_FILTER_SKIP_STATS: c_int = 1 << 3;
                pub const RTEXT_FILTER_MRP: c_int = 1 << 4;
                pub const RTEXT_FILTER_CFM_CONFIG: c_int = 1 << 5;
                pub const RTMGRP_LINK: c_int = 0x00001;
                pub const RTMGRP_NOTIFY: c_int = 0x00002;
                pub const RTMGRP_NEIGH: c_int = 0x00004;
                pub const RTMGRP_TC: c_int = 0x00008;
                pub const RTMGRP_IPV4_IFADDR: c_int = 0x00010;
                pub const RTMGRP_IPV4_MROUTE: c_int = 0x00020;
                pub const RTMGRP_IPV4_ROUTE: c_int = 0x00040;
                pub const RTMGRP_IPV4_RULE: c_int = 0x00080;
                pub const RTMGRP_IPV6_IFADDR: c_int = 0x00100;
                pub const RTMGRP_IPV6_MROUTE: c_int = 0x00200;
                pub const RTMGRP_IPV6_ROUTE: c_int = 0x00400;
                pub const RTMGRP_IPV6_IFINFO: c_int = 0x00800;
                pub const RTMGRP_DECnet_IFADDR: c_int = 0x01000;
                pub const RTMGRP_DECnet_ROUTE: c_int = 0x04000;
                pub const RTMGRP_IPV6_PREFIX: c_int = 0x20000;
                
                pub const RTNLGRP_NONE: c_uint = 0x00;
                pub const RTNLGRP_LINK: c_uint = 0x01;
                pub const RTNLGRP_NOTIFY: c_uint = 0x02;
                pub const RTNLGRP_NEIGH: c_uint = 0x03;
                pub const RTNLGRP_TC: c_uint = 0x04;
                pub const RTNLGRP_IPV4_IFADDR: c_uint = 0x05;
                pub const RTNLGRP_IPV4_MROUTE: c_uint = 0x06;
                pub const RTNLGRP_IPV4_ROUTE: c_uint = 0x07;
                pub const RTNLGRP_IPV4_RULE: c_uint = 0x08;
                pub const RTNLGRP_IPV6_IFADDR: c_uint = 0x09;
                pub const RTNLGRP_IPV6_MROUTE: c_uint = 0x0a;
                pub const RTNLGRP_IPV6_ROUTE: c_uint = 0x0b;
                pub const RTNLGRP_IPV6_IFINFO: c_uint = 0x0c;
                pub const RTNLGRP_DECnet_IFADDR: c_uint = 0x0d;
                pub const RTNLGRP_NOP2: c_uint = 0x0e;
                pub const RTNLGRP_DECnet_ROUTE: c_uint = 0x0f;
                pub const RTNLGRP_DECnet_RULE: c_uint = 0x10;
                pub const RTNLGRP_NOP4: c_uint = 0x11;
                pub const RTNLGRP_IPV6_PREFIX: c_uint = 0x12;
                pub const RTNLGRP_IPV6_RULE: c_uint = 0x13;
                pub const RTNLGRP_ND_USEROPT: c_uint = 0x14;
                pub const RTNLGRP_PHONET_IFADDR: c_uint = 0x15;
                pub const RTNLGRP_PHONET_ROUTE: c_uint = 0x16;
                pub const RTNLGRP_DCB: c_uint = 0x17;
                pub const RTNLGRP_IPV4_NETCONF: c_uint = 0x18;
                pub const RTNLGRP_IPV6_NETCONF: c_uint = 0x19;
                pub const RTNLGRP_MDB: c_uint = 0x1a;
                pub const RTNLGRP_MPLS_ROUTE: c_uint = 0x1b;
                pub const RTNLGRP_NSID: c_uint = 0x1c;
                pub const RTNLGRP_MPLS_NETCONF: c_uint = 0x1d;
                pub const RTNLGRP_IPV4_MROUTE_R: c_uint = 0x1e;
                pub const RTNLGRP_IPV6_MROUTE_R: c_uint = 0x1f;
                pub const RTNLGRP_NEXTHOP: c_uint = 0x20;
                pub const RTNLGRP_BRVLAN: c_uint = 0x21;
                pub const RTNLGRP_MCTP_IFADDR: c_uint = 0x22;
                pub const RTNLGRP_TUNNEL: c_uint = 0x23;
                pub const RTNLGRP_STATS: c_uint = 0x24;
                
                c_enum! {
                    enum proc_cn_mcast_op {
                        PROC_CN_MCAST_LISTEN = 1,
                        PROC_CN_MCAST_IGNORE = 2,
                    }
                }

                c_enum! {
                    enum proc_cn_event {
                        PROC_EVENT_NONE = 0x00000000,
                        PROC_EVENT_FORK = 0x00000001,
                        PROC_EVENT_EXEC = 0x00000002,
                        PROC_EVENT_UID = 0x00000004,
                        PROC_EVENT_GID = 0x00000040,
                        PROC_EVENT_SID = 0x00000080,
                        PROC_EVENT_PTRACE = 0x00000100,
                        PROC_EVENT_COMM = 0x00000200,
                        PROC_EVENT_NONZERO_EXIT = 0x20000000,
                        PROC_EVENT_COREDUMP = 0x40000000,
                        PROC_EVENT_EXIT = 0x80000000,
                    }
                }
                
                pub const CN_IDX_PROC: c_uint = 0x1;
                pub const CN_VAL_PROC: c_uint = 0x1;
                pub const CN_IDX_CIFS: c_uint = 0x2;
                pub const CN_VAL_CIFS: c_uint = 0x1;
                pub const CN_W1_IDX: c_uint = 0x3;
                pub const CN_W1_VAL: c_uint = 0x1;
                pub const CN_IDX_V86D: c_uint = 0x4;
                pub const CN_VAL_V86D_UVESAFB: c_uint = 0x1;
                pub const CN_IDX_BB: c_uint = 0x5;
                pub const CN_DST_IDX: c_uint = 0x6;
                pub const CN_DST_VAL: c_uint = 0x1;
                pub const CN_IDX_DM: c_uint = 0x7;
                pub const CN_VAL_DM_USERSPACE_LOG: c_uint = 0x1;
                pub const CN_IDX_DRBD: c_uint = 0x8;
                pub const CN_VAL_DRBD: c_uint = 0x1;
                pub const CN_KVP_IDX: c_uint = 0x9;
                pub const CN_KVP_VAL: c_uint = 0x1;
                pub const CN_VSS_IDX: c_uint = 0xA;
                pub const CN_VSS_VAL: c_uint = 0x1;
                
                pub const MODULE_INIT_IGNORE_MODVERSIONS: c_uint = 0x0001;
                pub const MODULE_INIT_IGNORE_VERMAGIC: c_uint = 0x0002;
                
                pub const SOF_TIMESTAMPING_TX_HARDWARE: c_uint = 1 << 0;
                pub const SOF_TIMESTAMPING_TX_SOFTWARE: c_uint = 1 << 1;
                pub const SOF_TIMESTAMPING_RX_HARDWARE: c_uint = 1 << 2;
                pub const SOF_TIMESTAMPING_RX_SOFTWARE: c_uint = 1 << 3;
                pub const SOF_TIMESTAMPING_SOFTWARE: c_uint = 1 << 4;
                pub const SOF_TIMESTAMPING_SYS_HARDWARE: c_uint = 1 << 5;
                pub const SOF_TIMESTAMPING_RAW_HARDWARE: c_uint = 1 << 6;
                pub const SOF_TIMESTAMPING_OPT_ID: c_uint = 1 << 7;
                pub const SOF_TIMESTAMPING_TX_SCHED: c_uint = 1 << 8;
                pub const SOF_TIMESTAMPING_TX_ACK: c_uint = 1 << 9;
                pub const SOF_TIMESTAMPING_OPT_CMSG: c_uint = 1 << 10;
                pub const SOF_TIMESTAMPING_OPT_TSONLY: c_uint = 1 << 11;
                pub const SOF_TIMESTAMPING_OPT_STATS: c_uint = 1 << 12;
                pub const SOF_TIMESTAMPING_OPT_PKTINFO: c_uint = 1 << 13;
                pub const SOF_TIMESTAMPING_OPT_TX_SWHW: c_uint = 1 << 14;
                pub const SOF_TIMESTAMPING_BIND_PHC: c_uint = 1 << 15;
                pub const SOF_TIMESTAMPING_OPT_ID_TCP: c_uint = 1 << 16;
                pub const SOF_TIMESTAMPING_OPT_RX_FILTER: c_uint = 1 << 17;
                pub const SOF_TXTIME_DEADLINE_MODE: u32 = 1 << 0;
                pub const SOF_TXTIME_REPORT_ERRORS: u32 = 1 << 1;

                pub const HWTSTAMP_TX_OFF: c_uint = 0;
                pub const HWTSTAMP_TX_ON: c_uint = 1;
                pub const HWTSTAMP_TX_ONESTEP_SYNC: c_uint = 2;
                pub const HWTSTAMP_TX_ONESTEP_P2P: c_uint = 3;

                pub const HWTSTAMP_FILTER_NONE: c_uint = 0;
                pub const HWTSTAMP_FILTER_ALL: c_uint = 1;
                pub const HWTSTAMP_FILTER_SOME: c_uint = 2;
                pub const HWTSTAMP_FILTER_PTP_V1_L4_EVENT: c_uint = 3;
                pub const HWTSTAMP_FILTER_PTP_V1_L4_SYNC: c_uint = 4;
                pub const HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ: c_uint = 5;
                pub const HWTSTAMP_FILTER_PTP_V2_L4_EVENT: c_uint = 6;
                pub const HWTSTAMP_FILTER_PTP_V2_L4_SYNC: c_uint = 7;
                pub const HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ: c_uint = 8;
                pub const HWTSTAMP_FILTER_PTP_V2_L2_EVENT: c_uint = 9;
                pub const HWTSTAMP_FILTER_PTP_V2_L2_SYNC: c_uint = 10;
                pub const HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ: c_uint = 11;
                pub const HWTSTAMP_FILTER_PTP_V2_EVENT: c_uint = 12;
                pub const HWTSTAMP_FILTER_PTP_V2_SYNC: c_uint = 13;
                pub const HWTSTAMP_FILTER_PTP_V2_DELAY_REQ: c_uint = 14;
                pub const HWTSTAMP_FILTER_NTP_ALL: c_uint = 15;
                
                pub const PTP_MAX_SAMPLES: c_uint = 25;

                const PTP_CLK_MAGIC: u32 = b'=' as u32;

                pub const PTP_CLOCK_GETCAPS: Ioctl = _IOR::<ptp_clock_caps>(PTP_CLK_MAGIC, 1);
                pub const PTP_EXTTS_REQUEST: Ioctl = _IOW::<ptp_extts_request>(PTP_CLK_MAGIC, 2);
                pub const PTP_PEROUT_REQUEST: Ioctl = _IOW::<ptp_perout_request>(PTP_CLK_MAGIC, 3);
                pub const PTP_ENABLE_PPS: Ioctl = _IOW::<c_int>(PTP_CLK_MAGIC, 4);
                pub const PTP_SYS_OFFSET: Ioctl = _IOW::<ptp_sys_offset>(PTP_CLK_MAGIC, 5);
                pub const PTP_PIN_GETFUNC: Ioctl = _IOWR::<ptp_pin_desc>(PTP_CLK_MAGIC, 6);
                pub const PTP_PIN_SETFUNC: Ioctl = _IOW::<ptp_pin_desc>(PTP_CLK_MAGIC, 7);
                pub const PTP_SYS_OFFSET_PRECISE: Ioctl = _IOWR::<ptp_sys_offset_precise>(PTP_CLK_MAGIC, 8);
                pub const PTP_SYS_OFFSET_EXTENDED: Ioctl = _IOWR::<ptp_sys_offset_extended>(PTP_CLK_MAGIC, 9);

                pub const PTP_CLOCK_GETCAPS2: Ioctl = _IOR::<ptp_clock_caps>(PTP_CLK_MAGIC, 10);
                pub const PTP_EXTTS_REQUEST2: Ioctl = _IOW::<ptp_extts_request>(PTP_CLK_MAGIC, 11);
                pub const PTP_PEROUT_REQUEST2: Ioctl = _IOW::<ptp_perout_request>(PTP_CLK_MAGIC, 12);
                pub const PTP_ENABLE_PPS2: Ioctl = _IOW::<c_int>(PTP_CLK_MAGIC, 13);
                pub const PTP_SYS_OFFSET2: Ioctl = _IOW::<ptp_sys_offset>(PTP_CLK_MAGIC, 14);
                pub const PTP_PIN_GETFUNC2: Ioctl = _IOWR::<ptp_pin_desc>(PTP_CLK_MAGIC, 15);
                pub const PTP_PIN_SETFUNC2: Ioctl = _IOW::<ptp_pin_desc>(PTP_CLK_MAGIC, 16);
                pub const PTP_SYS_OFFSET_PRECISE2: Ioctl = _IOWR::<ptp_sys_offset_precise>(PTP_CLK_MAGIC, 17);
                pub const PTP_SYS_OFFSET_EXTENDED2: Ioctl = _IOWR::<ptp_sys_offset_extended>(PTP_CLK_MAGIC, 18);
                
                pub const PTP_PF_NONE: c_uint = 0;
                pub const PTP_PF_EXTTS: c_uint = 1;
                pub const PTP_PF_PEROUT: c_uint = 2;
                pub const PTP_PF_PHYSYNC: c_uint = 3;
                
                pub const TLS_TX: c_int = 1;
                pub const TLS_RX: c_int = 2;

                pub const TLS_TX_ZEROCOPY_RO: c_int = 3;
                pub const TLS_RX_EXPECT_NO_PAD: c_int = 4;

                pub const TLS_1_2_VERSION_MAJOR: __u8 = 0x3;
                pub const TLS_1_2_VERSION_MINOR: __u8 = 0x3;
                pub const TLS_1_2_VERSION: __u16 =
                    ((TLS_1_2_VERSION_MAJOR as __u16) << 8) | (TLS_1_2_VERSION_MINOR as __u16);

                pub const TLS_1_3_VERSION_MAJOR: __u8 = 0x3;
                pub const TLS_1_3_VERSION_MINOR: __u8 = 0x4;
                pub const TLS_1_3_VERSION: __u16 =
                    ((TLS_1_3_VERSION_MAJOR as __u16) << 8) | (TLS_1_3_VERSION_MINOR as __u16);

                pub const TLS_CIPHER_AES_GCM_128: __u16 = 51;
                pub const TLS_CIPHER_AES_GCM_128_IV_SIZE: usize = 8;
                pub const TLS_CIPHER_AES_GCM_128_KEY_SIZE: usize = 16;
                pub const TLS_CIPHER_AES_GCM_128_SALT_SIZE: usize = 4;
                pub const TLS_CIPHER_AES_GCM_128_TAG_SIZE: usize = 16;
                pub const TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE: usize = 8;

                pub const TLS_CIPHER_AES_GCM_256: __u16 = 52;
                pub const TLS_CIPHER_AES_GCM_256_IV_SIZE: usize = 8;
                pub const TLS_CIPHER_AES_GCM_256_KEY_SIZE: usize = 32;
                pub const TLS_CIPHER_AES_GCM_256_SALT_SIZE: usize = 4;
                pub const TLS_CIPHER_AES_GCM_256_TAG_SIZE: usize = 16;
                pub const TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE: usize = 8;

                pub const TLS_CIPHER_AES_CCM_128: __u16 = 53;
                pub const TLS_CIPHER_AES_CCM_128_IV_SIZE: usize = 8;
                pub const TLS_CIPHER_AES_CCM_128_KEY_SIZE: usize = 16;
                pub const TLS_CIPHER_AES_CCM_128_SALT_SIZE: usize = 4;
                pub const TLS_CIPHER_AES_CCM_128_TAG_SIZE: usize = 16;
                pub const TLS_CIPHER_AES_CCM_128_REC_SEQ_SIZE: usize = 8;

                pub const TLS_CIPHER_CHACHA20_POLY1305: __u16 = 54;
                pub const TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE: usize = 12;
                pub const TLS_CIPHER_CHACHA20_POLY1305_KEY_SIZE: usize = 32;
                pub const TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE: usize = 0;
                pub const TLS_CIPHER_CHACHA20_POLY1305_TAG_SIZE: usize = 16;
                pub const TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE: usize = 8;

                pub const TLS_CIPHER_SM4_GCM: __u16 = 55;
                pub const TLS_CIPHER_SM4_GCM_IV_SIZE: usize = 8;
                pub const TLS_CIPHER_SM4_GCM_KEY_SIZE: usize = 16;
                pub const TLS_CIPHER_SM4_GCM_SALT_SIZE: usize = 4;
                pub const TLS_CIPHER_SM4_GCM_TAG_SIZE: usize = 16;
                pub const TLS_CIPHER_SM4_GCM_REC_SEQ_SIZE: usize = 8;

                pub const TLS_CIPHER_SM4_CCM: __u16 = 56;
                pub const TLS_CIPHER_SM4_CCM_IV_SIZE: usize = 8;
                pub const TLS_CIPHER_SM4_CCM_KEY_SIZE: usize = 16;
                pub const TLS_CIPHER_SM4_CCM_SALT_SIZE: usize = 4;
                pub const TLS_CIPHER_SM4_CCM_TAG_SIZE: usize = 16;
                pub const TLS_CIPHER_SM4_CCM_REC_SEQ_SIZE: usize = 8;

                pub const TLS_CIPHER_ARIA_GCM_128: __u16 = 57;
                pub const TLS_CIPHER_ARIA_GCM_128_IV_SIZE: usize = 8;
                pub const TLS_CIPHER_ARIA_GCM_128_KEY_SIZE: usize = 16;
                pub const TLS_CIPHER_ARIA_GCM_128_SALT_SIZE: usize = 4;
                pub const TLS_CIPHER_ARIA_GCM_128_TAG_SIZE: usize = 16;
                pub const TLS_CIPHER_ARIA_GCM_128_REC_SEQ_SIZE: usize = 8;

                pub const TLS_CIPHER_ARIA_GCM_256: __u16 = 58;
                pub const TLS_CIPHER_ARIA_GCM_256_IV_SIZE: usize = 8;
                pub const TLS_CIPHER_ARIA_GCM_256_KEY_SIZE: usize = 32;
                pub const TLS_CIPHER_ARIA_GCM_256_SALT_SIZE: usize = 4;
                pub const TLS_CIPHER_ARIA_GCM_256_TAG_SIZE: usize = 16;
                pub const TLS_CIPHER_ARIA_GCM_256_REC_SEQ_SIZE: usize = 8;

                pub const TLS_SET_RECORD_TYPE: c_int = 1;
                pub const TLS_GET_RECORD_TYPE: c_int = 2;

                pub const SOL_TLS: c_int = 282;
                
                pub const TLS_INFO_UNSPEC: c_int = 0x00;
                pub const TLS_INFO_VERSION: c_int = 0x01;
                pub const TLS_INFO_CIPHER: c_int = 0x02;
                pub const TLS_INFO_TXCONF: c_int = 0x03;
                pub const TLS_INFO_RXCONF: c_int = 0x04;
                pub const TLS_INFO_ZC_RO_TX: c_int = 0x05;
                pub const TLS_INFO_RX_NO_PAD: c_int = 0x06;

                pub const TLS_CONF_BASE: c_int = 1;
                pub const TLS_CONF_SW: c_int = 2;
                pub const TLS_CONF_HW: c_int = 3;
                pub const TLS_CONF_HW_RECORD: c_int = 4;
                
                pub const ALG_SET_KEY: c_int = 1;
                pub const ALG_SET_IV: c_int = 2;
                pub const ALG_SET_OP: c_int = 3;
                pub const ALG_SET_AEAD_ASSOCLEN: c_int = 4;
                pub const ALG_SET_AEAD_AUTHSIZE: c_int = 5;
                pub const ALG_SET_DRBG_ENTROPY: c_int = 6;
                pub const ALG_SET_KEY_BY_KEY_SERIAL: c_int = 7;

                pub const ALG_OP_DECRYPT: c_int = 0;
                pub const ALG_OP_ENCRYPT: c_int = 1;
                
                pub const IF_OPER_UNKNOWN: c_int = 0;
                pub const IF_OPER_NOTPRESENT: c_int = 1;
                pub const IF_OPER_DOWN: c_int = 2;
                pub const IF_OPER_LOWERLAYERDOWN: c_int = 3;
                pub const IF_OPER_TESTING: c_int = 4;
                pub const IF_OPER_DORMANT: c_int = 5;
                pub const IF_OPER_UP: c_int = 6;

                pub const IF_LINK_MODE_DEFAULT: c_int = 0;
                pub const IF_LINK_MODE_DORMANT: c_int = 1;
                pub const IF_LINK_MODE_TESTING: c_int = 2;
                
                pub const UDP_CORK: c_int = 1;
                pub const UDP_ENCAP: c_int = 100;
                pub const UDP_NO_CHECK6_TX: c_int = 101;
                pub const UDP_NO_CHECK6_RX: c_int = 102;
                
                pub const MAP_SHARED_VALIDATE: c_int = 0x3;
                pub const MAP_DROPPABLE: c_int = 0x8;
                
                pub const MAP_FIXED_NOREPLACE: c_int = 0x100000;
                pub const MLOCK_ONFAULT: c_uint = 0x01;
                
                pub const VMADDR_CID_ANY: c_uint = 0xFFFFFFFF;
                pub const VMADDR_CID_HYPERVISOR: c_uint = 0;
                #[deprecated(
                    since = "0.2.74",
                    note = "VMADDR_CID_RESERVED is removed since Linux v5.6 and \
                            replaced with VMADDR_CID_LOCAL"
                )]
                pub const VMADDR_CID_RESERVED: c_uint = 1;
                pub const VMADDR_CID_LOCAL: c_uint = 1;
                pub const VMADDR_CID_HOST: c_uint = 2;
                pub const VMADDR_PORT_ANY: c_uint = 0xFFFFFFFF;
                
                pub const IN_ACCESS: u32 = 0x0000_0001;
                pub const IN_MODIFY: u32 = 0x0000_0002;
                pub const IN_ATTRIB: u32 = 0x0000_0004;
                pub const IN_CLOSE_WRITE: u32 = 0x0000_0008;
                pub const IN_CLOSE_NOWRITE: u32 = 0x0000_0010;
                pub const IN_CLOSE: u32 = IN_CLOSE_WRITE | IN_CLOSE_NOWRITE;
                pub const IN_OPEN: u32 = 0x0000_0020;
                pub const IN_MOVED_FROM: u32 = 0x0000_0040;
                pub const IN_MOVED_TO: u32 = 0x0000_0080;
                pub const IN_MOVE: u32 = IN_MOVED_FROM | IN_MOVED_TO;
                pub const IN_CREATE: u32 = 0x0000_0100;
                pub const IN_DELETE: u32 = 0x0000_0200;
                pub const IN_DELETE_SELF: u32 = 0x0000_0400;
                pub const IN_MOVE_SELF: u32 = 0x0000_0800;
                pub const IN_UNMOUNT: u32 = 0x0000_2000;
                pub const IN_Q_OVERFLOW: u32 = 0x0000_4000;
                pub const IN_IGNORED: u32 = 0x0000_8000;
                pub const IN_ONLYDIR: u32 = 0x0100_0000;
                pub const IN_DONT_FOLLOW: u32 = 0x0200_0000;
                pub const IN_EXCL_UNLINK: u32 = 0x0400_0000;
                
                const SECURE_NOROOT: c_int = 0;
                const SECURE_NOROOT_LOCKED: c_int = 1;

                pub const SECBIT_NOROOT: c_int = issecure_mask(SECURE_NOROOT);
                pub const SECBIT_NOROOT_LOCKED: c_int = issecure_mask(SECURE_NOROOT_LOCKED);

                const SECURE_NO_SETUID_FIXUP: c_int = 2;
                const SECURE_NO_SETUID_FIXUP_LOCKED: c_int = 3;

                pub const SECBIT_NO_SETUID_FIXUP: c_int = issecure_mask(SECURE_NO_SETUID_FIXUP);
                pub const SECBIT_NO_SETUID_FIXUP_LOCKED: c_int = issecure_mask(SECURE_NO_SETUID_FIXUP_LOCKED);

                const SECURE_KEEP_CAPS: c_int = 4;
                const SECURE_KEEP_CAPS_LOCKED: c_int = 5;

                pub const SECBIT_KEEP_CAPS: c_int = issecure_mask(SECURE_KEEP_CAPS);
                pub const SECBIT_KEEP_CAPS_LOCKED: c_int = issecure_mask(SECURE_KEEP_CAPS_LOCKED);

                const SECURE_NO_CAP_AMBIENT_RAISE: c_int = 6;
                const SECURE_NO_CAP_AMBIENT_RAISE_LOCKED: c_int = 7;

                pub const SECBIT_NO_CAP_AMBIENT_RAISE: c_int = issecure_mask(SECURE_NO_CAP_AMBIENT_RAISE);
                
                pub const SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED: c_int = 
                issecure_mask(SECURE_NO_CAP_AMBIENT_RAISE_LOCKED);

                pub const SECUREBITS_DEFAULT: c_int = 0x00000000;
                
                pub const SECURE_ALL_BITS: c_int = 
                SECBIT_NOROOT | SECBIT_NO_SETUID_FIXUP | SECBIT_KEEP_CAPS | SECBIT_NO_CAP_AMBIENT_RAISE;

                pub const SECURE_ALL_LOCKS: c_int = SECURE_ALL_BITS << 1;

                const fn issecure_mask(x: c_int) -> c_int { 1 << x }
                
                pub const KEY_SPEC_THREAD_KEYRING: i32 = -1;
                pub const KEY_SPEC_PROCESS_KEYRING: i32 = -2;
                pub const KEY_SPEC_SESSION_KEYRING: i32 = -3;
                pub const KEY_SPEC_USER_KEYRING: i32 = -4;
                pub const KEY_SPEC_USER_SESSION_KEYRING: i32 = -5;
                pub const KEY_SPEC_GROUP_KEYRING: i32 = -6;
                pub const KEY_SPEC_REQKEY_AUTH_KEY: i32 = -7;
                pub const KEY_SPEC_REQUESTOR_KEYRING: i32 = -8;

                pub const KEY_REQKEY_DEFL_NO_CHANGE: i32 = -1;
                pub const KEY_REQKEY_DEFL_DEFAULT: i32 = 0;
                pub const KEY_REQKEY_DEFL_THREAD_KEYRING: i32 = 1;
                pub const KEY_REQKEY_DEFL_PROCESS_KEYRING: i32 = 2;
                pub const KEY_REQKEY_DEFL_SESSION_KEYRING: i32 = 3;
                pub const KEY_REQKEY_DEFL_USER_KEYRING: i32 = 4;
                pub const KEY_REQKEY_DEFL_USER_SESSION_KEYRING: i32 = 5;
                pub const KEY_REQKEY_DEFL_GROUP_KEYRING: i32 = 6;
                pub const KEY_REQKEY_DEFL_REQUESTOR_KEYRING: i32 = 7;

                pub const KEYCTL_GET_KEYRING_ID: u32 = 0;
                pub const KEYCTL_JOIN_SESSION_KEYRING: u32 = 1;
                pub const KEYCTL_UPDATE: u32 = 2;
                pub const KEYCTL_REVOKE: u32 = 3;
                pub const KEYCTL_CHOWN: u32 = 4;
                pub const KEYCTL_SETPERM: u32 = 5;
                pub const KEYCTL_DESCRIBE: u32 = 6;
                pub const KEYCTL_CLEAR: u32 = 7;
                pub const KEYCTL_LINK: u32 = 8;
                pub const KEYCTL_UNLINK: u32 = 9;
                pub const KEYCTL_SEARCH: u32 = 10;
                pub const KEYCTL_READ: u32 = 11;
                pub const KEYCTL_INSTANTIATE: u32 = 12;
                pub const KEYCTL_NEGATE: u32 = 13;
                pub const KEYCTL_SET_REQKEY_KEYRING: u32 = 14;
                pub const KEYCTL_SET_TIMEOUT: u32 = 15;
                pub const KEYCTL_ASSUME_AUTHORITY: u32 = 16;
                pub const KEYCTL_GET_SECURITY: u32 = 17;
                pub const KEYCTL_SESSION_TO_PARENT: u32 = 18;
                pub const KEYCTL_REJECT: u32 = 19;
                pub const KEYCTL_INSTANTIATE_IOV: u32 = 20;
                pub const KEYCTL_INVALIDATE: u32 = 21;
                pub const KEYCTL_GET_PERSISTENT: u32 = 22;

                pub const IN_MASK_CREATE: u32 = 0x1000_0000;
                pub const IN_MASK_ADD: u32 = 0x2000_0000;
                pub const IN_ISDIR: u32 = 0x4000_0000;
                pub const IN_ONESHOT: u32 = 0x8000_0000;

                pub const IN_ALL_EVENTS: u32 = IN_ACCESS
                | IN_MODIFY
                | IN_ATTRIB
                | IN_CLOSE_WRITE
                | IN_CLOSE_NOWRITE
                | IN_OPEN
                | IN_MOVED_FROM
                | IN_MOVED_TO
                | IN_DELETE
                | IN_CREATE
                | IN_DELETE_SELF
                | IN_MOVE_SELF;

                pub const IN_CLOEXEC: c_int = O_CLOEXEC;
                pub const IN_NONBLOCK: c_int = O_NONBLOCK;
                
                pub const OPEN_TREE_CLONE: c_uint = 0x01;
                pub const OPEN_TREE_CLOEXEC: c_uint = O_CLOEXEC as c_uint;
                
                pub const NFT_TABLE_MAXNAMELEN: c_int = 256;
                pub const NFT_CHAIN_MAXNAMELEN: c_int = 256;
                pub const NFT_SET_MAXNAMELEN: c_int = 256;
                pub const NFT_OBJ_MAXNAMELEN: c_int = 256;
                pub const NFT_USERDATA_MAXLEN: c_int = 256;

                pub const NFT_REG_VERDICT: c_int = 0;
                pub const NFT_REG_1: c_int = 1;
                pub const NFT_REG_2: c_int = 2;
                pub const NFT_REG_3: c_int = 3;
                pub const NFT_REG_4: c_int = 4;
                pub const __NFT_REG_MAX: c_int = 5;
                pub const NFT_REG32_00: c_int = 8;
                pub const NFT_REG32_01: c_int = 9;
                pub const NFT_REG32_02: c_int = 10;
                pub const NFT_REG32_03: c_int = 11;
                pub const NFT_REG32_04: c_int = 12;
                pub const NFT_REG32_05: c_int = 13;
                pub const NFT_REG32_06: c_int = 14;
                pub const NFT_REG32_07: c_int = 15;
                pub const NFT_REG32_08: c_int = 16;
                pub const NFT_REG32_09: c_int = 17;
                pub const NFT_REG32_10: c_int = 18;
                pub const NFT_REG32_11: c_int = 19;
                pub const NFT_REG32_12: c_int = 20;
                pub const NFT_REG32_13: c_int = 21;
                pub const NFT_REG32_14: c_int = 22;
                pub const NFT_REG32_15: c_int = 23;

                pub const NFT_REG_SIZE: c_int = 16;
                pub const NFT_REG32_SIZE: c_int = 4;

                pub const NFT_CONTINUE: c_int = -1;
                pub const NFT_BREAK: c_int = -2;
                pub const NFT_JUMP: c_int = -3;
                pub const NFT_GOTO: c_int = -4;
                pub const NFT_RETURN: c_int = -5;

                pub const NFT_MSG_NEWTABLE: c_int = 0;
                pub const NFT_MSG_GETTABLE: c_int = 1;
                pub const NFT_MSG_DELTABLE: c_int = 2;
                pub const NFT_MSG_NEWCHAIN: c_int = 3;
                pub const NFT_MSG_GETCHAIN: c_int = 4;
                pub const NFT_MSG_DELCHAIN: c_int = 5;
                pub const NFT_MSG_NEWRULE: c_int = 6;
                pub const NFT_MSG_GETRULE: c_int = 7;
                pub const NFT_MSG_DELRULE: c_int = 8;
                pub const NFT_MSG_NEWSET: c_int = 9;
                pub const NFT_MSG_GETSET: c_int = 10;
                pub const NFT_MSG_DELSET: c_int = 11;
                pub const NFT_MSG_NEWSETELEM: c_int = 12;
                pub const NFT_MSG_GETSETELEM: c_int = 13;
                pub const NFT_MSG_DELSETELEM: c_int = 14;
                pub const NFT_MSG_NEWGEN: c_int = 15;
                pub const NFT_MSG_GETGEN: c_int = 16;
                pub const NFT_MSG_TRACE: c_int = 17;

                pub const NFT_MSG_NEWOBJ: c_int = 18;
                pub const NFT_MSG_GETOBJ: c_int = 19;
                pub const NFT_MSG_DELOBJ: c_int = 20;
                pub const NFT_MSG_GETOBJ_RESET: c_int = 21;

                pub const NFT_MSG_MAX: c_int = 25;

                pub const NFT_SET_ANONYMOUS: c_int = 0x1;
                pub const NFT_SET_CONSTANT: c_int = 0x2;
                pub const NFT_SET_INTERVAL: c_int = 0x4;
                pub const NFT_SET_MAP: c_int = 0x8;
                pub const NFT_SET_TIMEOUT: c_int = 0x10;
                pub const NFT_SET_EVAL: c_int = 0x20;

                pub const NFT_SET_POL_PERFORMANCE: c_int = 0;
                pub const NFT_SET_POL_MEMORY: c_int = 1;

                pub const NFT_SET_ELEM_INTERVAL_END: c_int = 0x1;

                pub const NFT_DATA_VALUE: c_uint = 0;
                pub const NFT_DATA_VERDICT: c_uint = 0xffffff00;

                pub const NFT_DATA_RESERVED_MASK: c_uint = 0xffffff00;

                pub const NFT_DATA_VALUE_MAXLEN: c_int = 64;

                pub const NFT_BYTEORDER_NTOH: c_int = 0;
                pub const NFT_BYTEORDER_HTON: c_int = 1;

                pub const NFT_CMP_EQ: c_int = 0;
                pub const NFT_CMP_NEQ: c_int = 1;
                pub const NFT_CMP_LT: c_int = 2;
                pub const NFT_CMP_LTE: c_int = 3;
                pub const NFT_CMP_GT: c_int = 4;
                pub const NFT_CMP_GTE: c_int = 5;

                pub const NFT_RANGE_EQ: c_int = 0;
                pub const NFT_RANGE_NEQ: c_int = 1;

                pub const NFT_LOOKUP_F_INV: c_int = 1 << 0;

                pub const NFT_DYNSET_OP_ADD: c_int = 0;
                pub const NFT_DYNSET_OP_UPDATE: c_int = 1;

                pub const NFT_DYNSET_F_INV: c_int = 1 << 0;

                pub const NFT_PAYLOAD_LL_HEADER: c_int = 0;
                pub const NFT_PAYLOAD_NETWORK_HEADER: c_int = 1;
                pub const NFT_PAYLOAD_TRANSPORT_HEADER: c_int = 2;

                pub const NFT_PAYLOAD_CSUM_NONE: c_int = 0;
                pub const NFT_PAYLOAD_CSUM_INET: c_int = 1;

                pub const NFT_META_LEN: c_int = 0;
                pub const NFT_META_PROTOCOL: c_int = 1;
                pub const NFT_META_PRIORITY: c_int = 2;
                pub const NFT_META_MARK: c_int = 3;
                pub const NFT_META_IIF: c_int = 4;
                pub const NFT_META_OIF: c_int = 5;
                pub const NFT_META_IIFNAME: c_int = 6;
                pub const NFT_META_OIFNAME: c_int = 7;
                pub const NFT_META_IIFTYPE: c_int = 8;
                pub const NFT_META_OIFTYPE: c_int = 9;
                pub const NFT_META_SKUID: c_int = 10;
                pub const NFT_META_SKGID: c_int = 11;
                pub const NFT_META_NFTRACE: c_int = 12;
                pub const NFT_META_RTCLASSID: c_int = 13;
                pub const NFT_META_SECMARK: c_int = 14;
                pub const NFT_META_NFPROTO: c_int = 15;
                pub const NFT_META_L4PROTO: c_int = 16;
                pub const NFT_META_BRI_IIFNAME: c_int = 17;
                pub const NFT_META_BRI_OIFNAME: c_int = 18;
                pub const NFT_META_PKTTYPE: c_int = 19;
                pub const NFT_META_CPU: c_int = 20;
                pub const NFT_META_IIFGROUP: c_int = 21;
                pub const NFT_META_OIFGROUP: c_int = 22;
                pub const NFT_META_CGROUP: c_int = 23;
                pub const NFT_META_PRANDOM: c_int = 24;

                pub const NFT_CT_STATE: c_int = 0;
                pub const NFT_CT_DIRECTION: c_int = 1;
                pub const NFT_CT_STATUS: c_int = 2;
                pub const NFT_CT_MARK: c_int = 3;
                pub const NFT_CT_SECMARK: c_int = 4;
                pub const NFT_CT_EXPIRATION: c_int = 5;
                pub const NFT_CT_HELPER: c_int = 6;
                pub const NFT_CT_L3PROTOCOL: c_int = 7;
                pub const NFT_CT_SRC: c_int = 8;
                pub const NFT_CT_DST: c_int = 9;
                pub const NFT_CT_PROTOCOL: c_int = 10;
                pub const NFT_CT_PROTO_SRC: c_int = 11;
                pub const NFT_CT_PROTO_DST: c_int = 12;
                pub const NFT_CT_LABELS: c_int = 13;
                pub const NFT_CT_PKTS: c_int = 14;
                pub const NFT_CT_BYTES: c_int = 15;
                pub const NFT_CT_AVGPKT: c_int = 16;
                pub const NFT_CT_ZONE: c_int = 17;
                pub const NFT_CT_EVENTMASK: c_int = 18;
                pub const NFT_CT_SRC_IP: c_int = 19;
                pub const NFT_CT_DST_IP: c_int = 20;
                pub const NFT_CT_SRC_IP6: c_int = 21;
                pub const NFT_CT_DST_IP6: c_int = 22;

                pub const NFT_LIMIT_PKTS: c_int = 0;
                pub const NFT_LIMIT_PKT_BYTES: c_int = 1;

                pub const NFT_LIMIT_F_INV: c_int = 1 << 0;

                pub const NFT_QUEUE_FLAG_BYPASS: c_int = 0x01;
                pub const NFT_QUEUE_FLAG_CPU_FANOUT: c_int = 0x02;
                pub const NFT_QUEUE_FLAG_MASK: c_int = 0x03;

                pub const NFT_QUOTA_F_INV: c_int = 1 << 0;

                pub const NFT_REJECT_ICMP_UNREACH: c_int = 0;
                pub const NFT_REJECT_TCP_RST: c_int = 1;
                pub const NFT_REJECT_ICMPX_UNREACH: c_int = 2;

                pub const NFT_REJECT_ICMPX_NO_ROUTE: c_int = 0;
                pub const NFT_REJECT_ICMPX_PORT_UNREACH: c_int = 1;
                pub const NFT_REJECT_ICMPX_HOST_UNREACH: c_int = 2;
                pub const NFT_REJECT_ICMPX_ADMIN_PROHIBITED: c_int = 3;

                pub const NFT_NAT_SNAT: c_int = 0;
                pub const NFT_NAT_DNAT: c_int = 1;

                pub const NFT_TRACETYPE_UNSPEC: c_int = 0;
                pub const NFT_TRACETYPE_POLICY: c_int = 1;
                pub const NFT_TRACETYPE_RETURN: c_int = 2;
                pub const NFT_TRACETYPE_RULE: c_int = 3;

                pub const NFT_NG_INCREMENTAL: c_int = 0;
                pub const NFT_NG_RANDOM: c_int = 1;
                
                pub const FF_MAX: __u16 = 0x7f;
                pub const FF_CNT: usize = FF_MAX as usize + 1;
                
                pub const INPUT_PROP_POINTER: __u16 = 0x00;
                pub const INPUT_PROP_DIRECT: __u16 = 0x01;
                pub const INPUT_PROP_BUTTONPAD: __u16 = 0x02;
                pub const INPUT_PROP_SEMI_MT: __u16 = 0x03;
                pub const INPUT_PROP_TOPBUTTONPAD: __u16 = 0x04;
                pub const INPUT_PROP_POINTING_STICK: __u16 = 0x05;
                pub const INPUT_PROP_ACCELEROMETER: __u16 = 0x06;
                pub const INPUT_PROP_MAX: __u16 = 0x1f;
                pub const INPUT_PROP_CNT: usize = INPUT_PROP_MAX as usize + 1;
                pub const EV_MAX: __u16 = 0x1f;
                pub const EV_CNT: usize = EV_MAX as usize + 1;
                pub const SYN_MAX: __u16 = 0xf;
                pub const SYN_CNT: usize = SYN_MAX as usize + 1;
                pub const KEY_MAX: __u16 = 0x2ff;
                pub const KEY_CNT: usize = KEY_MAX as usize + 1;
                pub const REL_MAX: __u16 = 0x0f;
                pub const REL_CNT: usize = REL_MAX as usize + 1;
                pub const ABS_MAX: __u16 = 0x3f;
                pub const ABS_CNT: usize = ABS_MAX as usize + 1;
                pub const SW_MAX: __u16 = 0x10;
                pub const SW_CNT: usize = SW_MAX as usize + 1;
                pub const MSC_MAX: __u16 = 0x07;
                pub const MSC_CNT: usize = MSC_MAX as usize + 1;
                pub const LED_MAX: __u16 = 0x0f;
                pub const LED_CNT: usize = LED_MAX as usize + 1;
                pub const REP_MAX: __u16 = 0x01;
                pub const REP_CNT: usize = REP_MAX as usize + 1;
                pub const SND_MAX: __u16 = 0x07;
                pub const SND_CNT: usize = SND_MAX as usize + 1;
                
                pub const UINPUT_VERSION: c_uint = 5;
                pub const UINPUT_MAX_NAME_SIZE: usize = 80;
                
                pub const FAN_ACCESS: u64 = 0x0000_0001;
                pub const FAN_MODIFY: u64 = 0x0000_0002;
                pub const FAN_ATTRIB: u64 = 0x0000_0004;
                pub const FAN_CLOSE_WRITE: u64 = 0x0000_0008;
                pub const FAN_CLOSE_NOWRITE: u64 = 0x0000_0010;
                pub const FAN_OPEN: u64 = 0x0000_0020;
                pub const FAN_MOVED_FROM: u64 = 0x0000_0040;
                pub const FAN_MOVED_TO: u64 = 0x0000_0080;
                pub const FAN_CREATE: u64 = 0x0000_0100;
                pub const FAN_DELETE: u64 = 0x0000_0200;
                pub const FAN_DELETE_SELF: u64 = 0x0000_0400;
                pub const FAN_MOVE_SELF: u64 = 0x0000_0800;
                pub const FAN_OPEN_EXEC: u64 = 0x0000_1000;

                pub const FAN_Q_OVERFLOW: u64 = 0x0000_4000;
                pub const FAN_FS_ERROR: u64 = 0x0000_8000;

                pub const FAN_OPEN_PERM: u64 = 0x0001_0000;
                pub const FAN_ACCESS_PERM: u64 = 0x0002_0000;
                pub const FAN_OPEN_EXEC_PERM: u64 = 0x0004_0000;

                pub const FAN_EVENT_ON_CHILD: u64 = 0x0800_0000;

                pub const FAN_RENAME: u64 = 0x1000_0000;

                pub const FAN_ONDIR: u64 = 0x4000_0000;

                pub const FAN_CLOSE: u64 = FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE;
                pub const FAN_MOVE: u64 = FAN_MOVED_FROM | FAN_MOVED_TO;

                pub const FAN_CLOEXEC: c_uint = 0x0000_0001;
                pub const FAN_NONBLOCK: c_uint = 0x0000_0002;

                pub const FAN_CLASS_NOTIF: c_uint = 0x0000_0000;
                pub const FAN_CLASS_CONTENT: c_uint = 0x0000_0004;
                pub const FAN_CLASS_PRE_CONTENT: c_uint = 0x0000_0008;

                pub const FAN_UNLIMITED_QUEUE: c_uint = 0x0000_0010;
                pub const FAN_UNLIMITED_MARKS: c_uint = 0x0000_0020;
                pub const FAN_ENABLE_AUDIT: c_uint = 0x0000_0040;

                pub const FAN_REPORT_PIDFD: c_uint = 0x0000_0080;
                pub const FAN_REPORT_TID: c_uint = 0x0000_0100;
                pub const FAN_REPORT_FID: c_uint = 0x0000_0200;
                pub const FAN_REPORT_DIR_FID: c_uint = 0x0000_0400;
                pub const FAN_REPORT_NAME: c_uint = 0x0000_0800;
                pub const FAN_REPORT_TARGET_FID: c_uint = 0x0000_1000;

                pub const FAN_REPORT_DFID_NAME: c_uint = FAN_REPORT_DIR_FID | FAN_REPORT_NAME;
                pub const FAN_REPORT_DFID_NAME_TARGET: c_uint =
                    FAN_REPORT_DFID_NAME | FAN_REPORT_FID | FAN_REPORT_TARGET_FID;

                pub const FAN_MARK_ADD: c_uint = 0x0000_0001;
                pub const FAN_MARK_REMOVE: c_uint = 0x0000_0002;
                pub const FAN_MARK_DONT_FOLLOW: c_uint = 0x0000_0004;
                pub const FAN_MARK_ONLYDIR: c_uint = 0x0000_0008;
                pub const FAN_MARK_IGNORED_MASK: c_uint = 0x0000_0020;
                pub const FAN_MARK_IGNORED_SURV_MODIFY: c_uint = 0x0000_0040;
                pub const FAN_MARK_FLUSH: c_uint = 0x0000_0080;
                pub const FAN_MARK_EVICTABLE: c_uint = 0x0000_0200;
                pub const FAN_MARK_IGNORE: c_uint = 0x0000_0400;

                pub const FAN_MARK_INODE: c_uint = 0x0000_0000;
                pub const FAN_MARK_MOUNT: c_uint = 0x0000_0010;
                pub const FAN_MARK_FILESYSTEM: c_uint = 0x0000_0100;

                pub const FAN_MARK_IGNORE_SURV: c_uint = FAN_MARK_IGNORE | FAN_MARK_IGNORED_SURV_MODIFY;

                pub const FANOTIFY_METADATA_VERSION: u8 = 3;

                pub const FAN_EVENT_INFO_TYPE_FID: u8 = 1;
                pub const FAN_EVENT_INFO_TYPE_DFID_NAME: u8 = 2;
                pub const FAN_EVENT_INFO_TYPE_DFID: u8 = 3;
                pub const FAN_EVENT_INFO_TYPE_PIDFD: u8 = 4;
                pub const FAN_EVENT_INFO_TYPE_ERROR: u8 = 5;

                pub const FAN_EVENT_INFO_TYPE_OLD_DFID_NAME: u8 = 10;
                pub const FAN_EVENT_INFO_TYPE_NEW_DFID_NAME: u8 = 12;

                pub const FAN_RESPONSE_INFO_NONE: u8 = 0;
                pub const FAN_RESPONSE_INFO_AUDIT_RULE: u8 = 1;

                pub const FAN_ALLOW: u32 = 0x01;
                pub const FAN_DENY: u32 = 0x02;
                pub const FAN_AUDIT: u32 = 0x10;
                pub const FAN_INFO: u32 = 0x20;

                pub const FAN_NOFD: c_int = -1;
                pub const FAN_NOPIDFD: c_int = FAN_NOFD;
                pub const FAN_EPIDFD: c_int = -2;
                
                pub const FUTEX_WAIT: c_int = 0;
                pub const FUTEX_WAKE: c_int = 1;
                pub const FUTEX_FD: c_int = 2;
                pub const FUTEX_REQUEUE: c_int = 3;
                pub const FUTEX_CMP_REQUEUE: c_int = 4;
                pub const FUTEX_WAKE_OP: c_int = 5;
                pub const FUTEX_LOCK_PI: c_int = 6;
                pub const FUTEX_UNLOCK_PI: c_int = 7;
                pub const FUTEX_TRYLOCK_PI: c_int = 8;
                pub const FUTEX_WAIT_BITSET: c_int = 9;
                pub const FUTEX_WAKE_BITSET: c_int = 10;
                pub const FUTEX_WAIT_REQUEUE_PI: c_int = 11;
                pub const FUTEX_CMP_REQUEUE_PI: c_int = 12;
                pub const FUTEX_LOCK_PI2: c_int = 13;

                pub const FUTEX_PRIVATE_FLAG: c_int = 128;
                pub const FUTEX_CLOCK_REALTIME: c_int = 256;
                pub const FUTEX_CMD_MASK: c_int = !(FUTEX_PRIVATE_FLAG | FUTEX_CLOCK_REALTIME);

                pub const FUTEX_WAITERS: u32 = 0x80000000;
                pub const FUTEX_OWNER_DIED: u32 = 0x40000000;
                pub const FUTEX_TID_MASK: u32 = 0x3fffffff;

                pub const FUTEX_BITSET_MATCH_ANY: c_uint = 0xffffffff;

                pub const FUTEX_OP_SET: c_int = 0;
                pub const FUTEX_OP_ADD: c_int = 1;
                pub const FUTEX_OP_OR: c_int = 2;
                pub const FUTEX_OP_ANDN: c_int = 3;
                pub const FUTEX_OP_XOR: c_int = 4;

                pub const FUTEX_OP_OPARG_SHIFT: c_int = 8;

                pub const FUTEX_OP_CMP_EQ: c_int = 0;
                pub const FUTEX_OP_CMP_NE: c_int = 1;
                pub const FUTEX_OP_CMP_LT: c_int = 2;
                pub const FUTEX_OP_CMP_LE: c_int = 3;
                pub const FUTEX_OP_CMP_GT: c_int = 4;
                pub const FUTEX_OP_CMP_GE: c_int = 5;

                pub fn FUTEX_OP(op: c_int, oparg: c_int, cmp: c_int, cmparg: c_int) -> c_int {
                    ((op & 0xf) << 28) | ((cmp & 0xf) << 24) | ((oparg & 0xfff) << 12) | (cmparg & 0xfff)
                }
                
                pub const KEXEC_ON_CRASH: c_uint = 0x00000001;
                pub const KEXEC_PRESERVE_CONTEXT: c_uint = 0x00000002;
                pub const KEXEC_ARCH_MASK: c_uint = 0xffff0000;
                pub const KEXEC_FILE_UNLOAD: c_uint = 0x00000001;
                pub const KEXEC_FILE_ON_CRASH: c_uint = 0x00000002;
                pub const KEXEC_FILE_NO_INITRAMFS: c_uint = 0x00000004;
                
                pub const LINUX_REBOOT_MAGIC1: c_uint = 0xfee1dead;
                pub const LINUX_REBOOT_MAGIC2: c_uint = 672274793;
                pub const LINUX_REBOOT_MAGIC2A: c_uint = 85072278;
                pub const LINUX_REBOOT_MAGIC2B: c_uint = 369367448;
                pub const LINUX_REBOOT_MAGIC2C: c_uint = 537993216;

                pub const LINUX_REBOOT_CMD_RESTART: c_uint = 0x01234567;
                pub const LINUX_REBOOT_CMD_HALT: c_uint = 0xCDEF0123;
                pub const LINUX_REBOOT_CMD_CAD_ON: c_uint = 0x89ABCDEF;
                pub const LINUX_REBOOT_CMD_CAD_OFF: c_uint = 0x00000000;
                pub const LINUX_REBOOT_CMD_POWER_OFF: c_uint = 0x4321FEDC;
                pub const LINUX_REBOOT_CMD_RESTART2: c_uint = 0xA1B2C3D4;
                pub const LINUX_REBOOT_CMD_SW_SUSPEND: c_uint = 0xD000FCE2;
                pub const LINUX_REBOOT_CMD_KEXEC: c_uint = 0x45584543;

                pub const REG_EXTENDED: c_int = 1;
                pub const REG_ICASE: c_int = 2;
                pub const REG_NEWLINE: c_int = 4;
                pub const REG_NOSUB: c_int = 8;

                pub const REG_NOTBOL: c_int = 1;
                pub const REG_NOTEOL: c_int = 2;

                pub const REG_ENOSYS: c_int = -1;
                pub const REG_NOMATCH: c_int = 1;
                pub const REG_BADPAT: c_int = 2;
                pub const REG_ECOLLATE: c_int = 3;
                pub const REG_ECTYPE: c_int = 4;
                pub const REG_EESCAPE: c_int = 5;
                pub const REG_ESUBREG: c_int = 6;
                pub const REG_EBRACK: c_int = 7;
                pub const REG_EPAREN: c_int = 8;
                pub const REG_EBRACE: c_int = 9;
                pub const REG_BADBR: c_int = 10;
                pub const REG_ERANGE: c_int = 11;
                pub const REG_ESPACE: c_int = 12;
                pub const REG_BADRPT: c_int = 13;
                
                pub const SO_EE_ORIGIN_NONE: u8 = 0;
                pub const SO_EE_ORIGIN_LOCAL: u8 = 1;
                pub const SO_EE_ORIGIN_ICMP: u8 = 2;
                pub const SO_EE_ORIGIN_ICMP6: u8 = 3;
                pub const SO_EE_ORIGIN_TXSTATUS: u8 = 4;
                pub const SO_EE_ORIGIN_TIMESTAMPING: u8 = SO_EE_ORIGIN_TXSTATUS;
                
                pub const EPERM: c_int = 1;
                pub const ENOENT: c_int = 2;
                pub const ESRCH: c_int = 3;
                pub const EINTR: c_int = 4;
                pub const EIO: c_int = 5;
                pub const ENXIO: c_int = 6;
                pub const E2BIG: c_int = 7;
                pub const ENOEXEC: c_int = 8;
                pub const EBADF: c_int = 9;
                pub const ECHILD: c_int = 10;
                pub const EAGAIN: c_int = 11;
                pub const ENOMEM: c_int = 12;
                pub const EACCES: c_int = 13;
                pub const EFAULT: c_int = 14;
                pub const ENOTBLK: c_int = 15;
                pub const EBUSY: c_int = 16;
                pub const EEXIST: c_int = 17;
                pub const EXDEV: c_int = 18;
                pub const ENODEV: c_int = 19;
                pub const ENOTDIR: c_int = 20;
                pub const EISDIR: c_int = 21;
                pub const EINVAL: c_int = 22;
                pub const ENFILE: c_int = 23;
                pub const EMFILE: c_int = 24;
                pub const ENOTTY: c_int = 25;
                pub const ETXTBSY: c_int = 26;
                pub const EFBIG: c_int = 27;
                pub const ENOSPC: c_int = 28;
                pub const ESPIPE: c_int = 29;
                pub const EROFS: c_int = 30;
                pub const EMLINK: c_int = 31;
                pub const EPIPE: c_int = 32;
                pub const EDOM: c_int = 33;
                pub const ERANGE: c_int = 34;
                pub const EWOULDBLOCK: c_int = EAGAIN;
                
                pub const SCTP_FUTURE_ASSOC: c_int = 0;
                pub const SCTP_CURRENT_ASSOC: c_int = 1;
                pub const SCTP_ALL_ASSOC: c_int = 2;
                pub const SCTP_RTOINFO: c_int = 0;
                pub const SCTP_ASSOCINFO: c_int = 1;
                pub const SCTP_INITMSG: c_int = 2;
                pub const SCTP_NODELAY: c_int = 3;
                pub const SCTP_AUTOCLOSE: c_int = 4;
                pub const SCTP_SET_PEER_PRIMARY_ADDR: c_int = 5;
                pub const SCTP_PRIMARY_ADDR: c_int = 6;
                pub const SCTP_ADAPTATION_LAYER: c_int = 7;
                pub const SCTP_DISABLE_FRAGMENTS: c_int = 8;
                pub const SCTP_PEER_ADDR_PARAMS: c_int = 9;
                pub const SCTP_DEFAULT_SEND_PARAM: c_int = 10;
                pub const SCTP_EVENTS: c_int = 11;
                pub const SCTP_I_WANT_MAPPED_V4_ADDR: c_int = 12;
                pub const SCTP_MAXSEG: c_int = 13;
                pub const SCTP_STATUS: c_int = 14;
                pub const SCTP_GET_PEER_ADDR_INFO: c_int = 15;
                pub const SCTP_DELAYED_ACK_TIME: c_int = 16;
                pub const SCTP_DELAYED_ACK: c_int = SCTP_DELAYED_ACK_TIME;
                pub const SCTP_DELAYED_SACK: c_int = SCTP_DELAYED_ACK_TIME;
                pub const SCTP_CONTEXT: c_int = 17;
                pub const SCTP_FRAGMENT_INTERLEAVE: c_int = 18;
                pub const SCTP_PARTIAL_DELIVERY_POINT: c_int = 19;
                pub const SCTP_MAX_BURST: c_int = 20;
                pub const SCTP_AUTH_CHUNK: c_int = 21;
                pub const SCTP_HMAC_IDENT: c_int = 22;
                pub const SCTP_AUTH_KEY: c_int = 23;
                pub const SCTP_AUTH_ACTIVE_KEY: c_int = 24;
                pub const SCTP_AUTH_DELETE_KEY: c_int = 25;
                pub const SCTP_PEER_AUTH_CHUNKS: c_int = 26;
                pub const SCTP_LOCAL_AUTH_CHUNKS: c_int = 27;
                pub const SCTP_GET_ASSOC_NUMBER: c_int = 28;
                pub const SCTP_GET_ASSOC_ID_LIST: c_int = 29;
                pub const SCTP_AUTO_ASCONF: c_int = 30;
                pub const SCTP_PEER_ADDR_THLDS: c_int = 31;
                pub const SCTP_RECVRCVINFO: c_int = 32;
                pub const SCTP_RECVNXTINFO: c_int = 33;
                pub const SCTP_DEFAULT_SNDINFO: c_int = 34;
                pub const SCTP_AUTH_DEACTIVATE_KEY: c_int = 35;
                pub const SCTP_REUSE_PORT: c_int = 36;
                pub const SCTP_PEER_ADDR_THLDS_V2: c_int = 37;
                pub const SCTP_PR_SCTP_NONE: c_int = 0x0000;
                pub const SCTP_PR_SCTP_TTL: c_int = 0x0010;
                pub const SCTP_PR_SCTP_RTX: c_int = 0x0020;
                pub const SCTP_PR_SCTP_PRIO: c_int = 0x0030;
                pub const SCTP_PR_SCTP_MAX: c_int = SCTP_PR_SCTP_PRIO;
                pub const SCTP_PR_SCTP_MASK: c_int = 0x0030;
                pub const SCTP_ENABLE_RESET_STREAM_REQ: c_int = 0x01;
                pub const SCTP_ENABLE_RESET_ASSOC_REQ: c_int = 0x02;
                pub const SCTP_ENABLE_CHANGE_ASSOC_REQ: c_int = 0x04;
                pub const SCTP_ENABLE_STRRESET_MASK: c_int = 0x07;
                pub const SCTP_STREAM_RESET_INCOMING: c_int = 0x01;
                pub const SCTP_STREAM_RESET_OUTGOING: c_int = 0x02;

                pub const SCTP_INIT: c_int = 0;
                pub const SCTP_SNDRCV: c_int = 1;
                pub const SCTP_SNDINFO: c_int = 2;
                pub const SCTP_RCVINFO: c_int = 3;
                pub const SCTP_NXTINFO: c_int = 4;
                pub const SCTP_PRINFO: c_int = 5;
                pub const SCTP_AUTHINFO: c_int = 6;
                pub const SCTP_DSTADDRV4: c_int = 7;
                pub const SCTP_DSTADDRV6: c_int = 8;

                pub const SCTP_UNORDERED: c_int = 1 << 0;
                pub const SCTP_ADDR_OVER: c_int = 1 << 1;
                pub const SCTP_ABORT: c_int = 1 << 2;
                pub const SCTP_SACK_IMMEDIATELY: c_int = 1 << 3;
                pub const SCTP_SENDALL: c_int = 1 << 6;
                pub const SCTP_PR_SCTP_ALL: c_int = 1 << 7;
                pub const SCTP_NOTIFICATION: c_int = MSG_NOTIFICATION;
                pub const SCTP_EOF: c_int = MSG_FIN;

                /* DCCP socket options */
                pub const DCCP_SOCKOPT_PACKET_SIZE: c_int = 1;
                pub const DCCP_SOCKOPT_SERVICE: c_int = 2;
                pub const DCCP_SOCKOPT_CHANGE_L: c_int = 3;
                pub const DCCP_SOCKOPT_CHANGE_R: c_int = 4;
                pub const DCCP_SOCKOPT_GET_CUR_MPS: c_int = 5;
                pub const DCCP_SOCKOPT_SERVER_TIMEWAIT: c_int = 6;
                pub const DCCP_SOCKOPT_SEND_CSCOV: c_int = 10;
                pub const DCCP_SOCKOPT_RECV_CSCOV: c_int = 11;
                pub const DCCP_SOCKOPT_AVAILABLE_CCIDS: c_int = 12;
                pub const DCCP_SOCKOPT_CCID: c_int = 13;
                pub const DCCP_SOCKOPT_TX_CCID: c_int = 14;
                pub const DCCP_SOCKOPT_RX_CCID: c_int = 15;
                pub const DCCP_SOCKOPT_QPOLICY_ID: c_int = 16;
                pub const DCCP_SOCKOPT_QPOLICY_TXQLEN: c_int = 17;
                pub const DCCP_SOCKOPT_CCID_RX_INFO: c_int = 128;
                pub const DCCP_SOCKOPT_CCID_TX_INFO: c_int = 192;
                /// maximum number of services provided on the same listening port
                pub const DCCP_SERVICE_LIST_MAX_LEN: c_int = 32;

                pub const CTL_KERN: c_int = 1;
                pub const CTL_VM: c_int = 2;
                pub const CTL_NET: c_int = 3;
                pub const CTL_FS: c_int = 5;
                pub const CTL_DEBUG: c_int = 6;
                pub const CTL_DEV: c_int = 7;
                pub const CTL_BUS: c_int = 8;
                pub const CTL_ABI: c_int = 9;
                pub const CTL_CPU: c_int = 10;

                pub const CTL_BUS_ISA: c_int = 1;

                pub const INOTIFY_MAX_USER_INSTANCES: c_int = 1;
                pub const INOTIFY_MAX_USER_WATCHES: c_int = 2;
                pub const INOTIFY_MAX_QUEUED_EVENTS: c_int = 3;

                pub const KERN_OSTYPE: c_int = 1;
                pub const KERN_OSRELEASE: c_int = 2;
                pub const KERN_OSREV: c_int = 3;
                pub const KERN_VERSION: c_int = 4;
                pub const KERN_SECUREMASK: c_int = 5;
                pub const KERN_PROF: c_int = 6;
                pub const KERN_NODENAME: c_int = 7;
                pub const KERN_DOMAINNAME: c_int = 8;
                pub const KERN_PANIC: c_int = 15;
                pub const KERN_REALROOTDEV: c_int = 16;
                pub const KERN_SPARC_REBOOT: c_int = 21;
                pub const KERN_CTLALTDEL: c_int = 22;
                pub const KERN_PRINTK: c_int = 23;
                pub const KERN_NAMETRANS: c_int = 24;
                pub const KERN_PPC_HTABRECLAIM: c_int = 25;
                pub const KERN_PPC_ZEROPAGED: c_int = 26;
                pub const KERN_PPC_POWERSAVE_NAP: c_int = 27;
                pub const KERN_MODPROBE: c_int = 28;
                pub const KERN_SG_BIG_BUFF: c_int = 29;
                pub const KERN_ACCT: c_int = 30;
                pub const KERN_PPC_L2CR: c_int = 31;
                pub const KERN_RTSIGNR: c_int = 32;
                pub const KERN_RTSIGMAX: c_int = 33;
                pub const KERN_SHMMAX: c_int = 34;
                pub const KERN_MSGMAX: c_int = 35;
                pub const KERN_MSGMNB: c_int = 36;
                pub const KERN_MSGPOOL: c_int = 37;
                pub const KERN_SYSRQ: c_int = 38;
                pub const KERN_MAX_THREADS: c_int = 39;
                pub const KERN_RANDOM: c_int = 40;
                pub const KERN_SHMALL: c_int = 41;
                pub const KERN_MSGMNI: c_int = 42;
                pub const KERN_SEM: c_int = 43;
                pub const KERN_SPARC_STOP_A: c_int = 44;
                pub const KERN_SHMMNI: c_int = 45;
                pub const KERN_OVERFLOWUID: c_int = 46;
                pub const KERN_OVERFLOWGID: c_int = 47;
                pub const KERN_SHMPATH: c_int = 48;
                pub const KERN_HOTPLUG: c_int = 49;
                pub const KERN_IEEE_EMULATION_WARNINGS: c_int = 50;
                pub const KERN_S390_USER_DEBUG_LOGGING: c_int = 51;
                pub const KERN_CORE_USES_PID: c_int = 52;
                pub const KERN_TAINTED: c_int = 53;
                pub const KERN_CADPID: c_int = 54;
                pub const KERN_PIDMAX: c_int = 55;
                pub const KERN_CORE_PATTERN: c_int = 56;
                pub const KERN_PANIC_ON_OOPS: c_int = 57;
                pub const KERN_HPPA_PWRSW: c_int = 58;
                pub const KERN_HPPA_UNALIGNED: c_int = 59;
                pub const KERN_PRINTK_RATELIMIT: c_int = 60;
                pub const KERN_PRINTK_RATELIMIT_BURST: c_int = 61;
                pub const KERN_PTY: c_int = 62;
                pub const KERN_NGROUPS_MAX: c_int = 63;
                pub const KERN_SPARC_SCONS_PWROFF: c_int = 64;
                pub const KERN_HZ_TIMER: c_int = 65;
                pub const KERN_UNKNOWN_NMI_PANIC: c_int = 66;
                pub const KERN_BOOTLOADER_TYPE: c_int = 67;
                pub const KERN_RANDOMIZE: c_int = 68;
                pub const KERN_SETUID_DUMPABLE: c_int = 69;
                pub const KERN_SPIN_RETRY: c_int = 70;
                pub const KERN_ACPI_VIDEO_FLAGS: c_int = 71;
                pub const KERN_IA64_UNALIGNED: c_int = 72;
                pub const KERN_COMPAT_LOG: c_int = 73;
                pub const KERN_MAX_LOCK_DEPTH: c_int = 74;
                pub const KERN_NMI_WATCHDOG: c_int = 75;
                pub const KERN_PANIC_ON_NMI: c_int = 76;

                pub const VM_OVERCOMMIT_MEMORY: c_int = 5;
                pub const VM_PAGE_CLUSTER: c_int = 10;
                pub const VM_DIRTY_BACKGROUND: c_int = 11;
                pub const VM_DIRTY_RATIO: c_int = 12;
                pub const VM_DIRTY_WB_CS: c_int = 13;
                pub const VM_DIRTY_EXPIRE_CS: c_int = 14;
                pub const VM_NR_PDFLUSH_THREADS: c_int = 15;
                pub const VM_OVERCOMMIT_RATIO: c_int = 16;
                pub const VM_PAGEBUF: c_int = 17;
                pub const VM_HUGETLB_PAGES: c_int = 18;
                pub const VM_SWAPPINESS: c_int = 19;
                pub const VM_LOWMEM_RESERVE_RATIO: c_int = 20;
                pub const VM_MIN_FREE_KBYTES: c_int = 21;
                pub const VM_MAX_MAP_COUNT: c_int = 22;
                pub const VM_LAPTOP_MODE: c_int = 23;
                pub const VM_BLOCK_DUMP: c_int = 24;
                pub const VM_HUGETLB_GROUP: c_int = 25;
                pub const VM_VFS_CACHE_PRESSURE: c_int = 26;
                pub const VM_LEGACY_VA_LAYOUT: c_int = 27;
                pub const VM_SWAP_TOKEN_TIMEOUT: c_int = 28;
                pub const VM_DROP_PAGECACHE: c_int = 29;
                pub const VM_PERCPU_PAGELIST_FRACTION: c_int = 30;
                pub const VM_ZONE_RECLAIM_MODE: c_int = 31;
                pub const VM_MIN_UNMAPPED: c_int = 32;
                pub const VM_PANIC_ON_OOM: c_int = 33;
                pub const VM_VDSO_ENABLED: c_int = 34;
                pub const VM_MIN_SLAB: c_int = 35;

                pub const NET_CORE: c_int = 1;
                pub const NET_ETHER: c_int = 2;
                pub const NET_802: c_int = 3;
                pub const NET_UNIX: c_int = 4;
                pub const NET_IPV4: c_int = 5;
                pub const NET_IPX: c_int = 6;
                pub const NET_ATALK: c_int = 7;
                pub const NET_NETROM: c_int = 8;
                pub const NET_AX25: c_int = 9;
                pub const NET_BRIDGE: c_int = 10;
                pub const NET_ROSE: c_int = 11;
                pub const NET_IPV6: c_int = 12;
                pub const NET_X25: c_int = 13;
                pub const NET_TR: c_int = 14;
                pub const NET_DECNET: c_int = 15;
                pub const NET_ECONET: c_int = 16;
                pub const NET_SCTP: c_int = 17;
                pub const NET_LLC: c_int = 18;
                pub const NET_NETFILTER: c_int = 19;
                pub const NET_DCCP: c_int = 20;
                pub const NET_IRDA: c_int = 412;
                
                /// I'm a virtual CPU.
                pub const PF_VCPU: c_int = 0x00000001;
                /// I am an IDLE thread.
                pub const PF_IDLE: c_int = 0x00000002;
                /// Getting shut down.
                pub const PF_EXITING: c_int = 0x00000004;
                /// Coredumps should ignore this task.
                pub const PF_POSTCOREDUMP: c_int = 0x00000008;
                /// Task is an IO worker.
                pub const PF_IO_WORKER: c_int = 0x00000010;
                /// I'm a workqueue worker.
                pub const PF_WQ_WORKER: c_int = 0x00000020;
                /// Forked but didn't exec.
                pub const PF_FORKNOEXEC: c_int = 0x00000040;
                /// Process policy on mce errors.
                pub const PF_MCE_PROCESS: c_int = 0x00000080;
                /// Used super-user privileges.
                pub const PF_SUPERPRIV: c_int = 0x00000100;
                /// Dumped core.
                pub const PF_DUMPCORE: c_int = 0x00000200;
                /// Killed by a signal.
                pub const PF_SIGNALED: c_int = 0x00000400;
                /// Allocating memory to free memory.
                pub const PF_MEMALLOC: c_int = 0x00000800;
                /// `set_user()` noticed that `RLIMIT_NPROC` was exceeded.
                pub const PF_NPROC_EXCEEDED: c_int = 0x00001000;
                /// If unset the fpu must be initialized before use.
                pub const PF_USED_MATH: c_int = 0x00002000;
                /// Kernel thread cloned from userspace thread.
                pub const PF_USER_WORKER: c_int = 0x00004000;
                /// This thread should not be frozen.
                pub const PF_NOFREEZE: c_int = 0x00008000;
                /// I am `kswapd`.
                pub const PF_KSWAPD: c_int = 0x00020000;
                /// All allocations inherit `GFP_NOFS`.
                pub const PF_MEMALLOC_NOFS: c_int = 0x00040000;
                /// All allocations inherit `GFP_NOIO`.
                pub const PF_MEMALLOC_NOIO: c_int = 0x00080000;
                
                pub const PF_LOCAL_THROTTLE: c_int = 0x00100000;
                /// I am a kernel thread.
                pub const PF_KTHREAD: c_int = 0x00200000;
                /// Randomize virtual address space.
                pub const PF_RANDOMIZE: c_int = 0x00400000;
                /// Userland is not allowed to meddle with `cpus_mask`.
                pub const PF_NO_SETAFFINITY: c_int = 0x04000000;
                /// Early kill for mce process policy.
                pub const PF_MCE_EARLY: c_int = 0x08000000;
                /// Allocations constrained to zones which allow long term pinning.
                pub const PF_MEMALLOC_PIN: c_int = 0x10000000;
                /// Plug has ts that needs updating.
                pub const PF_BLOCK_TS: c_int = 0x20000000;
                /// This thread called `freeze_processes()` and should not be frozen.
                pub const PF_SUSPEND_TASK: c_int = PF_SUSPEND_TASK_UINT as _;
                
                const PF_SUSPEND_TASK_UINT: c_uint = 0x80000000;

                pub const CSIGNAL: c_int = 0x000000ff;

                pub const SCHED_NORMAL: c_int = 0;
                pub const SCHED_OTHER: c_int = 0;
                pub const SCHED_FIFO: c_int = 1;
                pub const SCHED_RR: c_int = 2;
                pub const SCHED_BATCH: c_int = 3;
                pub const SCHED_IDLE: c_int = 5;
                pub const SCHED_DEADLINE: c_int = 6;

                pub const SCHED_RESET_ON_FORK: c_int = 0x40000000;

                pub const CLONE_PIDFD: c_int = 0x1000;

                pub const SCHED_FLAG_RESET_ON_FORK: c_int = 0x01;
                pub const SCHED_FLAG_RECLAIM: c_int = 0x02;
                pub const SCHED_FLAG_DL_OVERRUN: c_int = 0x04;
                pub const SCHED_FLAG_KEEP_POLICY: c_int = 0x08;
                pub const SCHED_FLAG_KEEP_PARAMS: c_int = 0x10;
                pub const SCHED_FLAG_UTIL_CLAMP_MIN: c_int = 0x20;
                pub const SCHED_FLAG_UTIL_CLAMP_MAX: c_int = 0x40;
                
                pub const XDP_SHARED_UMEM: __u16 = 1 << 0;
                pub const XDP_COPY: __u16 = 1 << 1;
                pub const XDP_ZEROCOPY: __u16 = 1 << 2;
                pub const XDP_USE_NEED_WAKEUP: __u16 = 1 << 3;
                pub const XDP_USE_SG: __u16 = 1 << 4;

                pub const XDP_UMEM_UNALIGNED_CHUNK_FLAG: __u32 = 1 << 0;

                pub const XDP_RING_NEED_WAKEUP: __u32 = 1 << 0;

                pub const XDP_MMAP_OFFSETS: c_int = 1;
                pub const XDP_RX_RING: c_int = 2;
                pub const XDP_TX_RING: c_int = 3;
                pub const XDP_UMEM_REG: c_int = 4;
                pub const XDP_UMEM_FILL_RING: c_int = 5;
                pub const XDP_UMEM_COMPLETION_RING: c_int = 6;
                pub const XDP_STATISTICS: c_int = 7;
                pub const XDP_OPTIONS: c_int = 8;

                pub const XDP_OPTIONS_ZEROCOPY: __u32 = 1 << 0;

                pub const XDP_PGOFF_RX_RING: off_t = 0;
                pub const XDP_PGOFF_TX_RING: off_t = 0x80000000;
                pub const XDP_UMEM_PGOFF_FILL_RING: c_ulonglong = 0x100000000;
                pub const XDP_UMEM_PGOFF_COMPLETION_RING: c_ulonglong = 0x180000000;

                pub const XSK_UNALIGNED_BUF_OFFSET_SHIFT: c_int = 48;
                pub const XSK_UNALIGNED_BUF_ADDR_MASK: c_ulonglong = (1 << XSK_UNALIGNED_BUF_OFFSET_SHIFT) - 1;

                pub const XDP_PKT_CONTD: __u32 = 1 << 0;

                pub const XDP_UMEM_TX_SW_CSUM: __u32 = 1 << 1;
                pub const XDP_UMEM_TX_METADATA_LEN: __u32 = 1 << 2;

                pub const XDP_TXMD_FLAGS_TIMESTAMP: __u32 = 1 << 0;
                pub const XDP_TXMD_FLAGS_CHECKSUM: __u32 = 1 << 1;

                pub const XDP_TX_METADATA: __u32 = 1 << 1;

                pub const SOL_XDP: c_int = 283;
                
                pub const MOUNT_ATTR_RDONLY: __u64 = 0x00000001;
                pub const MOUNT_ATTR_NOSUID: __u64 = 0x00000002;
                pub const MOUNT_ATTR_NODEV: __u64 = 0x00000004;
                pub const MOUNT_ATTR_NOEXEC: __u64 = 0x00000008;
                pub const MOUNT_ATTR__ATIME: __u64 = 0x00000070;
                pub const MOUNT_ATTR_RELATIME: __u64 = 0x00000000;
                pub const MOUNT_ATTR_NOATIME: __u64 = 0x00000010;
                pub const MOUNT_ATTR_STRICTATIME: __u64 = 0x00000020;
                pub const MOUNT_ATTR_NODIRATIME: __u64 = 0x00000080;
                pub const MOUNT_ATTR_IDMAP: __u64 = 0x00100000;
                pub const MOUNT_ATTR_NOSYMFOLLOW: __u64 = 0x00200000;

                pub const MOUNT_ATTR_SIZE_VER0: c_int = 32;
                
                pub const NT_PRSTATUS: c_int = 1;
                pub const NT_PRFPREG: c_int = 2;
                pub const NT_FPREGSET: c_int = 2;
                pub const NT_PRPSINFO: c_int = 3;
                pub const NT_PRXREG: c_int = 4;
                pub const NT_TASKSTRUCT: c_int = 4;
                pub const NT_PLATFORM: c_int = 5;
                pub const NT_AUXV: c_int = 6;
                pub const NT_GWINDOWS: c_int = 7;
                pub const NT_ASRS: c_int = 8;
                pub const NT_PSTATUS: c_int = 10;
                pub const NT_PSINFO: c_int = 13;
                pub const NT_PRCRED: c_int = 14;
                pub const NT_UTSNAME: c_int = 15;
                pub const NT_LWPSTATUS: c_int = 16;
                pub const NT_LWPSINFO: c_int = 17;
                pub const NT_PRFPXREG: c_int = 20;

                pub const SCHED_FLAG_KEEP_ALL: c_int = SCHED_FLAG_KEEP_POLICY | SCHED_FLAG_KEEP_PARAMS;

                pub const SCHED_FLAG_UTIL_CLAMP: c_int = SCHED_FLAG_UTIL_CLAMP_MIN | SCHED_FLAG_UTIL_CLAMP_MAX;

                pub const SCHED_FLAG_ALL: c_int = SCHED_FLAG_RESET_ON_FORK
                | SCHED_FLAG_RECLAIM
                | SCHED_FLAG_DL_OVERRUN
                | SCHED_FLAG_KEEP_ALL
                | SCHED_FLAG_UTIL_CLAMP;
                    
                pub const EPIOCSPARAMS: Ioctl = 0x40088a01;
                pub const EPIOCGPARAMS: Ioctl = 0x80088a02;
                
                pub const SI_DETHREAD: c_int = -7;
                pub const TRAP_PERF: c_int = 6;

                f!
                {
                    pub fn NLA_ALIGN(len: c_int) -> c_int { return ((len) + NLA_ALIGNTO - 1) & !(NLA_ALIGNTO - 1); }

                    pub fn CMSG_NXTHDR(mhdr: *const msghdr, cmsg: *const cmsghdr) -> *mut cmsghdr
                    {
                        if ((*cmsg).cmsg_len as usize) < size_of::<cmsghdr>()
                        {
                            return ::ptr::null_mut::<cmsghdr>();
                        }

                        let next = (cmsg as usize + super::CMSG_ALIGN((*cmsg).cmsg_len as usize)) as *mut cmsghdr;
                        let max = (*mhdr).msg_control as usize + (*mhdr).msg_controllen as usize;
                        
                        if (next.wrapping_offset(1)) as usize > max 
                        || next as usize + super::CMSG_ALIGN((*next).cmsg_len as usize) > max
                        { ::ptr::null_mut::<cmsghdr>() }

                        else { next }
                    }

                    pub fn CPU_ALLOC_SIZE(count: c_int) -> size_t
                    {
                        let _dummy: cpu_set_t = ::mem::zeroed();
                        let size_in_bits = 8 * size_of_val(&_dummy.bits[0]);
                        ((count as size_t + size_in_bits - 1) / 8) as size_t
                    }

                    pub fn CPU_ZERO(cpuset: &mut cpu_set_t) -> () 
                    {
                        for slot in &mut cpuset.bits
                        {
                            *slot = 0;
                        }
                    }

                    pub fn CPU_SET(cpu: usize, cpuset: &mut cpu_set_t) -> () 
                    {
                        let size_in_bits = 8 * size_of_val(&cpuset.bits[0]);
                        let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);
                        cpuset.bits[idx] |= 1 << offset;
                    }

                    pub fn CPU_CLR(cpu: usize, cpuset: &mut cpu_set_t) -> () 
                    {
                        let size_in_bits = 8 * size_of_val(&cpuset.bits[0]);
                        let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);
                        cpuset.bits[idx] &= !(1 << offset);
                    }

                    pub fn CPU_ISSET(cpu: usize, cpuset: &cpu_set_t) -> bool 
                    {
                        let size_in_bits = 8 * size_of_val(&cpuset.bits[0]);
                        let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);
                        0 != (cpuset.bits[idx] & (1 << offset))
                    }

                    pub fn CPU_COUNT_S(size: usize, cpuset: &cpu_set_t) -> c_int
                    {
                        let mut s: u32 = 0;
                        let size_of_mask = size_of_val(&cpuset.bits[0]);
                        
                        for i in &cpuset.bits[..(size / size_of_mask)]
                        {
                            s += i.count_ones();
                        }

                        s as c_int
                    }

                    pub fn CPU_COUNT(cpuset: &cpu_set_t) -> c_int { CPU_COUNT_S(size_of::<cpu_set_t>(), cpuset) }

                    pub fn CPU_EQUAL(set1: &cpu_set_t, set2: &cpu_set_t) -> bool { set1.bits == set2.bits }

                    pub fn SCTP_PR_INDEX(policy: c_int) -> c_int { policy >> (4 - 1) }

                    pub fn SCTP_PR_POLICY(policy: c_int) -> c_int { policy & SCTP_PR_SCTP_MASK }

                    pub fn SCTP_PR_SET_POLICY(flags: &mut c_int, policy: c_int) -> () 
                    {
                        *flags &= !SCTP_PR_SCTP_MASK;
                        *flags |= policy;
                    }

                    pub fn IPTOS_TOS(tos: u8) -> u8 { tos & IPTOS_TOS_MASK }

                    pub fn IPTOS_PREC(tos: u8) -> u8 { tos & IPTOS_PREC_MASK }

                    pub fn RT_TOS(tos: u8) -> u8 { tos & IPTOS_TOS_MASK }

                    pub fn RT_ADDRCLASS(flags: u32) -> u32 { flags >> 23 }

                    pub fn RT_LOCALADDR(flags: u32) -> bool 
                    { (flags & RTF_ADDRCLASSMASK) == (RTF_LOCAL | RTF_INTERFACE) }

                    pub fn SO_EE_OFFENDER(ee: *const sock_extended_err) -> *mut sockaddr 
                    { ee.offset(1) as *mut sockaddr }

                    pub fn TPACKET_ALIGN(x: usize) -> usize { (x + TPACKET_ALIGNMENT - 1) & !(TPACKET_ALIGNMENT - 1) }

                    pub fn BPF_CLASS(code: __u32) -> __u32 { code & 0x07 }

                    pub fn BPF_SIZE(code: __u32) -> __u32 { code & 0x18 }

                    pub fn BPF_MODE(code: __u32) -> __u32 { code & 0xe0 }

                    pub fn BPF_OP(code: __u32) -> __u32 { code & 0xf0 }

                    pub fn BPF_SRC(code: __u32) -> __u32 { code & 0x08 }

                    pub fn BPF_RVAL(code: __u32) -> __u32 { code & 0x18 }

                    pub fn BPF_MISCOP(code: __u32) -> __u32 { code & 0xf8 }

                    pub fn BPF_STMT(code: __u16, k: __u32) -> sock_filter 
                    {
                        sock_filter 
                        {
                            code,
                            jt: 0,
                            jf: 0,
                            k,
                        }
                    }

                    pub fn BPF_JUMP(code: __u16, k: __u32, jt: __u8, jf: __u8) -> sock_filter 
                    { sock_filter { code, jt, jf, k } }

                    pub fn ELF32_R_SYM(val: Elf32_Word) -> Elf32_Word { val >> 8 }

                    pub fn ELF32_R_TYPE(val: Elf32_Word) -> Elf32_Word { val & 0xff }

                    pub fn ELF32_R_INFO(sym: Elf32_Word, t: Elf32_Word) -> Elf32_Word { sym << (8 + t) & 0xff }

                    pub fn ELF64_R_SYM(val: Elf64_Xword) -> Elf64_Xword { val >> 32 }

                    pub fn ELF64_R_TYPE(val: Elf64_Xword) -> Elf64_Xword { val & 0xffffffff }

                    pub fn ELF64_R_INFO(sym: Elf64_Xword, t: Elf64_Xword) -> Elf64_Xword { sym << (32 + t) }
                }

                safe_f! 
                {
                    pub {const} fn makedev(major: c_uint, minor: c_uint) -> dev_t 
                    {
                        let major = major as dev_t;
                        let minor = minor as dev_t;
                        let mut dev = 0;
                        dev |= (major & 0x00000fff) << 8;
                        dev |= (major & 0xfffff000) << 32;
                        dev |= (minor & 0x000000ff) << 0;
                        dev |= (minor & 0xffffff00) << 12;
                        dev
                    }

                    pub {const} fn major(dev: dev_t) -> c_uint 
                    {
                        let mut major = 0;
                        major |= (dev & 0x00000000000fff00) >> 8;
                        major |= (dev & 0xfffff00000000000) >> 32;
                        major as c_uint
                    }

                    pub {const} fn minor(dev: dev_t) -> c_uint
                    {
                        let mut minor = 0;
                        minor |= (dev & 0x00000000000000ff) >> 0;
                        minor |= (dev & 0x00000ffffff00000) >> 12;
                        minor as c_uint
                    }

                    pub {const} fn SCTP_PR_TTL_ENABLED(policy: c_int) -> bool { policy == SCTP_PR_SCTP_TTL }

                    pub {const} fn SCTP_PR_RTX_ENABLED(policy: c_int) -> bool { policy == SCTP_PR_SCTP_RTX }

                    pub {const} fn SCTP_PR_PRIO_ENABLED(policy: c_int) -> bool { policy == SCTP_PR_SCTP_PRIO }
                }

                cfg_if!
                {
                    if #[cfg(all
                    (
                        any(target_env = "gnu", target_env = "musl", target_env = "ohos"),
                        any(target_arch = "x86_64", target_arch = "x86")
                    ))]
                    {
                        extern "C"
                        {
                            pub fn iopl(level: c_int) -> c_int;
                            pub fn ioperm(from: c_ulong, num: c_ulong, turn_on: c_int) -> c_int;
                        }
                    }
                }

                cfg_if!
                {
                    if #[cfg(all(not(target_env = "uclibc"), not(target_env = "ohos")))]
                    {
                        extern "C"
                        {
                            #[cfg_attr(gnu_file_offset_bits64, link_name = "aio_read64")]
                            pub fn aio_read(aiocbp: *mut aiocb) -> c_int;
                            #[cfg_attr(gnu_file_offset_bits64, link_name = "aio_write64")]
                            pub fn aio_write(aiocbp: *mut aiocb) -> c_int;
                            pub fn aio_fsync(op: c_int, aiocbp: *mut aiocb) -> c_int;
                            #[cfg_attr(gnu_file_offset_bits64, link_name = "aio_error64")]
                            pub fn aio_error(aiocbp: *const aiocb) -> c_int;
                            #[cfg_attr(gnu_file_offset_bits64, link_name = "aio_return64")]
                            pub fn aio_return(aiocbp: *mut aiocb) -> ssize_t;
                            #[cfg_attr(gnu_time_bits64, link_name = "__aio_suspend_time64")]
                            pub fn aio_suspend(
                                aiocb_list: *const *const aiocb,
                                nitems: c_int,
                                timeout: *const timespec,
                            ) -> c_int;
                            #[cfg_attr(gnu_file_offset_bits64, link_name = "aio_cancel64")]
                            pub fn aio_cancel(fd: c_int, aiocbp: *mut aiocb) -> c_int;
                            #[cfg_attr(gnu_file_offset_bits64, link_name = "lio_listio64")]
                            pub fn lio_listio(
                                mode: c_int,
                                aiocb_list: *const *mut aiocb,
                                nitems: c_int,
                                sevp: *mut sigevent,
                            ) -> c_int;
                        }
                    }
                }

                cfg_if! 
                {
                    if #[cfg(not(target_env = "uclibc"))] 
                    {
                        extern "C" 
                        {
                            #[cfg_attr(gnu_file_offset_bits64, link_name = "pwritev64")]
                            pub fn pwritev(
                                fd: c_int,
                                iov: *const iovec,
                                iovcnt: c_int,
                                offset: off_t,
                            ) -> ssize_t;
                            #[cfg_attr(gnu_file_offset_bits64, link_name = "preadv64")]
                            pub fn preadv(
                                fd: c_int,
                                iov: *const iovec,
                                iovcnt: c_int,
                                offset: off_t,
                            ) -> ssize_t;
                            pub fn getnameinfo(
                                sa: *const sockaddr,
                                salen: socklen_t,
                                host: *mut c_char,
                                hostlen: socklen_t,
                                serv: *mut c_char,
                                servlen: socklen_t,
                                flags: c_int,
                            ) -> c_int;
                            pub fn getloadavg(loadavg: *mut c_double, nelem: c_int) -> c_int;
                            pub fn process_vm_readv(
                                pid: pid_t,
                                local_iov: *const iovec,
                                liovcnt: c_ulong,
                                remote_iov: *const iovec,
                                riovcnt: c_ulong,
                                flags: c_ulong,
                            ) -> isize;
                            pub fn process_vm_writev(
                                pid: pid_t,
                                local_iov: *const iovec,
                                liovcnt: c_ulong,
                                remote_iov: *const iovec,
                                riovcnt: c_ulong,
                                flags: c_ulong,
                            ) -> isize;
                            #[cfg_attr(gnu_time_bits64, link_name = "__futimes64")]
                            pub fn futimes(fd: c_int, times: *const timeval) -> c_int;
                        }
                    }
                }

                extern "C" 
                {
                    pub fn getspnam_r(
                        name: *const c_char,
                        spbuf: *mut spwd,
                        buf: *mut c_char,
                        buflen: size_t,
                        spbufp: *mut *mut spwd,
                    ) -> c_int;

                    pub fn mq_open(name: *const c_char, oflag: c_int, ...) -> mqd_t;
                    pub fn mq_close(mqd: mqd_t) -> c_int;
                    pub fn mq_unlink(name: *const c_char) -> c_int;
                    pub fn mq_receive(
                        mqd: mqd_t,
                        msg_ptr: *mut c_char,
                        msg_len: size_t,
                        msg_prio: *mut c_uint,
                    ) -> ssize_t;
                    #[cfg_attr(gnu_time_bits64, link_name = "__mq_timedreceive_time64")]
                    pub fn mq_timedreceive(
                        mqd: mqd_t,
                        msg_ptr: *mut c_char,
                        msg_len: size_t,
                        msg_prio: *mut c_uint,
                        abs_timeout: *const timespec,
                    ) -> ssize_t;
                    pub fn mq_send(
                        mqd: mqd_t,
                        msg_ptr: *const c_char,
                        msg_len: size_t,
                        msg_prio: c_uint,
                    ) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__mq_timedsend_time64")]
                    pub fn mq_timedsend(
                        mqd: mqd_t,
                        msg_ptr: *const c_char,
                        msg_len: size_t,
                        msg_prio: c_uint,
                        abs_timeout: *const timespec,
                    ) -> c_int;
                    pub fn mq_getattr(mqd: mqd_t, attr: *mut mq_attr) -> c_int;
                    pub fn mq_setattr(
                        mqd: mqd_t,
                        newattr: *const mq_attr,
                        oldattr: *mut mq_attr,
                    ) -> c_int;

                    pub fn pthread_mutex_consistent(mutex: *mut pthread_mutex_t) -> c_int;
                    pub fn pthread_cancel(thread: pthread_t) -> c_int;
                    pub fn pthread_mutexattr_getrobust(
                        attr: *const pthread_mutexattr_t,
                        robustness: *mut c_int,
                    ) -> c_int;
                    pub fn pthread_mutexattr_setrobust(
                        attr: *mut pthread_mutexattr_t,
                        robustness: c_int,
                    ) -> c_int;
                }

                extern "C" 
                {
                    #[cfg_attr
                    (
                        not(any(target_env = "musl", target_env = "ohos")),
                        link_name = "__xpg_strerror_r"
                    )]
                    pub fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: size_t) -> c_int;

                    pub fn abs(i: c_int) -> c_int;
                    pub fn labs(i: c_long) -> c_long;
                    pub fn rand() -> c_int;
                    pub fn srand(seed: c_uint);

                    pub fn drand48() -> c_double;
                    pub fn erand48(xseed: *mut c_ushort) -> c_double;
                    pub fn lrand48() -> c_long;
                    pub fn nrand48(xseed: *mut c_ushort) -> c_long;
                    pub fn mrand48() -> c_long;
                    pub fn jrand48(xseed: *mut c_ushort) -> c_long;
                    pub fn srand48(seed: c_long);
                    pub fn seed48(xseed: *mut c_ushort) -> *mut c_ushort;
                    pub fn lcong48(p: *mut c_ushort);

                    #[cfg_attr(gnu_time_bits64, link_name = "__lutimes64")]
                    pub fn lutimes(file: *const c_char, times: *const timeval) -> c_int;

                    pub fn setpwent();
                    pub fn endpwent();
                    pub fn getpwent() -> *mut passwd;
                    pub fn setgrent();
                    pub fn endgrent();
                    pub fn getgrent() -> *mut group;
                    pub fn setspent();
                    pub fn endspent();
                    pub fn getspent() -> *mut spwd;

                    pub fn getspnam(name: *const c_char) -> *mut spwd;

                    pub fn shm_open(name: *const c_char, oflag: c_int, mode: mode_t) -> c_int;
                    pub fn shm_unlink(name: *const c_char) -> c_int;
                    
                    pub fn shmget(key: key_t, size: size_t, shmflg: c_int) -> c_int;
                    pub fn shmat(shmid: c_int, shmaddr: *const c_void, shmflg: c_int) -> *mut c_void;
                    pub fn shmdt(shmaddr: *const c_void) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__shmctl64")]
                    pub fn shmctl(shmid: c_int, cmd: c_int, buf: *mut shmid_ds) -> c_int;
                    pub fn ftok(pathname: *const c_char, proj_id: c_int) -> key_t;
                    pub fn semget(key: key_t, nsems: c_int, semflag: c_int) -> c_int;
                    pub fn semop(semid: c_int, sops: *mut sembuf, nsops: size_t) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__semctl64")]
                    pub fn semctl(semid: c_int, semnum: c_int, cmd: c_int, ...) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__msgctl64")]
                    pub fn msgctl(msqid: c_int, cmd: c_int, buf: *mut msqid_ds) -> c_int;
                    pub fn msgget(key: key_t, msgflg: c_int) -> c_int;
                    pub fn msgrcv(
                        msqid: c_int,
                        msgp: *mut c_void,
                        msgsz: size_t,
                        msgtyp: c_long,
                        msgflg: c_int,
                    ) -> ssize_t;
                    pub fn msgsnd(msqid: c_int, msgp: *const c_void, msgsz: size_t, msgflg: c_int) -> c_int;

                    pub fn mprotect(addr: *mut c_void, len: size_t, prot: c_int) -> c_int;
                    pub fn __errno_location() -> *mut c_int;

                    #[cfg_attr(gnu_file_offset_bits64, link_name = "fallocate64")]
                    pub fn fallocate(fd: c_int, mode: c_int, offset: off_t, len: off_t) -> c_int;
                    #[cfg_attr(gnu_file_offset_bits64, link_name = "posix_fallocate64")]
                    pub fn posix_fallocate(fd: c_int, offset: off_t, len: off_t) -> c_int;
                    pub fn readahead(fd: c_int, offset: off64_t, count: size_t) -> ssize_t;
                    pub fn getxattr(
                        path: *const c_char,
                        name: *const c_char,
                        value: *mut c_void,
                        size: size_t,
                    ) -> ssize_t;
                    pub fn lgetxattr(
                        path: *const c_char,
                        name: *const c_char,
                        value: *mut c_void,
                        size: size_t,
                    ) -> ssize_t;
                    pub fn fgetxattr(
                        filedes: c_int,
                        name: *const c_char,
                        value: *mut c_void,
                        size: size_t,
                    ) -> ssize_t;
                    pub fn setxattr(
                        path: *const c_char,
                        name: *const c_char,
                        value: *const c_void,
                        size: size_t,
                        flags: c_int,
                    ) -> c_int;
                    pub fn lsetxattr(
                        path: *const c_char,
                        name: *const c_char,
                        value: *const c_void,
                        size: size_t,
                        flags: c_int,
                    ) -> c_int;
                    pub fn fsetxattr(
                        filedes: c_int,
                        name: *const c_char,
                        value: *const c_void,
                        size: size_t,
                        flags: c_int,
                    ) -> c_int;
                    pub fn listxattr(path: *const c_char, list: *mut c_char, size: size_t) -> ssize_t;
                    pub fn llistxattr(path: *const c_char, list: *mut c_char, size: size_t) -> ssize_t;
                    pub fn flistxattr(filedes: c_int, list: *mut c_char, size: size_t) -> ssize_t;
                    pub fn removexattr(path: *const c_char, name: *const c_char) -> c_int;
                    pub fn lremovexattr(path: *const c_char, name: *const c_char) -> c_int;
                    pub fn fremovexattr(filedes: c_int, name: *const c_char) -> c_int;
                    pub fn signalfd(fd: c_int, mask: *const sigset_t, flags: c_int) -> c_int;
                    pub fn timerfd_create(clockid: clockid_t, flags: c_int) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__timerfd_gettime64")]
                    pub fn timerfd_gettime(fd: c_int, curr_value: *mut itimerspec) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__timerfd_settime64")]
                    pub fn timerfd_settime(
                        fd: c_int,
                        flags: c_int,
                        new_value: *const itimerspec,
                        old_value: *mut itimerspec,
                    ) -> c_int;
                    pub fn quotactl(cmd: c_int, special: *const c_char, id: c_int, data: *mut c_char) -> c_int;
                    pub fn epoll_pwait(
                        epfd: c_int,
                        events: *mut epoll_event,
                        maxevents: c_int,
                        timeout: c_int,
                        sigmask: *const sigset_t,
                    ) -> c_int;
                    pub fn dup3(oldfd: c_int, newfd: c_int, flags: c_int) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__sigtimedwait64")]
                    pub fn sigtimedwait(
                        set: *const sigset_t,
                        info: *mut siginfo_t,
                        timeout: *const timespec,
                    ) -> c_int;
                    pub fn sigwaitinfo(set: *const sigset_t, info: *mut siginfo_t) -> c_int;
                    pub fn nl_langinfo_l(item: nl_item, locale: locale_t) -> *mut c_char;
                    pub fn accept4(
                        fd: c_int,
                        addr: *mut sockaddr,
                        len: *mut socklen_t,
                        flg: c_int,
                    ) -> c_int;
                    pub fn pthread_getaffinity_np(
                        thread: pthread_t,
                        cpusetsize: size_t,
                        cpuset: *mut cpu_set_t,
                    ) -> c_int;
                    pub fn pthread_setaffinity_np(
                        thread: pthread_t,
                        cpusetsize: size_t,
                        cpuset: *const cpu_set_t,
                    ) -> c_int;
                    pub fn pthread_setschedprio(native: pthread_t, priority: c_int) -> c_int;
                    pub fn reboot(how_to: c_int) -> c_int;
                    pub fn setfsgid(gid: gid_t) -> c_int;
                    pub fn setfsuid(uid: uid_t) -> c_int;
                    
                    pub fn mkfifoat(dirfd: c_int, pathname: *const c_char, mode: mode_t) -> c_int;
                    pub fn if_nameindex() -> *mut if_nameindex;
                    pub fn if_freenameindex(ptr: *mut if_nameindex);
                    pub fn sync_file_range(fd: c_int, offset: off64_t, nbytes: off64_t, flags: c_uint) -> c_int;
                    pub fn mremap(
                        addr: *mut c_void,
                        len: size_t,
                        new_len: size_t,
                        flags: c_int,
                        ...
                    ) -> *mut c_void;

                    #[cfg_attr(gnu_time_bits64, link_name = "__glob64_time64")]
                    #[cfg_attr(
                        all(not(gnu_time_bits64), gnu_file_offset_bits64),
                        link_name = "glob64"
                    )]
                    pub fn glob(
                        pattern: *const c_char,
                        flags: c_int,
                        errfunc: Option<extern "C" fn(epath: *const c_char, errno: c_int) -> c_int>,
                        pglob: *mut glob_t,
                    ) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__globfree64_time64")]
                    #[cfg_attr(
                        all(not(gnu_time_bits64), gnu_file_offset_bits64),
                        link_name = "globfree64"
                    )]
                    pub fn globfree(pglob: *mut glob_t);

                    pub fn posix_madvise(addr: *mut c_void, len: size_t, advice: c_int) -> c_int;

                    pub fn seekdir(dirp: *mut DIR, loc: c_long);

                    pub fn telldir(dirp: *mut DIR) -> c_long;
                    pub fn madvise(addr: *mut c_void, len: size_t, advice: c_int) -> c_int;

                    pub fn msync(addr: *mut c_void, len: size_t, flags: c_int) -> c_int;
                    pub fn remap_file_pages(
                        addr: *mut c_void,
                        size: size_t,
                        prot: c_int,
                        pgoff: size_t,
                        flags: c_int,
                    ) -> c_int;
                    pub fn recvfrom(
                        socket: c_int,
                        buf: *mut c_void,
                        len: size_t,
                        flags: c_int,
                        addr: *mut sockaddr,
                        addrlen: *mut socklen_t,
                    ) -> ssize_t;
                    #[cfg_attr(gnu_file_offset_bits64, link_name = "mkstemps64")]
                    pub fn mkstemps(template: *mut c_char, suffixlen: c_int) -> c_int;

                    pub fn nl_langinfo(item: nl_item) -> *mut c_char;

                    pub fn vhangup() -> c_int;
                    pub fn sync();
                    pub fn syncfs(fd: c_int) -> c_int;
                    pub fn syscall(num: c_long, ...) -> c_long;
                    pub fn sched_getaffinity(
                        pid: pid_t,
                        cpusetsize: size_t,
                        cpuset: *mut cpu_set_t,
                    ) -> c_int;
                    pub fn sched_setaffinity(
                        pid: pid_t,
                        cpusetsize: size_t,
                        cpuset: *const cpu_set_t,
                    ) -> c_int;
                    pub fn epoll_create(size: c_int) -> c_int;
                    pub fn epoll_create1(flags: c_int) -> c_int;
                    pub fn epoll_wait(
                        epfd: c_int,
                        events: *mut epoll_event,
                        maxevents: c_int,
                        timeout: c_int,
                    ) -> c_int;
                    pub fn epoll_ctl(epfd: c_int, op: c_int, fd: c_int, event: *mut epoll_event) -> c_int;
                    pub fn pthread_getschedparam(
                        native: pthread_t,
                        policy: *mut c_int,
                        param: *mut sched_param,
                    ) -> c_int;
                    pub fn unshare(flags: c_int) -> c_int;
                    pub fn umount(target: *const c_char) -> c_int;
                    pub fn sched_get_priority_max(policy: c_int) -> c_int;
                    pub fn tee(fd_in: c_int, fd_out: c_int, len: size_t, flags: c_uint) -> ssize_t;
                    #[cfg_attr(gnu_time_bits64, link_name = "__settimeofday64")]
                    pub fn settimeofday(tv: *const timeval, tz: *const timezone) -> c_int;
                    pub fn splice(
                        fd_in: c_int,
                        off_in: *mut loff_t,
                        fd_out: c_int,
                        off_out: *mut loff_t,
                        len: size_t,
                        flags: c_uint,
                    ) -> ssize_t;
                    pub fn eventfd(init: c_uint, flags: c_int) -> c_int;
                    pub fn eventfd_read(fd: c_int, value: *mut eventfd_t) -> c_int;
                    pub fn eventfd_write(fd: c_int, value: eventfd_t) -> c_int;

                    #[cfg_attr(gnu_time_bits64, link_name = "__sched_rr_get_interval64")]
                    pub fn sched_rr_get_interval(pid: pid_t, tp: *mut timespec) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__sem_timedwait64")]
                    pub fn sem_timedwait(sem: *mut sem_t, abstime: *const timespec) -> c_int;
                    pub fn sem_getvalue(sem: *mut sem_t, sval: *mut c_int) -> c_int;
                    pub fn sched_setparam(pid: pid_t, param: *const sched_param) -> c_int;
                    pub fn setns(fd: c_int, nstype: c_int) -> c_int;
                    pub fn swapoff(path: *const c_char) -> c_int;
                    pub fn vmsplice(fd: c_int, iov: *const iovec, nr_segs: size_t, flags: c_uint)
                        -> ssize_t;
                    pub fn mount(
                        src: *const c_char,
                        target: *const c_char,
                        fstype: *const c_char,
                        flags: c_ulong,
                        data: *const c_void,
                    ) -> c_int;
                    pub fn personality(persona: c_ulong) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__prctl_time64")]
                    pub fn prctl(option: c_int, ...) -> c_int;
                    pub fn sched_getparam(pid: pid_t, param: *mut sched_param) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__ppoll64")]
                    pub fn ppoll(
                        fds: *mut pollfd,
                        nfds: nfds_t,
                        timeout: *const timespec,
                        sigmask: *const sigset_t,
                    ) -> c_int;
                    pub fn pthread_mutexattr_getprotocol(
                        attr: *const pthread_mutexattr_t,
                        protocol: *mut c_int,
                    ) -> c_int;
                    pub fn pthread_mutexattr_setprotocol(attr: *mut pthread_mutexattr_t, protocol: c_int) -> c_int;

                    #[cfg_attr(gnu_time_bits64, link_name = "__pthread_mutex_timedlock64")]
                    pub fn pthread_mutex_timedlock(
                        lock: *mut pthread_mutex_t,
                        abstime: *const timespec,
                    ) -> c_int;
                    pub fn pthread_barrierattr_init(attr: *mut pthread_barrierattr_t) -> c_int;
                    pub fn pthread_barrierattr_destroy(attr: *mut pthread_barrierattr_t) -> c_int;
                    pub fn pthread_barrierattr_getpshared(
                        attr: *const pthread_barrierattr_t,
                        shared: *mut c_int,
                    ) -> c_int;
                    pub fn pthread_barrierattr_setpshared(
                        attr: *mut pthread_barrierattr_t,
                        shared: c_int,
                    ) -> c_int;
                    pub fn pthread_barrier_init(
                        barrier: *mut pthread_barrier_t,
                        attr: *const pthread_barrierattr_t,
                        count: c_uint,
                    ) -> c_int;
                    pub fn pthread_barrier_destroy(barrier: *mut pthread_barrier_t) -> c_int;
                    pub fn pthread_barrier_wait(barrier: *mut pthread_barrier_t) -> c_int;
                    pub fn pthread_spin_init(lock: *mut pthread_spinlock_t, pshared: c_int) -> c_int;
                    pub fn pthread_spin_destroy(lock: *mut pthread_spinlock_t) -> c_int;
                    pub fn pthread_spin_lock(lock: *mut pthread_spinlock_t) -> c_int;
                    pub fn pthread_spin_trylock(lock: *mut pthread_spinlock_t) -> c_int;
                    pub fn pthread_spin_unlock(lock: *mut pthread_spinlock_t) -> c_int;
                    pub fn clone(
                        cb: extern "C" fn(*mut c_void) -> c_int,
                        child_stack: *mut c_void,
                        flags: c_int,
                        arg: *mut c_void,
                        ...
                    ) -> c_int;
                    pub fn sched_getscheduler(pid: pid_t) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__clock_nanosleep_time64")]
                    pub fn clock_nanosleep(
                        clk_id: clockid_t,
                        flags: c_int,
                        rqtp: *const timespec,
                        rmtp: *mut timespec,
                    ) -> c_int;
                    pub fn pthread_attr_getguardsize(
                        attr: *const pthread_attr_t,
                        guardsize: *mut size_t,
                    ) -> c_int;
                    pub fn pthread_attr_setguardsize(attr: *mut pthread_attr_t, guardsize: size_t) -> c_int;
                    pub fn pthread_attr_getinheritsched(
                        attr: *const pthread_attr_t,
                        inheritsched: *mut c_int,
                    ) -> c_int;
                    pub fn pthread_attr_setinheritsched(
                        attr: *mut pthread_attr_t,
                        inheritsched: c_int,
                    ) -> c_int;
                    pub fn pthread_attr_getschedpolicy(
                        attr: *const pthread_attr_t,
                        policy: *mut c_int,
                    ) -> c_int;
                    pub fn pthread_attr_setschedpolicy(attr: *mut pthread_attr_t, policy: c_int) -> c_int;
                    pub fn pthread_attr_getschedparam(
                        attr: *const pthread_attr_t,
                        param: *mut sched_param,
                    ) -> c_int;
                    pub fn pthread_attr_setschedparam(
                        attr: *mut pthread_attr_t,
                        param: *const sched_param,
                    ) -> c_int;
                    pub fn sethostname(name: *const c_char, len: size_t) -> c_int;
                    pub fn sched_get_priority_min(policy: c_int) -> c_int;
                    pub fn pthread_condattr_getpshared(
                        attr: *const pthread_condattr_t,
                        pshared: *mut c_int,
                    ) -> c_int;
                    pub fn sysinfo(info: *mut sysinfo) -> c_int;
                    pub fn umount2(target: *const c_char, flags: c_int) -> c_int;
                    pub fn pthread_setschedparam(
                        native: pthread_t,
                        policy: c_int,
                        param: *const sched_param,
                    ) -> c_int;
                    pub fn swapon(path: *const c_char, swapflags: c_int) -> c_int;
                    pub fn sched_setscheduler(
                        pid: pid_t,
                        policy: c_int,
                        param: *const sched_param,
                    ) -> c_int;
                    #[cfg_attr(gnu_file_offset_bits64, link_name = "sendfile64")]
                    pub fn sendfile(out_fd: c_int, in_fd: c_int, offset: *mut off_t, count: size_t) -> ssize_t;
                    pub fn sigsuspend(mask: *const sigset_t) -> c_int;
                    pub fn getgrgid_r(
                        gid: gid_t,
                        grp: *mut group,
                        buf: *mut c_char,
                        buflen: size_t,
                        result: *mut *mut group,
                    ) -> c_int;
                    pub fn sigaltstack(ss: *const stack_t, oss: *mut stack_t) -> c_int;
                    pub fn sem_close(sem: *mut sem_t) -> c_int;
                    pub fn getdtablesize() -> c_int;
                    pub fn getgrnam_r(
                        name: *const c_char,
                        grp: *mut group,
                        buf: *mut c_char,
                        buflen: size_t,
                        result: *mut *mut group,
                    ) -> c_int;
                    pub fn initgroups(user: *const c_char, group: gid_t) -> c_int;
                    pub fn pthread_sigmask(how: c_int, set: *const sigset_t, oldset: *mut sigset_t) -> c_int;
                    pub fn sem_open(name: *const c_char, oflag: c_int, ...) -> *mut sem_t;
                    pub fn getgrnam(name: *const c_char) -> *mut group;
                    pub fn pthread_kill(thread: pthread_t, sig: c_int) -> c_int;
                    pub fn sem_unlink(name: *const c_char) -> c_int;
                    pub fn daemon(nochdir: c_int, noclose: c_int) -> c_int;
                    pub fn getpwnam_r(
                        name: *const c_char,
                        pwd: *mut passwd,
                        buf: *mut c_char,
                        buflen: size_t,
                        result: *mut *mut passwd,
                    ) -> c_int;
                    pub fn getpwuid_r(
                        uid: uid_t,
                        pwd: *mut passwd,
                        buf: *mut c_char,
                        buflen: size_t,
                        result: *mut *mut passwd,
                    ) -> c_int;
                    pub fn sigwait(set: *const sigset_t, sig: *mut c_int) -> c_int;
                    pub fn pthread_atfork(
                        prepare: Option<unsafe extern "C" fn()>,
                        parent: Option<unsafe extern "C" fn()>,
                        child: Option<unsafe extern "C" fn()>,
                    ) -> c_int;
                    pub fn getgrgid(gid: gid_t) -> *mut group;
                    pub fn getgrouplist(
                        user: *const c_char,
                        group: gid_t,
                        groups: *mut gid_t,
                        ngroups: *mut c_int,
                    ) -> c_int;
                    pub fn pthread_mutexattr_getpshared(
                        attr: *const pthread_mutexattr_t,
                        pshared: *mut c_int,
                    ) -> c_int;
                    pub fn popen(command: *const c_char, mode: *const c_char) -> *mut FILE;
                    pub fn faccessat(dirfd: c_int, pathname: *const c_char, mode: c_int, flags: c_int) -> c_int;
                    pub fn pthread_create(
                        native: *mut pthread_t,
                        attr: *const pthread_attr_t,
                        f: extern "C" fn(*mut c_void) -> *mut c_void,
                        value: *mut c_void,
                    ) -> c_int;
                    pub fn dl_iterate_phdr(
                        callback: Option<
                            unsafe extern "C" fn(
                                info: *mut dl_phdr_info,
                                size: size_t,
                                data: *mut c_void,
                            ) -> c_int,
                        >,
                        data: *mut c_void,
                    ) -> c_int;

                    pub fn setmntent(filename: *const c_char, ty: *const c_char) -> *mut FILE;
                    pub fn getmntent(stream: *mut FILE) -> *mut mntent;
                    pub fn addmntent(stream: *mut FILE, mnt: *const mntent) -> c_int;
                    pub fn endmntent(streamp: *mut FILE) -> c_int;
                    pub fn hasmntopt(mnt: *const mntent, opt: *const c_char) -> *mut c_char;

                    pub fn posix_spawn(
                        pid: *mut pid_t,
                        path: *const c_char,
                        file_actions: *const posix_spawn_file_actions_t,
                        attrp: *const posix_spawnattr_t,
                        argv: *const *mut c_char,
                        envp: *const *mut c_char,
                    ) -> c_int;
                    pub fn posix_spawnp(
                        pid: *mut pid_t,
                        file: *const c_char,
                        file_actions: *const posix_spawn_file_actions_t,
                        attrp: *const posix_spawnattr_t,
                        argv: *const *mut c_char,
                        envp: *const *mut c_char,
                    ) -> c_int;
                    pub fn posix_spawnattr_init(attr: *mut posix_spawnattr_t) -> c_int;
                    pub fn posix_spawnattr_destroy(attr: *mut posix_spawnattr_t) -> c_int;
                    pub fn posix_spawnattr_getsigdefault(
                        attr: *const posix_spawnattr_t,
                        default: *mut sigset_t,
                    ) -> c_int;
                    pub fn posix_spawnattr_setsigdefault(
                        attr: *mut posix_spawnattr_t,
                        default: *const sigset_t,
                    ) -> c_int;
                    pub fn posix_spawnattr_getsigmask(
                        attr: *const posix_spawnattr_t,
                        default: *mut sigset_t,
                    ) -> c_int;
                    pub fn posix_spawnattr_setsigmask(
                        attr: *mut posix_spawnattr_t,
                        default: *const sigset_t,
                    ) -> c_int;
                    pub fn posix_spawnattr_getflags(attr: *const posix_spawnattr_t, flags: *mut c_short) -> c_int;
                    pub fn posix_spawnattr_setflags(attr: *mut posix_spawnattr_t, flags: c_short) -> c_int;
                    pub fn posix_spawnattr_getpgroup(
                        attr: *const posix_spawnattr_t,
                        flags: *mut pid_t,
                    ) -> c_int;
                    pub fn posix_spawnattr_setpgroup(attr: *mut posix_spawnattr_t, flags: pid_t) -> c_int;
                    pub fn posix_spawnattr_getschedpolicy(
                        attr: *const posix_spawnattr_t,
                        flags: *mut c_int,
                    ) -> c_int;
                    pub fn posix_spawnattr_setschedpolicy(attr: *mut posix_spawnattr_t, flags: c_int) -> c_int;
                    pub fn posix_spawnattr_getschedparam(
                        attr: *const posix_spawnattr_t,
                        param: *mut sched_param,
                    ) -> c_int;
                    pub fn posix_spawnattr_setschedparam(
                        attr: *mut posix_spawnattr_t,
                        param: *const sched_param,
                    ) -> c_int;

                    pub fn posix_spawn_file_actions_init(actions: *mut posix_spawn_file_actions_t) -> c_int;
                    pub fn posix_spawn_file_actions_destroy(actions: *mut posix_spawn_file_actions_t) -> c_int;
                    pub fn posix_spawn_file_actions_addopen(
                        actions: *mut posix_spawn_file_actions_t,
                        fd: c_int,
                        path: *const c_char,
                        oflag: c_int,
                        mode: mode_t,
                    ) -> c_int;
                    pub fn posix_spawn_file_actions_addclose(
                        actions: *mut posix_spawn_file_actions_t,
                        fd: c_int,
                    ) -> c_int;
                    pub fn posix_spawn_file_actions_adddup2(
                        actions: *mut posix_spawn_file_actions_t,
                        fd: c_int,
                        newfd: c_int,
                    ) -> c_int;
                    pub fn fread_unlocked(
                        buf: *mut c_void,
                        size: size_t,
                        nobj: size_t,
                        stream: *mut FILE,
                    ) -> size_t;
                    pub fn inotify_rm_watch(fd: c_int, wd: c_int) -> c_int;
                    pub fn inotify_init() -> c_int;
                    pub fn inotify_init1(flags: c_int) -> c_int;
                    pub fn inotify_add_watch(fd: c_int, path: *const c_char, mask: u32) -> c_int;
                    pub fn fanotify_init(flags: c_uint, event_f_flags: c_uint) -> c_int;

                    pub fn regcomp(preg: *mut regex_t, pattern: *const c_char, cflags: c_int) -> c_int;

                    pub fn regexec(
                        preg: *const regex_t,
                        input: *const c_char,
                        nmatch: size_t,
                        pmatch: *mut regmatch_t,
                        eflags: c_int,
                    ) -> c_int;

                    pub fn regerror(
                        errcode: c_int,
                        preg: *const regex_t,
                        errbuf: *mut c_char,
                        errbuf_size: size_t,
                    ) -> size_t;

                    pub fn regfree(preg: *mut regex_t);

                    pub fn iconv_open(tocode: *const c_char, fromcode: *const c_char) -> iconv_t;
                    pub fn iconv(
                        cd: iconv_t,
                        inbuf: *mut *mut c_char,
                        inbytesleft: *mut size_t,
                        outbuf: *mut *mut c_char,
                        outbytesleft: *mut size_t,
                    ) -> size_t;
                    pub fn iconv_close(cd: iconv_t) -> c_int;

                    pub fn gettid() -> pid_t;

                    pub fn timer_create(
                        clockid: clockid_t,
                        sevp: *mut sigevent,
                        timerid: *mut timer_t,
                    ) -> c_int;
                    pub fn timer_delete(timerid: timer_t) -> c_int;
                    pub fn timer_getoverrun(timerid: timer_t) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__timer_gettime64")]
                    pub fn timer_gettime(timerid: timer_t, curr_value: *mut itimerspec) -> c_int;
                    #[cfg_attr(gnu_time_bits64, link_name = "__timer_settime64")]
                    pub fn timer_settime(
                        timerid: timer_t,
                        flags: c_int,
                        new_value: *const itimerspec,
                        old_value: *mut itimerspec,
                    ) -> c_int;

                    pub fn gethostid() -> c_long;

                    pub fn pthread_getcpuclockid(thread: pthread_t, clk_id: *mut clockid_t) -> c_int;
                    pub fn memmem(
                        haystack: *const c_void,
                        haystacklen: size_t,
                        needle: *const c_void,
                        needlelen: size_t,
                    ) -> *mut c_void;
                    pub fn sched_getcpu() -> c_int;

                    pub fn pthread_getname_np(thread: pthread_t, name: *mut c_char, len: size_t) -> c_int;
                    pub fn pthread_setname_np(thread: pthread_t, name: *const c_char) -> c_int;
                    pub fn getopt_long(
                        argc: c_int,
                        argv: *const *mut c_char,
                        optstring: *const c_char,
                        longopts: *const option,
                        longindex: *mut c_int,
                    ) -> c_int;

                    pub fn pthread_once(control: *mut pthread_once_t, routine: extern "C" fn()) -> c_int;

                    pub fn copy_file_range(
                        fd_in: c_int,
                        off_in: *mut off64_t,
                        fd_out: c_int,
                        off_out: *mut off64_t,
                        len: size_t,
                        flags: c_uint,
                    ) -> ssize_t;

                    pub fn klogctl(syslog_type: c_int, bufp: *mut c_char, len: c_int) -> c_int;
                }
                
                extern "C"
                {
                    pub fn fallocate64(fd: c_int, mode: c_int, offset: off64_t, len: off64_t) -> c_int;
                    pub fn fgetpos64(stream: *mut FILE, ptr: *mut fpos64_t) -> c_int;
                    pub fn fopen64(filename: *const c_char, mode: *const c_char) -> *mut FILE;
                    pub fn freopen64
                    (
                        filename: *const c_char,
                        mode: *const c_char,
                        file: *mut FILE,
                    ) -> *mut FILE;
                    pub fn fseeko64(stream: *mut FILE, offset: off64_t, whence: c_int) -> c_int;
                    pub fn fsetpos64(stream: *mut FILE, ptr: *const fpos64_t) -> c_int;
                    pub fn ftello64(stream: *mut FILE) -> off64_t;
                    pub fn posix_fallocate64(fd: c_int, offset: off64_t, len: off64_t) -> c_int;
                    pub fn sendfile64
                    (
                        out_fd: c_int,
                        in_fd: c_int,
                        offset: *mut off64_t,
                        count: size_t,
                    ) -> ssize_t;
                    pub fn tmpfile64() -> *mut FILE;
                }

                mod gnu
                {
                    use ::libc::*;
                    
                    pub type __priority_which_t = c_uint;
                    pub type __rlimit_resource_t = c_uint;
                    pub type Lmid_t = c_long;
                    pub type regoff_t = c_int;
                    pub type __kernel_rwf_t = c_int;

                    pub type Ioctl = c_ulong;

                    s!
                    {
                        pub struct __exit_status
                        {
                            pub e_termination: c_short,
                            pub e_exit: c_short,
                        }

                        pub struct __timeval
                        {
                            pub tv_sec: i32,
                            pub tv_usec: i32,
                        }

                        pub struct glob64_t
                        {
                            pub gl_pathc: size_t,
                            pub gl_pathv: *mut *mut c_char,
                            pub gl_offs: size_t,
                            pub gl_flags: c_int,

                            __unused1: *mut c_void,
                            __unused2: *mut c_void,
                            __unused3: *mut c_void,
                            __unused4: *mut c_void,
                            __unused5: *mut c_void,
                        }

                        pub struct msghdr
                        {
                            pub msg_name: *mut c_void,
                            pub msg_namelen: socklen_t,
                            pub msg_iov: *mut iovec,
                            pub msg_iovlen: size_t,
                            pub msg_control: *mut c_void,
                            pub msg_controllen: size_t,
                            pub msg_flags: c_int,
                        }

                        pub struct cmsghdr 
                        {
                            pub cmsg_len: size_t,
                            pub cmsg_level: c_int,
                            pub cmsg_type: c_int,
                        }

                        pub struct termios 
                        {
                            pub c_iflag: tcflag_t,
                            pub c_oflag: tcflag_t,
                            pub c_cflag: tcflag_t,
                            pub c_lflag: tcflag_t,
                            pub c_line: cc_t,
                            pub c_cc: [cc_t; NCCS],
                            #[cfg(not(any(
                                target_arch = "sparc",
                                target_arch = "sparc64",
                                target_arch = "mips",
                                target_arch = "mips32r6",
                                target_arch = "mips64",
                                target_arch = "mips64r6"
                            )))]
                            pub c_ispeed: speed_t,
                            #[cfg(not(any(
                                target_arch = "sparc",
                                target_arch = "sparc64",
                                target_arch = "mips",
                                target_arch = "mips32r6",
                                target_arch = "mips64",
                                target_arch = "mips64r6"
                            )))]
                            pub c_ospeed: speed_t,
                        }

                        pub struct mallinfo
                        {
                            pub arena: c_int,
                            pub ordblks: c_int,
                            pub smblks: c_int,
                            pub hblks: c_int,
                            pub hblkhd: c_int,
                            pub usmblks: c_int,
                            pub fsmblks: c_int,
                            pub uordblks: c_int,
                            pub fordblks: c_int,
                            pub keepcost: c_int,
                        }

                        pub struct mallinfo2
                        {
                            pub arena: size_t,
                            pub ordblks: size_t,
                            pub smblks: size_t,
                            pub hblks: size_t,
                            pub hblkhd: size_t,
                            pub usmblks: size_t,
                            pub fsmblks: size_t,
                            pub uordblks: size_t,
                            pub fordblks: size_t,
                            pub keepcost: size_t,
                        }

                        pub struct nl_pktinfo 
                        {
                            pub group: u32,
                        }

                        pub struct nl_mmap_req 
                        {
                            pub nm_block_size: c_uint,
                            pub nm_block_nr: c_uint,
                            pub nm_frame_size: c_uint,
                            pub nm_frame_nr: c_uint,
                        }

                        pub struct nl_mmap_hdr 
                        {
                            pub nm_status: c_uint,
                            pub nm_len: c_uint,
                            pub nm_group: u32,
                            pub nm_pid: u32,
                            pub nm_uid: u32,
                            pub nm_gid: u32,
                        }

                        pub struct rtentry 
                        {
                            pub rt_pad1: c_ulong,
                            pub rt_dst: sockaddr,
                            pub rt_gateway: sockaddr,
                            pub rt_genmask: sockaddr,
                            pub rt_flags: c_ushort,
                            pub rt_pad2: c_short,
                            pub rt_pad3: c_ulong,
                            pub rt_tos: c_uchar,
                            pub rt_class: c_uchar,
                            #[cfg(target_pointer_width = "64")]
                            pub rt_pad4: [c_short; 3usize],
                            #[cfg(not(target_pointer_width = "64"))]
                            pub rt_pad4: c_short,
                            pub rt_metric: c_short,
                            pub rt_dev: *mut c_char,
                            pub rt_mtu: c_ulong,
                            pub rt_window: c_ulong,
                            pub rt_irtt: c_ushort,
                        }

                        pub struct ntptimeval 
                        {
                            pub time: timeval,
                            pub maxerror: c_long,
                            pub esterror: c_long,
                            pub tai: c_long,
                            pub __glibc_reserved1: c_long,
                            pub __glibc_reserved2: c_long,
                            pub __glibc_reserved3: c_long,
                            pub __glibc_reserved4: c_long,
                        }

                        pub struct regex_t 
                        {
                            __buffer: *mut c_void,
                            __allocated: size_t,
                            __used: size_t,
                            __syntax: c_ulong,
                            __fastmap: *mut c_char,
                            __translate: *mut c_char,
                            __re_nsub: size_t,
                            __bitfield: u8,
                        }

                        pub struct Elf64_Chdr 
                        {
                            pub ch_type: Elf64_Word,
                            pub ch_reserved: Elf64_Word,
                            pub ch_size: Elf64_Xword,
                            pub ch_addralign: Elf64_Xword,
                        }

                        pub struct Elf32_Chdr 
                        {
                            pub ch_type: Elf32_Word,
                            pub ch_size: Elf32_Word,
                            pub ch_addralign: Elf32_Word,
                        }

                        pub struct seminfo 
                        {
                            pub semmap: c_int,
                            pub semmni: c_int,
                            pub semmns: c_int,
                            pub semmnu: c_int,
                            pub semmsl: c_int,
                            pub semopm: c_int,
                            pub semume: c_int,
                            pub semusz: c_int,
                            pub semvmx: c_int,
                            pub semaem: c_int,
                        }

                        pub struct ptrace_peeksiginfo_args 
                        {
                            pub off: __u64,
                            pub flags: __u32,
                            pub nr: __s32,
                        }

                        pub struct __c_anonymous_ptrace_syscall_info_entry 
                        {
                            pub nr: __u64,
                            pub args: [__u64; 6],
                        }

                        pub struct __c_anonymous_ptrace_syscall_info_exit 
                        {
                            pub sval: __s64,
                            pub is_error: __u8,
                        }

                        pub struct __c_anonymous_ptrace_syscall_info_seccomp 
                        {
                            pub nr: __u64,
                            pub args: [__u64; 6],
                            pub ret_data: __u32,
                        }

                        pub struct ptrace_syscall_info
                        {
                            pub op: __u8,
                            pub pad: [__u8; 3],
                            pub arch: __u32,
                            pub instruction_pointer: __u64,
                            pub stack_pointer: __u64,
                            pub u: __c_anonymous_ptrace_syscall_info_data,
                        }

                        pub struct ptrace_sud_config
                        {
                            pub mode: __u64,
                            pub selector: __u64,
                            pub offset: __u64,
                            pub len: __u64,
                        }

                        pub struct iocb
                        {
                            pub aio_data: __u64,
                            #[cfg(target_endian = "little")]
                            pub aio_key: __u32,
                            #[cfg(target_endian = "little")]
                            pub aio_rw_flags: __kernel_rwf_t,
                            #[cfg(target_endian = "big")]
                            pub aio_rw_flags: __kernel_rwf_t,
                            #[cfg(target_endian = "big")]
                            pub aio_key: __u32,
                            pub aio_lio_opcode: __u16,
                            pub aio_reqprio: __s16,
                            pub aio_fildes: __u32,
                            pub aio_buf: __u64,
                            pub aio_nbytes: __u64,
                            pub aio_offset: __s64,
                            aio_reserved2: __u64,
                            pub aio_flags: __u32,
                            pub aio_resfd: __u32,
                        }

                        pub struct tcp_info
                        {
                            pub tcpi_state: u8,
                            pub tcpi_ca_state: u8,
                            pub tcpi_retransmits: u8,
                            pub tcpi_probes: u8,
                            pub tcpi_backoff: u8,
                            pub tcpi_options: u8,
                            pub tcpi_snd_rcv_wscale: u8,
                            pub tcpi_rto: u32,
                            pub tcpi_ato: u32,
                            pub tcpi_snd_mss: u32,
                            pub tcpi_rcv_mss: u32,
                            pub tcpi_unacked: u32,
                            pub tcpi_sacked: u32,
                            pub tcpi_lost: u32,
                            pub tcpi_retrans: u32,
                            pub tcpi_fackets: u32,
                            pub tcpi_last_data_sent: u32,
                            pub tcpi_last_ack_sent: u32,
                            pub tcpi_last_data_recv: u32,
                            pub tcpi_last_ack_recv: u32,
                            pub tcpi_pmtu: u32,
                            pub tcpi_rcv_ssthresh: u32,
                            pub tcpi_rtt: u32,
                            pub tcpi_rttvar: u32,
                            pub tcpi_snd_ssthresh: u32,
                            pub tcpi_snd_cwnd: u32,
                            pub tcpi_advmss: u32,
                            pub tcpi_reordering: u32,
                            pub tcpi_rcv_rtt: u32,
                            pub tcpi_rcv_space: u32,
                            pub tcpi_total_retrans: u32,
                        }

                        pub struct fanotify_event_info_pidfd
                        {
                            pub hdr: fanotify_event_info_header,
                            pub pidfd: __s32,
                        }

                        pub struct fanotify_event_info_error
                        {
                            pub hdr: fanotify_event_info_header,
                            pub error: __s32,
                            pub error_count: __u32,
                        }
                        
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        pub struct sem_t
                        {
                            #[cfg(target_pointer_width = "32")]
                            __size: [c_char; 16],
                            #[cfg(target_pointer_width = "64")]
                            __size: [c_char; 32],
                        }

                        pub struct mbstate_t
                        {
                            __count: c_int,
                            __wchb: [c_char; 4],
                        }

                        pub struct fpos64_t
                        {
                            __pos: off64_t,
                            __state: mbstate_t,
                        }

                        pub struct fpos_t
                        {
                            #[cfg(not(gnu_file_offset_bits64))]
                            __pos: off_t,
                            #[cfg(gnu_file_offset_bits64)]
                            __pos: off64_t,
                            __state: mbstate_t,
                        }
                        
                        pub struct timespec
                        {
                            pub tv_sec: time_t,
                            #[cfg(all(gnu_time_bits64, target_endian = "big"))]
                            __pad: i32,
                            #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                            pub tv_nsec: c_long,
                            #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                            pub tv_nsec: i64,
                            #[cfg(all(gnu_time_bits64, target_endian = "little"))]
                            __pad: i32,
                        }
                    }

                    impl siginfo_t
                    {
                        pub unsafe fn si_addr(&self) -> *mut c_void 
                        {    
                            #[repr(C)]
                            struct siginfo_sigfault
                            {
                                _si_signo: c_int,
                                _si_errno: c_int,
                                _si_code: c_int,
                                si_addr: *mut c_void,
                            }
                            (*(self as *const siginfo_t).cast::<siginfo_sigfault>()).si_addr
                        }

                        pub unsafe fn si_value(&self) -> sigval
                        {
                            #[repr(C)]
                            struct siginfo_timer
                            {
                                _si_signo: c_int,
                                _si_errno: c_int,
                                _si_code: c_int,
                                _si_tid: c_int,
                                _si_overrun: c_int,
                                si_sigval: sigval,
                            }

                            (*(self as *const siginfo_t).cast::<siginfo_timer>()).si_sigval
                        }
                    }

                    s_no_extra_traits!
                    {
                        pub struct aiocb
                        {
                            pub aio_fildes: c_int,
                            pub aio_lio_opcode: c_int,
                            pub aio_reqprio: c_int,
                            pub aio_buf: *mut c_void,
                            pub aio_nbytes: size_t,
                            pub aio_sigevent: sigevent,
                            __next_prio: *mut aiocb,
                            __abs_prio: c_int,
                            __policy: c_int,
                            __error_code: c_int,
                            __return_value: ssize_t,
                            
                            pub aio_offset: off_t,
                            #[cfg(all(
                                not(gnu_file_offset_bits64),
                                not(target_arch = "x86_64"),
                                target_pointer_width = "32"
                            ))]
                            __pad: [c_char; 4],
                            __glibc_reserved: [c_char; 32],
                        }
                    }
                    
                    #[repr(C)]
                    struct sifields_sigchld
                    {
                        si_pid: pid_t,
                        si_uid: uid_t,
                        si_status: c_int,
                        si_utime: c_long,
                        si_stime: c_long,
                    }

                    impl Copy for sifields_sigchld {}
                    impl Clone for sifields_sigchld
                    {
                        fn clone(&self) -> sifields_sigchld { *self }
                    }
                    
                    #[repr(C)]
                    union sifields
                    {
                        _align_pointer: *mut c_void,
                        sigchld: sifields_sigchld,
                    }
                    
                    #[repr(C)]
                    struct siginfo_f
                    {
                        _siginfo_base: [c_int; 3],
                        sifields: sifields,
                    }

                    impl siginfo_t
                    {
                        unsafe fn sifields(&self) -> &sifields 
                        { &(*(self as *const siginfo_t).cast::<siginfo_f>()).sifields }

                        pub unsafe fn si_pid(&self) -> pid_t { self.sifields().sigchld.si_pid }

                        pub unsafe fn si_uid(&self) -> uid_t { self.sifields().sigchld.si_uid }

                        pub unsafe fn si_status(&self) -> c_int { self.sifields().sigchld.si_status }

                        pub unsafe fn si_utime(&self) -> c_long { self.sifields().sigchld.si_utime }

                        pub unsafe fn si_stime(&self) -> c_long { self.sifields().sigchld.si_stime }
                    }

                    s_no_extra_traits!
                    {
                        pub union __c_anonymous_ptrace_syscall_info_data
                        {
                            pub entry: __c_anonymous_ptrace_syscall_info_entry,
                            pub exit: __c_anonymous_ptrace_syscall_info_exit,
                            pub seccomp: __c_anonymous_ptrace_syscall_info_seccomp,
                        }

                        pub struct utmpx
                        {
                            pub ut_type: c_short,
                            pub ut_pid: pid_t,
                            pub ut_line: [c_char; __UT_LINESIZE],
                            pub ut_id: [c_char; 4],

                            pub ut_user: [c_char; __UT_NAMESIZE],
                            pub ut_host: [c_char; __UT_HOSTSIZE],
                            pub ut_exit: __exit_status,

                            #[cfg(any(
                                target_arch = "aarch64",
                                target_arch = "s390x",
                                target_arch = "loongarch64",
                                all(target_pointer_width = "32", not(target_arch = "x86_64"))
                            ))]
                            pub ut_session: c_long,
                            #[cfg(any(
                                target_arch = "aarch64",
                                target_arch = "s390x",
                                target_arch = "loongarch64",
                                all(target_pointer_width = "32", not(target_arch = "x86_64"))
                            ))]
                            pub ut_tv: timeval,

                            #[cfg(not(any(
                                target_arch = "aarch64",
                                target_arch = "s390x",
                                target_arch = "loongarch64",
                                all(target_pointer_width = "32", not(target_arch = "x86_64"))
                            )))]
                            pub ut_session: i32,
                            #[cfg(not(any(
                                target_arch = "aarch64",
                                target_arch = "s390x",
                                target_arch = "loongarch64",
                                all(target_pointer_width = "32", not(target_arch = "x86_64"))
                            )))]
                            pub ut_tv: __timeval,

                            pub ut_addr_v6: [i32; 4],
                            __glibc_reserved: [c_char; 20],
                        }
                    }

                    impl PartialEq for utmpx
                    {
                        fn eq(&self, other: &utmpx) -> bool
                        {
                            self.ut_type == other.ut_type
                                && self.ut_pid == other.ut_pid
                                && self.ut_line == other.ut_line
                                && self.ut_id == other.ut_id
                                && self.ut_user == other.ut_user
                                && self
                                .ut_host
                                .iter()
                                .zip(other.ut_host.iter())
                                .all(|(a, b)| a == b)
                                && self.ut_exit == other.ut_exit
                                && self.ut_session == other.ut_session
                                && self.ut_tv == other.ut_tv
                                && self.ut_addr_v6 == other.ut_addr_v6
                                && self.__glibc_reserved == other.__glibc_reserved
                        }
                    }

                    impl Eq for utmpx {}

                    impl ::hash::Hash for utmpx
                    {
                        fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                        {
                            self.ut_type.hash(state);
                            self.ut_pid.hash(state);
                            self.ut_line.hash(state);
                            self.ut_id.hash(state);
                            self.ut_user.hash(state);
                            self.ut_host.hash(state);
                            self.ut_exit.hash(state);
                            self.ut_session.hash(state);
                            self.ut_tv.hash(state);
                            self.ut_addr_v6.hash(state);
                            self.__glibc_reserved.hash(state);
                        }
                    }

                    impl PartialEq for __c_anonymous_ptrace_syscall_info_entry
                    {
                        fn eq(&self, other: &__c_anonymous_ptrace_syscall_info_entry) -> bool
                        {
                            unsafe
                            {
                                self.nr == other.nr
                            }
                        }
                    }

                    impl Eq for __c_anonymous_ptrace_syscall_info_entry {}

                    impl ::hash::Hash for __c_anonymous_ptrace_syscall_info_entry
                    {
                        fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                        {
                            unsafe
                            {
                                self.nr.hash(state);
                            }
                        }
                    }

                    impl PartialEq for __c_anonymous_ptrace_syscall_info_exit
                    {
                        fn eq(&self, other: &__c_anonymous_ptrace_syscall_info_exit) -> bool
                        {
                            unsafe
                            {
                                self.sval == other.sval
                            }
                        }
                    }

                    impl Eq for __c_anonymous_ptrace_syscall_info_exit {}

                    impl ::hash::Hash for __c_anonymous_ptrace_syscall_info_exit
                    {
                        fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                        {
                            unsafe
                            {
                                self.sval.hash(state);
                            }
                        }
                    }
                    
                    impl PartialEq for __c_anonymous_ptrace_syscall_info_data
                    {
                        fn eq(&self, other: &__c_anonymous_ptrace_syscall_info_data) -> bool
                        {
                            unsafe
                            {
                                self.entry == other.entry
                                || self.exit == other.exit
                                || self.seccomp == other.seccomp
                            }
                        }
                    }

                    impl Eq for __c_anonymous_ptrace_syscall_info_data {}

                    impl ::hash::Hash for __c_anonymous_ptrace_syscall_info_data
                    {
                        fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                        {
                            unsafe
                            {
                                self.entry.hash(state);
                                self.exit.hash(state);
                                self.seccomp.hash(state);
                            }
                        }
                    }
                    
                    impl PartialEq for __c_anonymous_ptrace_syscall_info_seccomp
                    {
                        fn eq(&self, other: &__c_anonymous_ptrace_syscall_info_seccomp) -> bool
                        {
                            unsafe
                            {
                                self.nr == other.nr
                            }
                        }
                    }

                    impl Eq for __c_anonymous_ptrace_syscall_info_seccomp {}

                    impl ::hash::Hash for __c_anonymous_ptrace_syscall_info_seccomp
                    {
                        fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                        {
                            unsafe
                            {
                                self.nr.hash(state);
                            }
                        }
                    }
                    
                    pub const HUGETLB_FLAG_ENCODE_SHIFT: c_int = 26;
                    pub const HUGETLB_FLAG_ENCODE_MASK: c_int = 0x3f;

                    pub const HUGETLB_FLAG_ENCODE_64KB: c_int = 16 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_512KB: c_int = 19 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_1MB: c_int = 20 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_2MB: c_int = 21 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_8MB: c_int = 23 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_16MB: c_int = 24 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_32MB: c_int = 25 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_256MB: c_int = 28 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_512MB: c_int = 29 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_1GB: c_int = 30 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_2GB: c_int = 31 << HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const HUGETLB_FLAG_ENCODE_16GB: c_int = 34 << HUGETLB_FLAG_ENCODE_SHIFT;
                    
                    pub const MAP_HUGE_SHIFT: c_int = HUGETLB_FLAG_ENCODE_SHIFT;
                    pub const MAP_HUGE_MASK: c_int = HUGETLB_FLAG_ENCODE_MASK;

                    pub const MAP_HUGE_64KB: c_int = HUGETLB_FLAG_ENCODE_64KB;
                    pub const MAP_HUGE_512KB: c_int = HUGETLB_FLAG_ENCODE_512KB;
                    pub const MAP_HUGE_1MB: c_int = HUGETLB_FLAG_ENCODE_1MB;
                    pub const MAP_HUGE_2MB: c_int = HUGETLB_FLAG_ENCODE_2MB;
                    pub const MAP_HUGE_8MB: c_int = HUGETLB_FLAG_ENCODE_8MB;
                    pub const MAP_HUGE_16MB: c_int = HUGETLB_FLAG_ENCODE_16MB;
                    pub const MAP_HUGE_32MB: c_int = HUGETLB_FLAG_ENCODE_32MB;
                    pub const MAP_HUGE_256MB: c_int = HUGETLB_FLAG_ENCODE_256MB;
                    pub const MAP_HUGE_512MB: c_int = HUGETLB_FLAG_ENCODE_512MB;
                    pub const MAP_HUGE_1GB: c_int = HUGETLB_FLAG_ENCODE_1GB;
                    pub const MAP_HUGE_2GB: c_int = HUGETLB_FLAG_ENCODE_2GB;
                    pub const MAP_HUGE_16GB: c_int = HUGETLB_FLAG_ENCODE_16GB;

                    pub const PRIO_PROCESS: __priority_which_t = 0;
                    pub const PRIO_PGRP: __priority_which_t = 1;
                    pub const PRIO_USER: __priority_which_t = 2;

                    pub const MS_RMT_MASK: c_ulong = 0x02800051;

                    pub const __UT_LINESIZE: usize = 32;
                    pub const __UT_NAMESIZE: usize = 32;
                    pub const __UT_HOSTSIZE: usize = 256;
                    pub const EMPTY: c_short = 0;
                    pub const RUN_LVL: c_short = 1;
                    pub const BOOT_TIME: c_short = 2;
                    pub const NEW_TIME: c_short = 3;
                    pub const OLD_TIME: c_short = 4;
                    pub const INIT_PROCESS: c_short = 5;
                    pub const LOGIN_PROCESS: c_short = 6;
                    pub const USER_PROCESS: c_short = 7;
                    pub const DEAD_PROCESS: c_short = 8;
                    pub const ACCOUNTING: c_short = 9;
                    
                    pub const LM_ID_BASE: c_long = 0;
                    pub const LM_ID_NEWLM: c_long = -1;

                    pub const RTLD_DI_LMID: c_int = 1;
                    pub const RTLD_DI_LINKMAP: c_int = 2;
                    pub const RTLD_DI_CONFIGADDR: c_int = 3;
                    pub const RTLD_DI_SERINFO: c_int = 4;
                    pub const RTLD_DI_SERINFOSIZE: c_int = 5;
                    pub const RTLD_DI_ORIGIN: c_int = 6;
                    pub const RTLD_DI_PROFILENAME: c_int = 7;
                    pub const RTLD_DI_PROFILEOUT: c_int = 8;
                    pub const RTLD_DI_TLS_MODID: c_int = 9;
                    pub const RTLD_DI_TLS_DATA: c_int = 10;

                    pub const SOCK_NONBLOCK: c_int = O_NONBLOCK;

                    pub const SOL_RXRPC: c_int = 272;
                    pub const SOL_PPPOL2TP: c_int = 273;
                    pub const SOL_PNPIPE: c_int = 275;
                    pub const SOL_RDS: c_int = 276;
                    pub const SOL_IUCV: c_int = 277;
                    pub const SOL_CAIF: c_int = 278;
                    pub const SOL_NFC: c_int = 280;

                    pub const MSG_TRYHARD: c_int = 4;

                    pub const LC_PAPER: c_int = 7;
                    pub const LC_NAME: c_int = 8;
                    pub const LC_ADDRESS: c_int = 9;
                    pub const LC_TELEPHONE: c_int = 10;
                    pub const LC_MEASUREMENT: c_int = 11;
                    pub const LC_IDENTIFICATION: c_int = 12;
                    pub const LC_PAPER_MASK: c_int = 1 << LC_PAPER;
                    pub const LC_NAME_MASK: c_int = 1 << LC_NAME;
                    pub const LC_ADDRESS_MASK: c_int = 1 << LC_ADDRESS;
                    pub const LC_TELEPHONE_MASK: c_int = 1 << LC_TELEPHONE;
                    pub const LC_MEASUREMENT_MASK: c_int = 1 << LC_MEASUREMENT;
                    pub const LC_IDENTIFICATION_MASK: c_int = 1 << LC_IDENTIFICATION;
                    pub const LC_ALL_MASK: c_int = LC_CTYPE_MASK
                    | LC_NUMERIC_MASK
                    | LC_TIME_MASK
                    | LC_COLLATE_MASK
                    | LC_MONETARY_MASK
                    | LC_MESSAGES_MASK
                    | LC_PAPER_MASK
                    | LC_NAME_MASK
                    | LC_ADDRESS_MASK
                    | LC_TELEPHONE_MASK
                    | LC_MEASUREMENT_MASK
                    | LC_IDENTIFICATION_MASK;

                    pub const ENOTSUP: c_int = EOPNOTSUPP;

                    pub const SOCK_SEQPACKET: c_int = 5;
                    pub const SOCK_DCCP: c_int = 6;

                    #[deprecated(since = "0.2.70", note = "AF_PACKET must be used instead")]
                    pub const SOCK_PACKET: c_int = 10;

                    pub const AF_IB: c_int = 27;
                    pub const AF_MPLS: c_int = 28;
                    pub const AF_NFC: c_int = 39;
                    pub const AF_VSOCK: c_int = 40;
                    pub const AF_XDP: c_int = 44;
                    pub const PF_IB: c_int = AF_IB;
                    pub const PF_MPLS: c_int = AF_MPLS;
                    pub const PF_NFC: c_int = AF_NFC;
                    pub const PF_VSOCK: c_int = AF_VSOCK;
                    pub const PF_XDP: c_int = AF_XDP;

                    pub const SIGEV_THREAD_ID: c_int = 4;

                    pub const BUFSIZ: c_uint = 8192;
                    pub const TMP_MAX: c_uint = 238328;
                    pub const FOPEN_MAX: c_uint = 16;
                    pub const FILENAME_MAX: c_uint = 4096;
                    pub const POSIX_MADV_DONTNEED: c_int = 4;
                    pub const _CS_GNU_LIBC_VERSION: c_int = 2;
                    pub const _CS_GNU_LIBPTHREAD_VERSION: c_int = 3;
                    pub const _CS_V6_ENV: c_int = 1148;
                    pub const _CS_V7_ENV: c_int = 1149;
                    pub const _SC_EQUIV_CLASS_MAX: c_int = 41;
                    pub const _SC_CHARCLASS_NAME_MAX: c_int = 45;
                    pub const _SC_PII: c_int = 53;
                    pub const _SC_PII_XTI: c_int = 54;
                    pub const _SC_PII_SOCKET: c_int = 55;
                    pub const _SC_PII_INTERNET: c_int = 56;
                    pub const _SC_PII_OSI: c_int = 57;
                    pub const _SC_POLL: c_int = 58;
                    pub const _SC_SELECT: c_int = 59;
                    pub const _SC_PII_INTERNET_STREAM: c_int = 61;
                    pub const _SC_PII_INTERNET_DGRAM: c_int = 62;
                    pub const _SC_PII_OSI_COTS: c_int = 63;
                    pub const _SC_PII_OSI_CLTS: c_int = 64;
                    pub const _SC_PII_OSI_M: c_int = 65;
                    pub const _SC_T_IOV_MAX: c_int = 66;
                    pub const _SC_2_C_VERSION: c_int = 96;
                    pub const _SC_CHAR_BIT: c_int = 101;
                    pub const _SC_CHAR_MAX: c_int = 102;
                    pub const _SC_CHAR_MIN: c_int = 103;
                    pub const _SC_INT_MAX: c_int = 104;
                    pub const _SC_INT_MIN: c_int = 105;
                    pub const _SC_LONG_BIT: c_int = 106;
                    pub const _SC_WORD_BIT: c_int = 107;
                    pub const _SC_MB_LEN_MAX: c_int = 108;
                    pub const _SC_SSIZE_MAX: c_int = 110;
                    pub const _SC_SCHAR_MAX: c_int = 111;
                    pub const _SC_SCHAR_MIN: c_int = 112;
                    pub const _SC_SHRT_MAX: c_int = 113;
                    pub const _SC_SHRT_MIN: c_int = 114;
                    pub const _SC_UCHAR_MAX: c_int = 115;
                    pub const _SC_UINT_MAX: c_int = 116;
                    pub const _SC_ULONG_MAX: c_int = 117;
                    pub const _SC_USHRT_MAX: c_int = 118;
                    pub const _SC_NL_ARGMAX: c_int = 119;
                    pub const _SC_NL_LANGMAX: c_int = 120;
                    pub const _SC_NL_MSGMAX: c_int = 121;
                    pub const _SC_NL_NMAX: c_int = 122;
                    pub const _SC_NL_SETMAX: c_int = 123;
                    pub const _SC_NL_TEXTMAX: c_int = 124;
                    pub const _SC_BASE: c_int = 134;
                    pub const _SC_C_LANG_SUPPORT: c_int = 135;
                    pub const _SC_C_LANG_SUPPORT_R: c_int = 136;
                    pub const _SC_DEVICE_IO: c_int = 140;
                    pub const _SC_DEVICE_SPECIFIC: c_int = 141;
                    pub const _SC_DEVICE_SPECIFIC_R: c_int = 142;
                    pub const _SC_FD_MGMT: c_int = 143;
                    pub const _SC_FIFO: c_int = 144;
                    pub const _SC_PIPE: c_int = 145;
                    pub const _SC_FILE_ATTRIBUTES: c_int = 146;
                    pub const _SC_FILE_LOCKING: c_int = 147;
                    pub const _SC_FILE_SYSTEM: c_int = 148;
                    pub const _SC_MULTI_PROCESS: c_int = 150;
                    pub const _SC_SINGLE_PROCESS: c_int = 151;
                    pub const _SC_NETWORKING: c_int = 152;
                    pub const _SC_REGEX_VERSION: c_int = 156;
                    pub const _SC_SIGNALS: c_int = 158;
                    pub const _SC_SYSTEM_DATABASE: c_int = 162;
                    pub const _SC_SYSTEM_DATABASE_R: c_int = 163;
                    pub const _SC_USER_GROUPS: c_int = 166;
                    pub const _SC_USER_GROUPS_R: c_int = 167;
                    pub const _SC_LEVEL1_ICACHE_SIZE: c_int = 185;
                    pub const _SC_LEVEL1_ICACHE_ASSOC: c_int = 186;
                    pub const _SC_LEVEL1_ICACHE_LINESIZE: c_int = 187;
                    pub const _SC_LEVEL1_DCACHE_SIZE: c_int = 188;
                    pub const _SC_LEVEL1_DCACHE_ASSOC: c_int = 189;
                    pub const _SC_LEVEL1_DCACHE_LINESIZE: c_int = 190;
                    pub const _SC_LEVEL2_CACHE_SIZE: c_int = 191;
                    pub const _SC_LEVEL2_CACHE_ASSOC: c_int = 192;
                    pub const _SC_LEVEL2_CACHE_LINESIZE: c_int = 193;
                    pub const _SC_LEVEL3_CACHE_SIZE: c_int = 194;
                    pub const _SC_LEVEL3_CACHE_ASSOC: c_int = 195;
                    pub const _SC_LEVEL3_CACHE_LINESIZE: c_int = 196;
                    pub const _SC_LEVEL4_CACHE_SIZE: c_int = 197;
                    pub const _SC_LEVEL4_CACHE_ASSOC: c_int = 198;
                    pub const _SC_LEVEL4_CACHE_LINESIZE: c_int = 199;
                    pub const O_ACCMODE: c_int = 3;
                    pub const ST_RELATIME: c_ulong = 4096;
                    pub const NI_MAXHOST: socklen_t = 1025;
                    
                    pub const BINDERFS_SUPER_MAGIC: c_long = 0x6c6f6f70;
                    pub const XFS_SUPER_MAGIC: c_long = 0x58465342;

                    pub const CPU_SETSIZE: c_int = 0x400;

                    pub const PTRACE_TRACEME: c_uint = 0;
                    pub const PTRACE_PEEKTEXT: c_uint = 1;
                    pub const PTRACE_PEEKDATA: c_uint = 2;
                    pub const PTRACE_PEEKUSER: c_uint = 3;
                    pub const PTRACE_POKETEXT: c_uint = 4;
                    pub const PTRACE_POKEDATA: c_uint = 5;
                    pub const PTRACE_POKEUSER: c_uint = 6;
                    pub const PTRACE_CONT: c_uint = 7;
                    pub const PTRACE_KILL: c_uint = 8;
                    pub const PTRACE_SINGLESTEP: c_uint = 9;
                    pub const PTRACE_ATTACH: c_uint = 16;
                    pub const PTRACE_SYSCALL: c_uint = 24;
                    pub const PTRACE_SETOPTIONS: c_uint = 0x4200;
                    pub const PTRACE_GETEVENTMSG: c_uint = 0x4201;
                    pub const PTRACE_GETSIGINFO: c_uint = 0x4202;
                    pub const PTRACE_SETSIGINFO: c_uint = 0x4203;
                    pub const PTRACE_GETREGSET: c_uint = 0x4204;
                    pub const PTRACE_SETREGSET: c_uint = 0x4205;
                    pub const PTRACE_SEIZE: c_uint = 0x4206;
                    pub const PTRACE_INTERRUPT: c_uint = 0x4207;
                    pub const PTRACE_LISTEN: c_uint = 0x4208;
                    pub const PTRACE_PEEKSIGINFO: c_uint = 0x4209;
                    pub const PTRACE_GETSIGMASK: c_uint = 0x420a;
                    pub const PTRACE_SETSIGMASK: c_uint = 0x420b;
                    pub const PTRACE_GET_SYSCALL_INFO: c_uint = 0x420e;
                    pub const PTRACE_SYSCALL_INFO_NONE: __u8 = 0;
                    pub const PTRACE_SYSCALL_INFO_ENTRY: __u8 = 1;
                    pub const PTRACE_SYSCALL_INFO_EXIT: __u8 = 2;
                    pub const PTRACE_SYSCALL_INFO_SECCOMP: __u8 = 3;
                    pub const PTRACE_SET_SYSCALL_USER_DISPATCH_CONFIG: __u16 = 0x4210;
                    pub const PTRACE_GET_SYSCALL_USER_DISPATCH_CONFIG: __u16 = 0x4211;
                    
                    pub const TCA_PAD: c_ushort = 9;
                    pub const TCA_DUMP_INVISIBLE: c_ushort = 10;
                    pub const TCA_CHAIN: c_ushort = 11;
                    pub const TCA_HW_OFFLOAD: c_ushort = 12;

                    pub const RTM_DELNETCONF: u16 = 81;
                    pub const RTM_NEWSTATS: u16 = 92;
                    pub const RTM_GETSTATS: u16 = 94;
                    pub const RTM_NEWCACHEREPORT: u16 = 96;

                    pub const RTM_F_LOOKUP_TABLE: c_uint = 0x1000;
                    pub const RTM_F_FIB_MATCH: c_uint = 0x2000;

                    pub const RTA_VIA: c_ushort = 18;
                    pub const RTA_NEWDST: c_ushort = 19;
                    pub const RTA_PREF: c_ushort = 20;
                    pub const RTA_ENCAP_TYPE: c_ushort = 21;
                    pub const RTA_ENCAP: c_ushort = 22;
                    pub const RTA_EXPIRES: c_ushort = 23;
                    pub const RTA_PAD: c_ushort = 24;
                    pub const RTA_UID: c_ushort = 25;
                    pub const RTA_TTL_PROPAGATE: c_ushort = 26;
                    
                    pub const NTF_EXT_LEARNED: u8 = 0x10;
                    pub const NTF_OFFLOADED: u8 = 0x20;

                    pub const NDA_MASTER: c_ushort = 9;
                    pub const NDA_LINK_NETNSID: c_ushort = 10;
                    pub const NDA_SRC_VNI: c_ushort = 11;
                    
                    pub const UNAME26: c_int = 0x0020000;
                    pub const FDPIC_FUNCPTRS: c_int = 0x0080000;

                    pub const MAX_LINKS: c_int = 32;

                    pub const GENL_UNS_ADMIN_PERM: c_int = 0x10;

                    pub const GENL_ID_VFS_DQUOT: c_int = NLMSG_MIN_TYPE + 1;
                    pub const GENL_ID_PMCRAID: c_int = NLMSG_MIN_TYPE + 2;

                    pub const ELFOSABI_ARM_AEABI: u8 = 64;
                    
                    pub const CLONE_NEWTIME: c_int = 0x80;
                    pub const CLONE_CLEAR_SIGHAND: c_ulonglong = 0x100000000;
                    pub const CLONE_INTO_CGROUP: c_ulonglong = 0x200000000;
                    
                    pub const KEYCTL_DH_COMPUTE: u32 = 23;
                    pub const KEYCTL_PKEY_QUERY: u32 = 24;
                    pub const KEYCTL_PKEY_ENCRYPT: u32 = 25;
                    pub const KEYCTL_PKEY_DECRYPT: u32 = 26;
                    pub const KEYCTL_PKEY_SIGN: u32 = 27;
                    pub const KEYCTL_PKEY_VERIFY: u32 = 28;
                    pub const KEYCTL_RESTRICT_KEYRING: u32 = 29;

                    pub const KEYCTL_SUPPORTS_ENCRYPT: u32 = 0x01;
                    pub const KEYCTL_SUPPORTS_DECRYPT: u32 = 0x02;
                    pub const KEYCTL_SUPPORTS_SIGN: u32 = 0x04;
                    pub const KEYCTL_SUPPORTS_VERIFY: u32 = 0x08;
                    pub const KEYCTL_MOVE: u32 = 30;
                    pub const KEYCTL_CAPABILITIES: u32 = 31;

                    pub const KEYCTL_CAPS0_CAPABILITIES: u32 = 0x01;
                    pub const KEYCTL_CAPS0_PERSISTENT_KEYRINGS: u32 = 0x02;
                    pub const KEYCTL_CAPS0_DIFFIE_HELLMAN: u32 = 0x04;
                    pub const KEYCTL_CAPS0_PUBLIC_KEY: u32 = 0x08;
                    pub const KEYCTL_CAPS0_BIG_KEY: u32 = 0x10;
                    pub const KEYCTL_CAPS0_INVALIDATE: u32 = 0x20;
                    pub const KEYCTL_CAPS0_RESTRICT_KEYRING: u32 = 0x40;
                    pub const KEYCTL_CAPS0_MOVE: u32 = 0x80;
                    pub const KEYCTL_CAPS1_NS_KEYRING_NAME: u32 = 0x01;
                    pub const KEYCTL_CAPS1_NS_KEY_TAG: u32 = 0x02;

                    pub const M_MXFAST: c_int = 1;
                    pub const M_NLBLKS: c_int = 2;
                    pub const M_GRAIN: c_int = 3;
                    pub const M_KEEP: c_int = 4;
                    pub const M_TRIM_THRESHOLD: c_int = -1;
                    pub const M_TOP_PAD: c_int = -2;
                    pub const M_MMAP_THRESHOLD: c_int = -3;
                    pub const M_MMAP_MAX: c_int = -4;
                    pub const M_CHECK_ACTION: c_int = -5;
                    pub const M_PERTURB: c_int = -6;
                    pub const M_ARENA_TEST: c_int = -7;
                    pub const M_ARENA_MAX: c_int = -8;

                    pub const SOMAXCONN: c_int = 4096;
                    
                    pub const MOVE_MOUNT_F_SYMLINKS: c_uint = 0x00000001;
                    pub const MOVE_MOUNT_F_AUTOMOUNTS: c_uint = 0x00000002;
                    pub const MOVE_MOUNT_F_EMPTY_PATH: c_uint = 0x00000004;
                    pub const MOVE_MOUNT_T_SYMLINKS: c_uint = 0x00000010;
                    pub const MOVE_MOUNT_T_AUTOMOUNTS: c_uint = 0x00000020;
                    pub const MOVE_MOUNT_T_EMPTY_PATH: c_uint = 0x00000040;
                    pub const MOVE_MOUNT_SET_GROUP: c_uint = 0x00000100;
                    pub const MOVE_MOUNT_BENEATH: c_uint = 0x00000200;
                    
                    pub const ADJ_OFFSET: c_uint = 0x0001;
                    pub const ADJ_FREQUENCY: c_uint = 0x0002;
                    pub const ADJ_MAXERROR: c_uint = 0x0004;
                    pub const ADJ_ESTERROR: c_uint = 0x0008;
                    pub const ADJ_STATUS: c_uint = 0x0010;
                    pub const ADJ_TIMECONST: c_uint = 0x0020;
                    pub const ADJ_TAI: c_uint = 0x0080;
                    pub const ADJ_SETOFFSET: c_uint = 0x0100;
                    pub const ADJ_MICRO: c_uint = 0x1000;
                    pub const ADJ_NANO: c_uint = 0x2000;
                    pub const ADJ_TICK: c_uint = 0x4000;
                    pub const ADJ_OFFSET_SINGLESHOT: c_uint = 0x8001;
                    pub const ADJ_OFFSET_SS_READ: c_uint = 0xa001;
                    pub const MOD_OFFSET: c_uint = ADJ_OFFSET;
                    pub const MOD_FREQUENCY: c_uint = ADJ_FREQUENCY;
                    pub const MOD_MAXERROR: c_uint = ADJ_MAXERROR;
                    pub const MOD_ESTERROR: c_uint = ADJ_ESTERROR;
                    pub const MOD_STATUS: c_uint = ADJ_STATUS;
                    pub const MOD_TIMECONST: c_uint = ADJ_TIMECONST;
                    pub const MOD_CLKB: c_uint = ADJ_TICK;
                    pub const MOD_CLKA: c_uint = ADJ_OFFSET_SINGLESHOT;
                    pub const MOD_TAI: c_uint = ADJ_TAI;
                    pub const MOD_MICRO: c_uint = ADJ_MICRO;
                    pub const MOD_NANO: c_uint = ADJ_NANO;
                    pub const STA_PLL: c_int = 0x0001;
                    pub const STA_PPSFREQ: c_int = 0x0002;
                    pub const STA_PPSTIME: c_int = 0x0004;
                    pub const STA_FLL: c_int = 0x0008;
                    pub const STA_INS: c_int = 0x0010;
                    pub const STA_DEL: c_int = 0x0020;
                    pub const STA_UNSYNC: c_int = 0x0040;
                    pub const STA_FREQHOLD: c_int = 0x0080;
                    pub const STA_PPSSIGNAL: c_int = 0x0100;
                    pub const STA_PPSJITTER: c_int = 0x0200;
                    pub const STA_PPSWANDER: c_int = 0x0400;
                    pub const STA_PPSERROR: c_int = 0x0800;
                    pub const STA_CLOCKERR: c_int = 0x1000;
                    pub const STA_NANO: c_int = 0x2000;
                    pub const STA_MODE: c_int = 0x4000;
                    pub const STA_CLK: c_int = 0x8000;
                    pub const STA_RONLY: c_int = STA_PPSSIGNAL
                    | STA_PPSJITTER
                    | STA_PPSWANDER
                    | STA_PPSERROR
                    | STA_CLOCKERR
                    | STA_NANO
                    | STA_MODE
                    | STA_CLK;

                    pub const NTP_API: c_int = 4;
                    pub const TIME_OK: c_int = 0;
                    pub const TIME_INS: c_int = 1;
                    pub const TIME_DEL: c_int = 2;
                    pub const TIME_OOP: c_int = 3;
                    pub const TIME_WAIT: c_int = 4;
                    pub const TIME_ERROR: c_int = 5;
                    pub const TIME_BAD: c_int = TIME_ERROR;
                    pub const MAXTC: c_long = 6;
                    
                    pub const GLOB_PERIOD: c_int = 1 << 7;
                    pub const GLOB_ALTDIRFUNC: c_int = 1 << 9;
                    pub const GLOB_BRACE: c_int = 1 << 10;
                    pub const GLOB_NOMAGIC: c_int = 1 << 11;
                    pub const GLOB_TILDE: c_int = 1 << 12;
                    pub const GLOB_ONLYDIR: c_int = 1 << 13;
                    pub const GLOB_TILDE_CHECK: c_int = 1 << 14;

                    pub const MADV_COLLAPSE: c_int = 25;

                    pub const PTHREAD_STACK_MIN: size_t = 16384;

                    pub const PTHREAD_MUTEX_ADAPTIVE_NP: c_int = 3;

                    pub const REG_STARTEND: c_int = 4;

                    pub const REG_EEND: c_int = 14;
                    pub const REG_ESIZE: c_int = 15;
                    pub const REG_ERPAREN: c_int = 16;

                    extern "C" 
                    {
                        pub fn fgetspent_r
                        (
                            fp: *mut FILE,
                            spbuf: *mut spwd,
                            buf: *mut c_char,
                            buflen: size_t,
                            spbufp: *mut *mut spwd,
                        ) -> c_int;

                        pub fn sgetspent_r
                        (
                            s: *const c_char,
                            spbuf: *mut spwd,
                            buf: *mut c_char,
                            buflen: size_t,
                            spbufp: *mut *mut spwd,
                        ) -> c_int;

                        pub fn getspent_r
                        (
                            spbuf: *mut spwd,
                            buf: *mut c_char,
                            buflen: size_t,
                            spbufp: *mut *mut spwd,
                        ) -> c_int;

                        pub fn qsort_r
                        (
                            base: *mut c_void,
                            num: size_t,
                            size: size_t,
                            compar: Option<unsafe extern "C" fn(*const c_void, *const c_void, *mut c_void) -> c_int>,
                            arg: *mut c_void,
                        );
                        
                        #[cfg_attr(gnu_time_bits64, link_name = "__sendmmsg64")]
                        pub fn sendmmsg
                        (
                            sockfd: c_int,
                            msgvec: *mut mmsghdr,
                            vlen: c_uint,
                            flags: c_int,
                        ) -> c_int;
                        
                        #[cfg_attr(gnu_time_bits64, link_name = "__recvmmsg64")]
                        pub fn recvmmsg
                        (
                            sockfd: c_int,
                            msgvec: *mut mmsghdr,
                            vlen: c_uint,
                            flags: c_int,
                            timeout: *mut timespec,
                        ) -> c_int;

                        pub fn getrlimit64(resource: __rlimit_resource_t, rlim: *mut rlimit64) -> c_int;
                        pub fn setrlimit64(resource: __rlimit_resource_t, rlim: *const rlimit64) -> c_int;
                        
                        #[cfg_attr(gnu_file_offset_bits64, link_name = "getrlimit64")]
                        pub fn getrlimit(resource: __rlimit_resource_t, rlim: *mut rlimit) -> c_int;
                        
                        #[cfg_attr(gnu_file_offset_bits64, link_name = "setrlimit64")]
                        pub fn setrlimit(resource: __rlimit_resource_t, rlim: *const rlimit) -> c_int;
                        
                        #[cfg_attr(gnu_file_offset_bits64, link_name = "prlimit64")]
                        pub fn prlimit
                        (
                            pid: pid_t,
                            resource: __rlimit_resource_t,
                            new_limit: *const rlimit,
                            old_limit: *mut rlimit,
                        ) -> c_int;

                        pub fn prlimit64
                        (
                            pid: pid_t,
                            resource: __rlimit_resource_t,
                            new_limit: *const rlimit64,
                            old_limit: *mut rlimit64,
                        ) -> c_int;

                        pub fn utmpname(file: *const c_char) -> c_int;
                        pub fn utmpxname(file: *const c_char) -> c_int;
                        pub fn getutxent() -> *mut utmpx;
                        pub fn getutxid(ut: *const utmpx) -> *mut utmpx;
                        pub fn getutxline(ut: *const utmpx) -> *mut utmpx;
                        pub fn pututxline(ut: *const utmpx) -> *mut utmpx;
                        pub fn setutxent();
                        pub fn endutxent();
                        pub fn getpt() -> c_int;
                        pub fn mallopt(param: c_int, value: c_int) -> c_int;

                        #[cfg_attr(gnu_time_bits64, link_name = "__gettimeofday64")]
                        pub fn gettimeofday(tp: *mut timeval, tz: *mut timezone) -> c_int;

                        pub fn getentropy(buf: *mut c_void, buflen: size_t) -> c_int;
                        pub fn getrandom(buf: *mut c_void, buflen: size_t, flags: c_uint) -> ssize_t;
                        pub fn getauxval(type_: c_ulong) -> c_ulong;

                        #[cfg_attr(gnu_time_bits64, link_name = "___adjtimex64")]
                        pub fn adjtimex(buf: *mut timex) -> c_int;

                        #[cfg_attr(gnu_time_bits64, link_name = "___adjtimex64")]
                        pub fn ntp_adjtime(buf: *mut timex) -> c_int;

                        #[cfg_attr(not(gnu_time_bits64), link_name = "ntp_gettimex")]
                        #[cfg_attr(gnu_time_bits64, link_name = "__ntp_gettime64")]
                        pub fn ntp_gettime(buf: *mut ntptimeval) -> c_int;

                        #[cfg_attr(gnu_time_bits64, link_name = "__clock_adjtime64")]
                        pub fn clock_adjtime(clk_id: clockid_t, buf: *mut timex) -> c_int;

                        pub fn fanotify_mark
                        (
                            fd: c_int,
                            flags: c_uint,
                            mask: u64,
                            dirfd: c_int,
                            path: *const c_char,
                        ) -> c_int;

                        #[cfg_attr(gnu_file_offset_bits64, link_name = "preadv64v2")]
                        pub fn preadv2
                        (
                            fd: c_int,
                            iov: *const iovec,
                            iovcnt: c_int,
                            offset: off_t,
                            flags: c_int,
                        ) -> ssize_t;

                        #[cfg_attr(gnu_file_offset_bits64, link_name = "pwritev64v2")]
                        pub fn pwritev2
                        (
                            fd: c_int,
                            iov: *const iovec,
                            iovcnt: c_int,
                            offset: off_t,
                            flags: c_int,
                        ) -> ssize_t;

                        pub fn preadv64v2
                        (
                            fd: c_int,
                            iov: *const iovec,
                            iovcnt: c_int,
                            offset: off64_t,
                            flags: c_int,
                        ) -> ssize_t;

                        pub fn pwritev64v2
                        (
                            fd: c_int,
                            iov: *const iovec,
                            iovcnt: c_int,
                            offset: off64_t,
                            flags: c_int,
                        ) -> ssize_t;

                        pub fn renameat2
                        (
                            olddirfd: c_int,
                            oldpath: *const c_char,
                            newdirfd: c_int,
                            newpath: *const c_char,
                            flags: c_uint,
                        ) -> c_int;

                        pub fn explicit_bzero(s: *mut c_void, len: size_t);
                        pub fn reallocarray(ptr: *mut c_void, nmemb: size_t, size: size_t) -> *mut c_void;

                        pub fn ctermid(s: *mut c_char) -> *mut c_char;
                        pub fn backtrace(buf: *mut *mut c_void, sz: c_int) -> c_int;

                        #[cfg_attr(gnu_time_bits64, link_name = "__glob64_time64")]
                        pub fn glob64
                        (
                            pattern: *const c_char,
                            flags: c_int,
                            errfunc: Option<extern "C" fn(epath: *const c_char, errno: c_int) -> c_int>,
                            pglob: *mut glob64_t,
                        ) -> c_int;

                        #[cfg_attr(gnu_time_bits64, link_name = "__globfree64_time64")]
                        pub fn globfree64(pglob: *mut glob64_t);
                        pub fn ptrace(request: c_uint, ...) -> c_long;

                        pub fn pthread_attr_getaffinity_np
                        (
                            attr: *const pthread_attr_t,
                            cpusetsize: size_t,
                            cpuset: *mut cpu_set_t,
                        ) -> c_int;

                        pub fn pthread_attr_setaffinity_np
                        (
                            attr: *mut pthread_attr_t,
                            cpusetsize: size_t,
                            cpuset: *const cpu_set_t,
                        ) -> c_int;

                        pub fn getpriority(which: __priority_which_t, who: id_t) -> c_int;
                        pub fn setpriority(which: __priority_which_t, who: id_t, prio: c_int) -> c_int;
                        
                        pub fn pthread_rwlockattr_getkind_np
                        (
                            attr: *const pthread_rwlockattr_t,
                            val: *mut c_int,
                        ) -> c_int;

                        pub fn pthread_rwlockattr_setkind_np
                        (
                            attr: *mut pthread_rwlockattr_t,
                            val: c_int,
                        ) -> c_int;

                        pub fn pthread_sigqueue(thread: pthread_t, sig: c_int, value: sigval) -> c_int;
                        pub fn mallinfo() -> mallinfo;
                        pub fn mallinfo2() -> mallinfo2;
                        pub fn malloc_stats();
                        pub fn malloc_info(options: c_int, stream: *mut FILE) -> c_int;
                        pub fn malloc_usable_size(ptr: *mut c_void) -> size_t;
                        
                        pub fn getpwent_r
                        (
                            pwd: *mut passwd,
                            buf: *mut c_char,
                            buflen: size_t,
                            result: *mut *mut passwd,
                        ) -> c_int;

                        pub fn getgrent_r
                        (
                            grp: *mut group,
                            buf: *mut c_char,
                            buflen: size_t,
                            result: *mut *mut group,
                        ) -> c_int;

                        pub fn fgetpwent_r
                        (
                            stream: *mut FILE,
                            pwd: *mut passwd,
                            buf: *mut c_char,
                            buflen: size_t,
                            result: *mut *mut passwd,
                        ) -> c_int;

                        pub fn fgetgrent_r
                        (
                            stream: *mut FILE,
                            grp: *mut group,
                            buf: *mut c_char,
                            buflen: size_t,
                            result: *mut *mut group,
                        ) -> c_int;

                        pub fn putpwent(p: *const passwd, stream: *mut FILE) -> c_int;
                        pub fn putgrent(grp: *const group, stream: *mut FILE) -> c_int;

                        pub fn sethostid(hostid: c_long) -> c_int;

                        pub fn memfd_create(name: *const c_char, flags: c_uint) -> c_int;
                        pub fn mlock2(addr: *const c_void, len: size_t, flags: c_uint) -> c_int;

                        pub fn euidaccess(pathname: *const c_char, mode: c_int) -> c_int;
                        pub fn eaccess(pathname: *const c_char, mode: c_int) -> c_int;

                        pub fn asctime_r(tm: *const tm, buf: *mut c_char) -> *mut c_char;

                        #[cfg_attr(gnu_time_bits64, link_name = "__ctime64_r")]
                        pub fn ctime_r(timep: *const time_t, buf: *mut c_char) -> *mut c_char;

                        pub fn dirname(path: *mut c_char) -> *mut c_char;

                        #[link_name = "__xpg_basename"]
                        pub fn posix_basename(path: *mut c_char) -> *mut c_char;

                        #[link_name = "basename"]
                        pub fn gnu_basename(path: *const c_char) -> *mut c_char;
                        pub fn dlmopen(lmid: Lmid_t, filename: *const c_char, flag: c_int) -> *mut c_void;
                        pub fn dlinfo(handle: *mut c_void, request: c_int, info: *mut c_void) -> c_int;
                        
                        pub fn dladdr1
                        (
                            addr: *const c_void,
                            info: *mut Dl_info,
                            extra_info: *mut *mut c_void,
                            flags: c_int,
                        ) -> c_int;

                        pub fn malloc_trim(__pad: size_t) -> c_int;
                        pub fn gnu_get_libc_release() -> *const c_char;
                        pub fn gnu_get_libc_version() -> *const c_char;
                        
                        pub fn posix_spawn_file_actions_addchdir_np
                        (
                            actions: *mut posix_spawn_file_actions_t,
                            path: *const c_char,
                        ) -> c_int;

                        pub fn posix_spawn_file_actions_addfchdir_np
                        (
                            actions: *mut posix_spawn_file_actions_t,
                            fd: c_int,
                        ) -> c_int;

                        pub fn posix_spawn_file_actions_addclosefrom_np
                        (
                            actions: *mut posix_spawn_file_actions_t,
                            from: c_int,
                        ) -> c_int;
                        
                        pub fn posix_spawn_file_actions_addtcsetpgrp_np
                        (
                            actions: *mut posix_spawn_file_actions_t,
                            tcfd: c_int,
                        ) -> c_int;
                        
                        pub fn getmntent_r
                        (
                            stream: *mut FILE,
                            mntbuf: *mut mntent,
                            buf: *mut c_char,
                            buflen: c_int,
                        ) -> *mut mntent;

                        pub fn execveat
                        (
                            dirfd: c_int,
                            pathname: *const c_char,
                            argv: *const *mut c_char,
                            envp: *const *mut c_char,
                            flags: c_int,
                        ) -> c_int;
                        
                        pub fn close_range(first: c_uint, last: c_uint, flags: c_int) -> c_int;

                        pub fn mq_notify(mqdes: mqd_t, sevp: *const sigevent) -> c_int;

                        #[cfg_attr(gnu_time_bits64, link_name = "__epoll_pwait2_time64")]
                        pub fn epoll_pwait2
                        (
                            epfd: c_int,
                            events: *mut epoll_event,
                            maxevents: c_int,
                            timeout: *const timespec,
                            sigmask: *const sigset_t,
                        ) -> c_int;

                        pub fn mempcpy(dest: *mut c_void, src: *const c_void, n: size_t) -> *mut c_void;
                    }

                    cfg_if!
                    {
                        if #[cfg(any
                        (
                            target_arch = "x86",
                            target_arch = "arm",
                            target_arch = "m68k",
                            target_arch = "csky",
                            target_arch = "mips",
                            target_arch = "mips32r6",
                            target_arch = "powerpc",
                            target_arch = "sparc",
                            target_arch = "riscv32"
                        ))]
                        {
                            mod b32
                            {
                                //! 32-bit specific definitions for linux-like values
                                use ::libc::*;

                                pub type clock_t = i32;

                                pub type shmatt_t = c_ulong;
                                pub type msgqnum_t = c_ulong;
                                pub type msglen_t = c_ulong;
                                pub type nlink_t = u32;
                                pub type __u64 = c_ulonglong;
                                pub type __s64 = c_longlong;
                                pub type __fsword_t = i32;
                                pub type fsblkcnt64_t = u64;
                                pub type fsfilcnt64_t = u64;
                                pub type __syscall_ulong_t = c_ulong;
                                pub type __suseconds64_t = i64;

                                cfg_if!
                                {
                                    if #[cfg(gnu_time_bits64)]
                                    {
                                        pub type suseconds_t = i32;
                                        type __ino_t = c_ulong;
                                        type __ino64_t = u64;
                                        pub type ino_t = __ino64_t;
                                        pub type off_t = i64;
                                        pub type blkcnt_t = i64;
                                        pub type fsblkcnt_t = u64;
                                        pub type fsfilcnt_t = u64;
                                        pub type rlim_t = u64;
                                        pub type blksize_t = i32;
                                    }
                                    
                                    else if #[cfg(gnu_file_offset_bits64)]
                                    {
                                        pub type suseconds_t = i32;
                                        type __ino_t = c_ulong;
                                        type __ino64_t = u64;
                                        pub type ino_t = __ino64_t;
                                        pub type off_t = i64;
                                        pub type blkcnt_t = i64;
                                        pub type fsblkcnt_t = u64;
                                        pub type fsfilcnt_t = u64;
                                        pub type rlim_t = u64;
                                        pub type blksize_t = i32;
                                    }
                                    
                                    else
                                    {
                                        pub type suseconds_t = i32;
                                        type __ino_t = c_ulong;
                                        type __ino64_t = u64;
                                        pub type ino_t = __ino_t;
                                        pub type off_t = i32;
                                        pub type blkcnt_t = i32;
                                        pub type fsblkcnt_t = c_ulong;
                                        pub type fsfilcnt_t = c_ulong;
                                        pub type rlim_t = c_ulong;
                                        pub type blksize_t = i32;
                                    }
                                }

                                cfg_if!
                                {
                                    if #[cfg(not(any
                                    (
                                        target_arch = "mips",
                                        target_arch = "mips32r6",
                                        target_arch = "powerpc",
                                        target_arch = "sparc"
                                    )))]
                                    {
                                        s!
                                        {
                                            pub struct stat
                                            {
                                                pub st_dev: dev_t,

                                                #[cfg(not(gnu_time_bits64))]
                                                __pad1: c_uint,

                                                #[cfg(any(gnu_time_bits64, not(gnu_file_offset_bits64)))]
                                                pub st_ino: ino_t,
                                                #[cfg(all(not(gnu_time_bits64), gnu_file_offset_bits64))]
                                                __st_ino: __ino_t,

                                                pub st_mode: mode_t,
                                                pub st_nlink: nlink_t,
                                                pub st_uid: uid_t,
                                                pub st_gid: gid_t,

                                                pub st_rdev: dev_t,

                                                #[cfg(not(gnu_time_bits64))]
                                                __pad2: c_uint,

                                                pub st_size: off_t,

                                                pub st_blksize: blksize_t,
                                                pub st_blocks: blkcnt_t,

                                                pub st_atime: time_t,
                                                pub st_atime_nsec: c_long,
                                                #[cfg(gnu_time_bits64)]
                                                _atime_pad: c_int,
                                                pub st_mtime: time_t,
                                                pub st_mtime_nsec: c_long,
                                                #[cfg(gnu_time_bits64)]
                                                _mtime_pad: c_int,
                                                pub st_ctime: time_t,
                                                pub st_ctime_nsec: c_long,
                                                #[cfg(gnu_time_bits64)]
                                                _ctime_pad: c_int,

                                                #[cfg(not(gnu_file_offset_bits64))]
                                                __glibc_reserved4: c_long,
                                                #[cfg(not(gnu_file_offset_bits64))]
                                                __glibc_reserved5: c_long,
                                                #[cfg(all(not(gnu_time_bits64), gnu_file_offset_bits64))]
                                                pub st_ino: ino_t,
                                            }
                                        }
                                    }
                                }

                                s!
                                {
                                    pub struct statvfs
                                    {
                                        pub f_bsize: c_ulong,
                                        pub f_frsize: c_ulong,
                                        pub f_blocks: fsblkcnt_t,
                                        pub f_bfree: fsblkcnt_t,
                                        pub f_bavail: fsblkcnt_t,
                                        pub f_files: fsfilcnt_t,
                                        pub f_ffree: fsfilcnt_t,
                                        pub f_favail: fsfilcnt_t,
                                        pub f_fsid: c_ulong,
                                        __f_unused: c_int,
                                        pub f_flag: c_ulong,
                                        pub f_namemax: c_ulong,
                                        __f_spare: [c_int; 6],
                                    }

                                    pub struct pthread_attr_t
                                    {
                                        __size: [u32; 9],
                                    }

                                    pub struct sigset_t
                                    {
                                        __val: [c_ulong; 32],
                                    }

                                    pub struct sysinfo
                                    {
                                        pub uptime: c_long,
                                        pub loads: [c_ulong; 3],
                                        pub totalram: c_ulong,
                                        pub freeram: c_ulong,
                                        pub sharedram: c_ulong,
                                        pub bufferram: c_ulong,
                                        pub totalswap: c_ulong,
                                        pub freeswap: c_ulong,
                                        pub procs: c_ushort,
                                        #[deprecated
                                        (
                                            since = "0.2.58",
                                            note = "This padding field might become private in the future"
                                        )]
                                        pub pad: c_ushort,
                                        pub totalhigh: c_ulong,
                                        pub freehigh: c_ulong,
                                        pub mem_unit: c_uint,
                                        pub _f: [c_char; 8],
                                    }

                                    pub struct semid_ds
                                    {
                                        pub sem_perm: ipc_perm,
                                        #[cfg(all(not(gnu_time_bits64), target_arch = "powerpc"))]
                                        __reserved: __syscall_ulong_t,
                                        pub sem_otime: time_t,
                                        #[cfg(not(any(
                                            gnu_time_bits64,
                                            target_arch = "mips",
                                            target_arch = "mips32r6",
                                            target_arch = "powerpc"
                                        )))]
                                        __reserved: __syscall_ulong_t,
                                        #[cfg(all(not(gnu_time_bits64), target_arch = "powerpc"))]
                                        __reserved2: __syscall_ulong_t,
                                        pub sem_ctime: time_t,
                                        #[cfg(not(any(
                                            gnu_time_bits64,
                                            target_arch = "mips",
                                            target_arch = "mips32r6",
                                            target_arch = "powerpc"
                                        )))]
                                        __reserved2: __syscall_ulong_t,
                                        pub sem_nsems: __syscall_ulong_t,
                                        #[cfg(all(
                                            gnu_time_bits64,
                                            not(any(
                                                target_arch = "mips",
                                                target_arch = "mips32r6",
                                                target_arch = "powerpc",
                                                target_arch = "arm",
                                                target_arch = "x86"
                                            ))
                                        ))]
                                        __reserved2: __syscall_ulong_t,
                                        __glibc_reserved3: __syscall_ulong_t,
                                        __glibc_reserved4: __syscall_ulong_t,
                                    }

                                    #[cfg(gnu_time_bits64)]
                                    pub struct timex
                                    {
                                        pub modes: c_uint,
                                        _pad1: c_int,
                                        pub offset: c_longlong,
                                        pub freq: c_longlong,
                                        pub maxerror: c_longlong,
                                        pub esterror: c_longlong,
                                        pub status: c_int,
                                        _pad2: c_int,
                                        pub constant: c_longlong,
                                        pub precision: c_longlong,
                                        pub tolerance: c_longlong,
                                        pub time: timeval,
                                        pub tick: c_longlong,
                                        pub ppsfreq: c_longlong,
                                        pub jitter: c_longlong,
                                        pub shift: c_int,
                                        _pad3: c_int,
                                        pub stabil: c_longlong,
                                        pub jitcnt: c_longlong,
                                        pub calcnt: c_longlong,
                                        pub errcnt: c_longlong,
                                        pub stbcnt: c_longlong,
                                        pub tai: c_int,
                                        pub __unused1: i32,
                                        pub __unused2: i32,
                                        pub __unused3: i32,
                                        pub __unused4: i32,
                                        pub __unused5: i32,
                                        pub __unused6: i32,
                                        pub __unused7: i32,
                                        pub __unused8: i32,
                                        pub __unused9: i32,
                                        pub __unused10: i32,
                                        pub __unused11: i32,
                                    }

                                    #[cfg(not(gnu_time_bits64))]
                                    pub struct timex
                                    {
                                        pub modes: c_uint,
                                        pub offset: c_long,
                                        pub freq: c_long,
                                        pub maxerror: c_long,
                                        pub esterror: c_long,
                                        pub status: c_int,
                                        pub constant: c_long,
                                        pub precision: c_long,
                                        pub tolerance: c_long,
                                        pub time: timeval,
                                        pub tick: c_long,
                                        pub ppsfreq: c_long,
                                        pub jitter: c_long,
                                        pub shift: c_int,
                                        pub stabil: c_long,
                                        pub jitcnt: c_long,
                                        pub calcnt: c_long,
                                        pub errcnt: c_long,
                                        pub stbcnt: c_long,
                                        pub tai: c_int,
                                        pub __unused1: i32,
                                        pub __unused2: i32,
                                        pub __unused3: i32,
                                        pub __unused4: i32,
                                        pub __unused5: i32,
                                        pub __unused6: i32,
                                        pub __unused7: i32,
                                        pub __unused8: i32,
                                        pub __unused9: i32,
                                        pub __unused10: i32,
                                        pub __unused11: i32,
                                    }
                                }

                                pub const POSIX_FADV_DONTNEED: c_int = 4;
                                pub const POSIX_FADV_NOREUSE: c_int = 5;

                                pub const F_OFD_GETLK: c_int = 36;
                                pub const F_OFD_SETLK: c_int = 37;
                                pub const F_OFD_SETLKW: c_int = 38;

                                pub const __SIZEOF_PTHREAD_CONDATTR_T: usize = 4;
                                pub const __SIZEOF_PTHREAD_MUTEX_T: usize = 24;
                                pub const __SIZEOF_PTHREAD_RWLOCK_T: usize = 32;
                                pub const __SIZEOF_PTHREAD_BARRIER_T: usize = 20;
                                pub const __SIZEOF_PTHREAD_MUTEXATTR_T: usize = 4;
                                pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: usize = 8;
                                pub const __SIZEOF_PTHREAD_BARRIERATTR_T: usize = 4;

                                cfg_if!
                                {
                                    if #[cfg(target_arch = "sparc")]
                                    {
                                        pub const O_NOATIME: c_int = 0x200000;
                                        pub const O_PATH: c_int = 0x1000000;
                                        pub const O_TMPFILE: c_int = 0x2000000 | O_DIRECTORY;

                                        pub const SA_ONSTACK: c_int = 1;

                                        pub const PTRACE_DETACH: c_uint = 11;

                                        pub const F_RDLCK: c_int = 1;
                                        pub const F_WRLCK: c_int = 2;
                                        pub const F_UNLCK: c_int = 3;

                                        pub const SFD_CLOEXEC: c_int = 0x400000;

                                        pub const NCCS: usize = 17;

                                        pub const O_TRUNC: c_int = 0x400;
                                        pub const O_CLOEXEC: c_int = 0x400000;

                                        pub const EBFONT: c_int = 109;
                                        pub const ENOSTR: c_int = 72;
                                        pub const ENODATA: c_int = 111;
                                        pub const ETIME: c_int = 73;
                                        pub const ENOSR: c_int = 74;
                                        pub const ENONET: c_int = 80;
                                        pub const ENOPKG: c_int = 113;
                                        pub const EREMOTE: c_int = 71;
                                        pub const ENOLINK: c_int = 82;
                                        pub const EADV: c_int = 83;
                                        pub const ESRMNT: c_int = 84;
                                        pub const ECOMM: c_int = 85;
                                        pub const EPROTO: c_int = 86;
                                        pub const EDOTDOT: c_int = 88;

                                        pub const SA_NODEFER: c_int = 0x20;
                                        pub const SA_RESETHAND: c_int = 0x4;
                                        pub const SA_RESTART: c_int = 0x2;
                                        pub const SA_NOCLDSTOP: c_int = 0x00000008;

                                        pub const EPOLL_CLOEXEC: c_int = 0x400000;

                                        pub const EFD_CLOEXEC: c_int = 0x400000;
                                    }
                                    
                                    else
                                    {
                                        pub const O_NOATIME: c_int = 0o1000000;
                                        pub const O_PATH: c_int = 0o10000000;
                                        pub const O_TMPFILE: c_int = 0o20000000 | O_DIRECTORY;

                                        pub const SA_ONSTACK: c_int = 0x08000000;

                                        pub const PTRACE_DETACH: c_uint = 17;

                                        pub const F_RDLCK: c_int = 0;
                                        pub const F_WRLCK: c_int = 1;
                                        pub const F_UNLCK: c_int = 2;

                                        pub const SFD_CLOEXEC: c_int = 0x080000;

                                        pub const NCCS: usize = 32;

                                        pub const O_TRUNC: c_int = 512;
                                        pub const O_CLOEXEC: c_int = 0x80000;
                                        pub const EBFONT: c_int = 59;
                                        pub const ENOSTR: c_int = 60;
                                        pub const ENODATA: c_int = 61;
                                        pub const ETIME: c_int = 62;
                                        pub const ENOSR: c_int = 63;
                                        pub const ENONET: c_int = 64;
                                        pub const ENOPKG: c_int = 65;
                                        pub const EREMOTE: c_int = 66;
                                        pub const ENOLINK: c_int = 67;
                                        pub const EADV: c_int = 68;
                                        pub const ESRMNT: c_int = 69;
                                        pub const ECOMM: c_int = 70;
                                        pub const EPROTO: c_int = 71;
                                        pub const EDOTDOT: c_int = 73;

                                        pub const SA_NODEFER: c_int = 0x40000000;
                                        pub const SA_RESETHAND: c_int = 0x80000000;
                                        pub const SA_RESTART: c_int = 0x10000000;
                                        pub const SA_NOCLDSTOP: c_int = 0x00000001;

                                        pub const EPOLL_CLOEXEC: c_int = 0x80000;

                                        pub const EFD_CLOEXEC: c_int = 0x80000;
                                    }
                                }

                                cfg_if!
                                {
                                    if #[cfg(gnu_file_offset_bits64)]
                                    {
                                        pub const F_SETLK: c_int = 13;
                                        pub const F_SETLKW: c_int = 14;
                                    }
                                    
                                    else
                                    {
                                        pub const F_SETLK: c_int = 6;
                                        pub const F_SETLKW: c_int = 7;
                                    }
                                }

                                #[cfg(target_endian = "little")]
                                pub const PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = pthread_mutex_t
                                {
                                    size: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                                };

                                #[cfg(target_endian = "little")]
                                pub const PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP: pthread_mutex_t = pthread_mutex_t 
                                {
                                    size: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                                };
                                
                                #[cfg(target_endian = "little")]
                                pub const PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = pthread_mutex_t
                                {
                                    size: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
                                };

                                #[cfg(target_endian = "big")]
                                pub const PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = pthread_mutex_t
                                {
                                    size: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
                                };

                                #[cfg(target_endian = "big")]
                                pub const PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP: pthread_mutex_t = pthread_mutex_t
                                {
                                    size: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0 ],
                                };

                                #[cfg(target_endian = "big")]
                                pub const PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = pthread_mutex_t
                                {
                                    size: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0 ],
                                };

                                pub const PTRACE_GETFPREGS: c_uint = 14;
                                pub const PTRACE_SETFPREGS: c_uint = 15;
                                pub const PTRACE_GETREGS: c_uint = 12;
                                pub const PTRACE_SETREGS: c_uint = 13;

                                extern "C"
                                {
                                    pub fn sysctl
                                    (
                                        name: *mut c_int,
                                        namelen: c_int,
                                        oldp: *mut c_void,
                                        oldlenp: *mut size_t,
                                        newp: *mut c_void,
                                        newlen: size_t,
                                    ) -> c_int;
                                }

                                mod x86
                                {
                                    use ::libc::*;

                                    pub type wchar_t = i32;
                                    pub type greg_t = i32;

                                    s!
                                    {
                                        #[allow(unpredictable_function_pointer_comparisons)]
                                        pub struct sigaction 
                                        {
                                            pub sa_sigaction: sighandler_t,
                                            pub sa_mask: sigset_t,
                                            pub sa_flags: c_int,
                                            pub sa_restorer: Option<extern "C" fn()>,
                                        }

                                        pub struct statfs 
                                        {
                                            pub f_type: __fsword_t,
                                            pub f_bsize: __fsword_t,
                                            pub f_blocks: fsblkcnt_t,
                                            pub f_bfree: fsblkcnt_t,
                                            pub f_bavail: fsblkcnt_t,

                                            pub f_files: fsfilcnt_t,
                                            pub f_ffree: fsfilcnt_t,
                                            pub f_fsid: fsid_t,

                                            pub f_namelen: __fsword_t,
                                            pub f_frsize: __fsword_t,
                                            pub f_flags: __fsword_t,
                                            f_spare: [crate::__fsword_t; 4],
                                        }

                                        pub struct flock 
                                        {
                                            pub l_type: c_short,
                                            pub l_whence: c_short,
                                            pub l_start: off_t,
                                            pub l_len: off_t,
                                            pub l_pid: pid_t,
                                        }

                                        pub struct flock64 
                                        {
                                            pub l_type: c_short,
                                            pub l_whence: c_short,
                                            pub l_start: off64_t,
                                            pub l_len: off64_t,
                                            pub l_pid: pid_t,
                                        }

                                        pub struct _libc_fpreg 
                                        {
                                            pub significand: [u16; 4],
                                            pub exponent: u16,
                                        }

                                        pub struct _libc_fpstate 
                                        {
                                            pub cw: c_ulong,
                                            pub sw: c_ulong,
                                            pub tag: c_ulong,
                                            pub ipoff: c_ulong,
                                            pub cssel: c_ulong,
                                            pub dataoff: c_ulong,
                                            pub datasel: c_ulong,
                                            pub _st: [_libc_fpreg; 8],
                                            pub status: c_ulong,
                                        }

                                        pub struct user_fpregs_struct
                                        {
                                            pub cwd: c_long,
                                            pub swd: c_long,
                                            pub twd: c_long,
                                            pub fip: c_long,
                                            pub fcs: c_long,
                                            pub foo: c_long,
                                            pub fos: c_long,
                                            pub st_space: [c_long; 20],
                                        }

                                        pub struct user_regs_struct
                                        {
                                            pub ebx: c_long,
                                            pub ecx: c_long,
                                            pub edx: c_long,
                                            pub esi: c_long,
                                            pub edi: c_long,
                                            pub ebp: c_long,
                                            pub eax: c_long,
                                            pub xds: c_long,
                                            pub xes: c_long,
                                            pub xfs: c_long,
                                            pub xgs: c_long,
                                            pub orig_eax: c_long,
                                            pub eip: c_long,
                                            pub xcs: c_long,
                                            pub eflags: c_long,
                                            pub esp: c_long,
                                            pub xss: c_long,
                                        }

                                        pub struct user
                                        {
                                            pub regs: user_regs_struct,
                                            pub u_fpvalid: c_int,
                                            pub i387: user_fpregs_struct,
                                            pub u_tsize: c_ulong,
                                            pub u_dsize: c_ulong,
                                            pub u_ssize: c_ulong,
                                            pub start_code: c_ulong,
                                            pub start_stack: c_ulong,
                                            pub signal: c_long,
                                            __reserved: c_int,
                                            pub u_ar0: *mut user_regs_struct,
                                            pub u_fpstate: *mut user_fpregs_struct,
                                            pub magic: c_ulong,
                                            pub u_comm: [c_char; 32],
                                            pub u_debugreg: [c_int; 8],
                                        }

                                        pub struct mcontext_t
                                        {
                                            pub gregs: [greg_t; 19],
                                            pub fpregs: *mut _libc_fpstate,
                                            pub oldmask: c_ulong,
                                            pub cr2: c_ulong,
                                        }

                                        pub struct ipc_perm
                                        {
                                            pub __key: key_t,
                                            pub uid: uid_t,
                                            pub gid: gid_t,
                                            pub cuid: uid_t,
                                            pub cgid: gid_t,
                                            pub mode: c_ushort,
                                            __pad1: c_ushort,
                                            pub __seq: c_ushort,
                                            __pad2: c_ushort,
                                            __unused1: c_ulong,
                                            __unused2: c_ulong,
                                        }

                                        pub struct stat64
                                        {
                                            pub st_dev: dev_t,
                                            #[cfg(not(gnu_time_bits64))]
                                            __pad1: c_uint,
                                            #[cfg(not(gnu_time_bits64))]
                                            __st_ino: c_ulong,
                                            #[cfg(gnu_time_bits64)]
                                            pub st_ino: ino_t,
                                            pub st_mode: mode_t,
                                            pub st_nlink: nlink_t,
                                            pub st_uid: uid_t,
                                            pub st_gid: gid_t,
                                            pub st_rdev: dev_t,
                                            #[cfg(not(gnu_time_bits64))]
                                            __pad2: c_uint,
                                            pub st_size: off64_t,
                                            pub st_blksize: blksize_t,
                                            pub st_blocks: blkcnt64_t,
                                            pub st_atime: time_t,
                                            pub st_atime_nsec: c_long,
                                            #[cfg(gnu_time_bits64)]
                                            _atime_pad: c_int,
                                            pub st_mtime: time_t,
                                            pub st_mtime_nsec: c_long,
                                            #[cfg(gnu_time_bits64)]
                                            _mtime_pad: c_int,
                                            pub st_ctime: time_t,
                                            pub st_ctime_nsec: c_long,
                                            #[cfg(gnu_time_bits64)]
                                            _ctime_pad: c_int,
                                            #[cfg(not(gnu_time_bits64))]
                                            pub st_ino: ino64_t,
                                        }

                                        pub struct statfs64
                                        {
                                            pub f_type: __fsword_t,
                                            pub f_bsize: __fsword_t,
                                            pub f_blocks: u64,
                                            pub f_bfree: u64,
                                            pub f_bavail: u64,
                                            pub f_files: u64,
                                            pub f_ffree: u64,
                                            pub f_fsid: fsid_t,
                                            pub f_namelen: __fsword_t,
                                            pub f_frsize: __fsword_t,
                                            pub f_flags: __fsword_t,
                                            pub f_spare: [crate::__fsword_t; 4],
                                        }

                                        pub struct statvfs64
                                        {
                                            pub f_bsize: c_ulong,
                                            pub f_frsize: c_ulong,
                                            pub f_blocks: u64,
                                            pub f_bfree: u64,
                                            pub f_bavail: u64,
                                            pub f_files: u64,
                                            pub f_ffree: u64,
                                            pub f_favail: u64,
                                            pub f_fsid: c_ulong,
                                            __f_unused: c_int,
                                            pub f_flag: c_ulong,
                                            pub f_namemax: c_ulong,
                                            __f_spare: [c_int; 6],
                                        }

                                        pub struct shmid_ds
                                        {
                                            pub shm_perm: ipc_perm,
                                            pub shm_segsz: size_t,
                                            pub shm_atime: time_t,
                                            #[cfg(not(gnu_time_bits64))]
                                            __unused1: c_ulong,
                                            pub shm_dtime: time_t,
                                            #[cfg(not(gnu_time_bits64))]
                                            __unused2: c_ulong,
                                            pub shm_ctime: time_t,
                                            #[cfg(not(gnu_time_bits64))]
                                            __unused3: c_ulong,
                                            pub shm_cpid: pid_t,
                                            pub shm_lpid: pid_t,
                                            pub shm_nattch: shmatt_t,
                                            __unused4: c_ulong,
                                            __unused5: c_ulong,
                                        }

                                        pub struct msqid_ds
                                        {
                                            pub msg_perm: ipc_perm,
                                            pub msg_stime: time_t,
                                            #[cfg(not(gnu_time_bits64))]
                                            __glibc_reserved1: c_ulong,
                                            pub msg_rtime: time_t,
                                            #[cfg(not(gnu_time_bits64))]
                                            __glibc_reserved2: c_ulong,
                                            pub msg_ctime: time_t,
                                            #[cfg(not(gnu_time_bits64))]
                                            __glibc_reserved3: c_ulong,
                                            pub __msg_cbytes: c_ulong,
                                            pub msg_qnum: msgqnum_t,
                                            pub msg_qbytes: msglen_t,
                                            pub msg_lspid: pid_t,
                                            pub msg_lrpid: pid_t,
                                            __glibc_reserved4: c_ulong,
                                            __glibc_reserved5: c_ulong,
                                        }

                                        pub struct siginfo_t
                                        {
                                            pub si_signo: c_int,
                                            pub si_errno: c_int,
                                            pub si_code: c_int,
                                                                    #[deprecated(
                                                since = "0.2.54",
                                                note = "Please leave a comment on \
                                                    https://github.com/rust-lang/libc/pull/1316 if you're using \
                                                    this field"
                                            )]
                                            pub _pad: [c_int; 29],
                                            _align: [usize; 0],
                                        }

                                        pub struct stack_t
                                        {
                                            pub ss_sp: *mut c_void,
                                            pub ss_flags: c_int,
                                            pub ss_size: size_t,
                                        }
                                    }

                                    s_no_extra_traits!
                                    {
                                        pub struct user_fpxregs_struct
                                        {
                                            pub cwd: c_ushort,
                                            pub swd: c_ushort,
                                            pub twd: c_ushort,
                                            pub fop: c_ushort,
                                            pub fip: c_long,
                                            pub fcs: c_long,
                                            pub foo: c_long,
                                            pub fos: c_long,
                                            pub mxcsr: c_long,
                                            __reserved: c_long,
                                            pub st_space: [c_long; 32],
                                            pub xmm_space: [c_long; 32],
                                            padding: [c_long; 56],
                                        }

                                        pub struct ucontext_t
                                        {
                                            pub uc_flags: c_ulong,
                                            pub uc_link: *mut ucontext_t,
                                            pub uc_stack: stack_t,
                                            pub uc_mcontext: mcontext_t,
                                            pub uc_sigmask: sigset_t,
                                            __private: [u8; 112],
                                            __ssp: [c_ulong; 4],
                                        }

                                        #[repr(align(16))]
                                        pub struct max_align_t
                                        {
                                            priv_: [f64; 6],
                                        }
                                    }

                                    impl PartialEq for user_fpxregs_struct
                                    {
                                        fn eq(&self, other: &user_fpxregs_struct) -> bool
                                        {
                                            self.cwd == other.cwd
                                            && self.swd == other.swd
                                            && self.twd == other.twd
                                            && self.fop == other.fop
                                            && self.fip == other.fip
                                            && self.fcs == other.fcs
                                            && self.foo == other.foo
                                            && self.fos == other.fos
                                            && self.mxcsr == other.mxcsr
                                            && self.st_space == other.st_space
                                            && self.xmm_space == other.xmm_space
                                        }
                                    }

                                    impl Eq for user_fpxregs_struct {}

                                    impl ::hash::Hash for user_fpxregs_struct
                                    {
                                        fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                                        {
                                            self.cwd.hash(state);
                                            self.swd.hash(state);
                                            self.twd.hash(state);
                                            self.fop.hash(state);
                                            self.fip.hash(state);
                                            self.fcs.hash(state);
                                            self.foo.hash(state);
                                            self.fos.hash(state);
                                            self.mxcsr.hash(state);
                                            self.st_space.hash(state);
                                            self.xmm_space.hash(state);
                                        }
                                    }

                                    impl PartialEq for ucontext_t
                                    {
                                        fn eq(&self, other: &ucontext_t) -> bool
                                        {
                                            self.uc_flags == other.uc_flags
                                            && self.uc_link == other.uc_link
                                            && self.uc_stack == other.uc_stack
                                            && self.uc_mcontext == other.uc_mcontext
                                            && self.uc_sigmask == other.uc_sigmask
                                        }
                                    }

                                    impl Eq for ucontext_t {}

                                    impl ::hash::Hash for ucontext_t
                                    {
                                        fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                                        {
                                            self.uc_flags.hash(state);
                                            self.uc_link.hash(state);
                                            self.uc_stack.hash(state);
                                            self.uc_mcontext.hash(state);
                                            self.uc_sigmask.hash(state);
                                        }
                                    }

                                    pub const VEOF: usize = 4;
                                    pub const RTLD_DEEPBIND: c_int = 0x8;
                                    pub const RTLD_GLOBAL: c_int = 0x100;
                                    pub const RTLD_NOLOAD: c_int = 0x4;
                                    pub const O_DIRECT: c_int = 0x4000;
                                    pub const O_DIRECTORY: c_int = 0x10000;
                                    pub const O_NOFOLLOW: c_int = 0x20000;
                                    pub const O_LARGEFILE: c_int = 0o0100000;
                                    pub const O_APPEND: c_int = 1024;
                                    pub const O_CREAT: c_int = 64;
                                    pub const O_EXCL: c_int = 128;
                                    pub const O_NOCTTY: c_int = 256;
                                    pub const O_NONBLOCK: c_int = 2048;
                                    pub const O_SYNC: c_int = 1052672;
                                    pub const O_RSYNC: c_int = 1052672;
                                    pub const O_DSYNC: c_int = 4096;
                                    pub const O_FSYNC: c_int = 0x101000;
                                    pub const O_ASYNC: c_int = 0x2000;
                                    pub const O_NDELAY: c_int = 0x800;

                                    pub const MADV_SOFT_OFFLINE: c_int = 101;
                                    pub const MAP_LOCKED: c_int = 0x02000;
                                    pub const MAP_NORESERVE: c_int = 0x04000;
                                    pub const MAP_32BIT: c_int = 0x0040;
                                    pub const MAP_ANON: c_int = 0x0020;
                                    pub const MAP_ANONYMOUS: c_int = 0x0020;
                                    pub const MAP_DENYWRITE: c_int = 0x0800;
                                    pub const MAP_EXECUTABLE: c_int = 0x01000;
                                    pub const MAP_POPULATE: c_int = 0x08000;
                                    pub const MAP_NONBLOCK: c_int = 0x010000;
                                    pub const MAP_STACK: c_int = 0x020000;
                                    pub const MAP_HUGETLB: c_int = 0x040000;
                                    pub const MAP_GROWSDOWN: c_int = 0x0100;
                                    pub const MAP_SYNC: c_int = 0x080000;

                                    pub const EDEADLOCK: c_int = 35;
                                    pub const EUCLEAN: c_int = 117;
                                    pub const ENOTNAM: c_int = 118;
                                    pub const ENAVAIL: c_int = 119;
                                    pub const EISNAM: c_int = 120;
                                    pub const EREMOTEIO: c_int = 121;
                                    pub const EDEADLK: c_int = 35;
                                    pub const ENAMETOOLONG: c_int = 36;
                                    pub const ENOLCK: c_int = 37;
                                    pub const ENOSYS: c_int = 38;
                                    pub const ENOTEMPTY: c_int = 39;
                                    pub const ELOOP: c_int = 40;
                                    pub const ENOMSG: c_int = 42;
                                    pub const EIDRM: c_int = 43;
                                    pub const ECHRNG: c_int = 44;
                                    pub const EL2NSYNC: c_int = 45;
                                    pub const EL3HLT: c_int = 46;
                                    pub const EL3RST: c_int = 47;
                                    pub const ELNRNG: c_int = 48;
                                    pub const EUNATCH: c_int = 49;
                                    pub const ENOCSI: c_int = 50;
                                    pub const EL2HLT: c_int = 51;
                                    pub const EBADE: c_int = 52;
                                    pub const EBADR: c_int = 53;
                                    pub const EXFULL: c_int = 54;
                                    pub const ENOANO: c_int = 55;
                                    pub const EBADRQC: c_int = 56;
                                    pub const EBADSLT: c_int = 57;
                                    pub const EMULTIHOP: c_int = 72;
                                    pub const EOVERFLOW: c_int = 75;
                                    pub const ENOTUNIQ: c_int = 76;
                                    pub const EBADFD: c_int = 77;
                                    pub const EBADMSG: c_int = 74;
                                    pub const EREMCHG: c_int = 78;
                                    pub const ELIBACC: c_int = 79;
                                    pub const ELIBBAD: c_int = 80;
                                    pub const ELIBSCN: c_int = 81;
                                    pub const ELIBMAX: c_int = 82;
                                    pub const ELIBEXEC: c_int = 83;
                                    pub const EILSEQ: c_int = 84;
                                    pub const ERESTART: c_int = 85;
                                    pub const ESTRPIPE: c_int = 86;
                                    pub const EUSERS: c_int = 87;
                                    pub const ENOTSOCK: c_int = 88;
                                    pub const EDESTADDRREQ: c_int = 89;
                                    pub const EMSGSIZE: c_int = 90;
                                    pub const EPROTOTYPE: c_int = 91;
                                    pub const ENOPROTOOPT: c_int = 92;
                                    pub const EPROTONOSUPPORT: c_int = 93;
                                    pub const ESOCKTNOSUPPORT: c_int = 94;
                                    pub const EOPNOTSUPP: c_int = 95;
                                    pub const EPFNOSUPPORT: c_int = 96;
                                    pub const EAFNOSUPPORT: c_int = 97;
                                    pub const EADDRINUSE: c_int = 98;
                                    pub const EADDRNOTAVAIL: c_int = 99;
                                    pub const ENETDOWN: c_int = 100;
                                    pub const ENETUNREACH: c_int = 101;
                                    pub const ENETRESET: c_int = 102;
                                    pub const ECONNABORTED: c_int = 103;
                                    pub const ECONNRESET: c_int = 104;
                                    pub const ENOBUFS: c_int = 105;
                                    pub const EISCONN: c_int = 106;
                                    pub const ENOTCONN: c_int = 107;
                                    pub const ESHUTDOWN: c_int = 108;
                                    pub const ETOOMANYREFS: c_int = 109;
                                    pub const ETIMEDOUT: c_int = 110;
                                    pub const ECONNREFUSED: c_int = 111;
                                    pub const EHOSTDOWN: c_int = 112;
                                    pub const EHOSTUNREACH: c_int = 113;
                                    pub const EALREADY: c_int = 114;
                                    pub const EINPROGRESS: c_int = 115;
                                    pub const ESTALE: c_int = 116;
                                    pub const EDQUOT: c_int = 122;
                                    pub const ENOMEDIUM: c_int = 123;
                                    pub const EMEDIUMTYPE: c_int = 124;
                                    pub const ECANCELED: c_int = 125;
                                    pub const ENOKEY: c_int = 126;
                                    pub const EKEYEXPIRED: c_int = 127;
                                    pub const EKEYREVOKED: c_int = 128;
                                    pub const EKEYREJECTED: c_int = 129;
                                    pub const EOWNERDEAD: c_int = 130;
                                    pub const ENOTRECOVERABLE: c_int = 131;
                                    pub const EHWPOISON: c_int = 133;
                                    pub const ERFKILL: c_int = 132;

                                    pub const SA_SIGINFO: c_int = 0x00000004;
                                    pub const SA_NOCLDWAIT: c_int = 0x00000002;

                                    pub const SOCK_STREAM: c_int = 1;
                                    pub const SOCK_DGRAM: c_int = 2;

                                    cfg_if!
                                    {
                                        if #[cfg(gnu_file_offset_bits64)] { pub const F_GETLK: c_int = 12; }
                                        else { pub const F_GETLK: c_int = 5; }
                                    }

                                    pub const F_GETOWN: c_int = 9;
                                    pub const F_SETOWN: c_int = 8;

                                    pub const PTRACE_GETFPXREGS: c_uint = 18;
                                    pub const PTRACE_SETFPXREGS: c_uint = 19;
                                    pub const PTRACE_SYSEMU: c_uint = 31;
                                    pub const PTRACE_SYSEMU_SINGLESTEP: c_uint = 32;

                                    pub const MCL_CURRENT: c_int = 0x0001;
                                    pub const MCL_FUTURE: c_int = 0x0002;
                                    pub const MCL_ONFAULT: c_int = 0x0004;

                                    pub const POLLWRNORM: c_short = 0x100;
                                    pub const POLLWRBAND: c_short = 0x200;

                                    pub const EFD_NONBLOCK: c_int = 0x800;
                                    pub const SFD_NONBLOCK: c_int = 0x0800;

                                    pub const SIGCHLD: c_int = 17;
                                    pub const SIGBUS: c_int = 7;
                                    pub const SIGUSR1: c_int = 10;
                                    pub const SIGUSR2: c_int = 12;
                                    pub const SIGCONT: c_int = 18;
                                    pub const SIGSTOP: c_int = 19;
                                    pub const SIGTSTP: c_int = 20;
                                    pub const SIGURG: c_int = 23;
                                    pub const SIGIO: c_int = 29;
                                    pub const SIGSYS: c_int = 31;
                                    pub const SIGSTKFLT: c_int = 16;
                                    #[deprecated(since = "0.2.55", note = "Use SIGSYS instead")]
                                    pub const SIGUNUSED: c_int = 31;
                                    pub const SIGPOLL: c_int = 29;
                                    pub const SIGPWR: c_int = 30;
                                    pub const SIG_SETMASK: c_int = 2;
                                    pub const SIG_BLOCK: c_int = 0x000000;
                                    pub const SIG_UNBLOCK: c_int = 0x01;
                                    pub const SIGTTIN: c_int = 21;
                                    pub const SIGTTOU: c_int = 22;
                                    pub const SIGXCPU: c_int = 24;
                                    pub const SIGXFSZ: c_int = 25;
                                    pub const SIGVTALRM: c_int = 26;
                                    pub const SIGPROF: c_int = 27;
                                    pub const SIGWINCH: c_int = 28;
                                    pub const SIGSTKSZ: size_t = 8192;
                                    pub const MINSIGSTKSZ: size_t = 2048;
                                    pub const CBAUD: tcflag_t = 0o0010017;
                                    pub const TAB1: tcflag_t = 0x00000800;
                                    pub const TAB2: tcflag_t = 0x00001000;
                                    pub const TAB3: tcflag_t = 0x00001800;
                                    pub const CR1: tcflag_t = 0x00000200;
                                    pub const CR2: tcflag_t = 0x00000400;
                                    pub const CR3: tcflag_t = 0x00000600;
                                    pub const FF1: tcflag_t = 0x00008000;
                                    pub const BS1: tcflag_t = 0x00002000;
                                    pub const VT1: tcflag_t = 0x00004000;
                                    pub const VWERASE: usize = 14;
                                    pub const VREPRINT: usize = 12;
                                    pub const VSUSP: usize = 10;
                                    pub const VSTART: usize = 8;
                                    pub const VSTOP: usize = 9;
                                    pub const VDISCARD: usize = 13;
                                    pub const VTIME: usize = 5;
                                    pub const IXON: tcflag_t = 0x00000400;
                                    pub const IXOFF: tcflag_t = 0x00001000;
                                    pub const ONLCR: tcflag_t = 0x4;
                                    pub const CSIZE: tcflag_t = 0x00000030;
                                    pub const CS6: tcflag_t = 0x00000010;
                                    pub const CS7: tcflag_t = 0x00000020;
                                    pub const CS8: tcflag_t = 0x00000030;
                                    pub const CSTOPB: tcflag_t = 0x00000040;
                                    pub const CREAD: tcflag_t = 0x00000080;
                                    pub const PARENB: tcflag_t = 0x00000100;
                                    pub const PARODD: tcflag_t = 0x00000200;
                                    pub const HUPCL: tcflag_t = 0x00000400;
                                    pub const CLOCAL: tcflag_t = 0x00000800;
                                    pub const ECHOKE: tcflag_t = 0x00000800;
                                    pub const ECHOE: tcflag_t = 0x00000010;
                                    pub const ECHOK: tcflag_t = 0x00000020;
                                    pub const ECHONL: tcflag_t = 0x00000040;
                                    pub const ECHOPRT: tcflag_t = 0x00000400;
                                    pub const ECHOCTL: tcflag_t = 0x00000200;
                                    pub const ISIG: tcflag_t = 0x00000001;
                                    pub const ICANON: tcflag_t = 0x00000002;
                                    pub const PENDIN: tcflag_t = 0x00004000;
                                    pub const NOFLSH: tcflag_t = 0x00000080;
                                    pub const CIBAUD: tcflag_t = 0o02003600000;
                                    pub const CBAUDEX: tcflag_t = 0o010000;
                                    pub const VSWTC: usize = 7;
                                    pub const OLCUC: tcflag_t = 0o000002;
                                    pub const NLDLY: tcflag_t = 0o000400;
                                    pub const CRDLY: tcflag_t = 0o003000;
                                    pub const TABDLY: tcflag_t = 0o014000;
                                    pub const BSDLY: tcflag_t = 0o020000;
                                    pub const FFDLY: tcflag_t = 0o100000;
                                    pub const VTDLY: tcflag_t = 0o040000;
                                    pub const XTABS: tcflag_t = 0o014000;

                                    pub const B0: speed_t = 0o000000;
                                    pub const B50: speed_t = 0o000001;
                                    pub const B75: speed_t = 0o000002;
                                    pub const B110: speed_t = 0o000003;
                                    pub const B134: speed_t = 0o000004;
                                    pub const B150: speed_t = 0o000005;
                                    pub const B200: speed_t = 0o000006;
                                    pub const B300: speed_t = 0o000007;
                                    pub const B600: speed_t = 0o000010;
                                    pub const B1200: speed_t = 0o000011;
                                    pub const B1800: speed_t = 0o000012;
                                    pub const B2400: speed_t = 0o000013;
                                    pub const B4800: speed_t = 0o000014;
                                    pub const B9600: speed_t = 0o000015;
                                    pub const B19200: speed_t = 0o000016;
                                    pub const B38400: speed_t = 0o000017;
                                    pub const EXTA: speed_t = B19200;
                                    pub const EXTB: speed_t = B38400;
                                    pub const B57600: speed_t = 0o010001;
                                    pub const B115200: speed_t = 0o010002;
                                    pub const B230400: speed_t = 0o010003;
                                    pub const B460800: speed_t = 0o010004;
                                    pub const B500000: speed_t = 0o010005;
                                    pub const B576000: speed_t = 0o010006;
                                    pub const B921600: speed_t = 0o010007;
                                    pub const B1000000: speed_t = 0o010010;
                                    pub const B1152000: speed_t = 0o010011;
                                    pub const B1500000: speed_t = 0o010012;
                                    pub const B2000000: speed_t = 0o010013;
                                    pub const B2500000: speed_t = 0o010014;
                                    pub const B3000000: speed_t = 0o010015;
                                    pub const B3500000: speed_t = 0o010016;
                                    pub const B4000000: speed_t = 0o010017;

                                    pub const VEOL: usize = 11;
                                    pub const VEOL2: usize = 16;
                                    pub const VMIN: usize = 6;
                                    pub const IEXTEN: tcflag_t = 0x00008000;
                                    pub const TOSTOP: tcflag_t = 0x00000100;
                                    pub const FLUSHO: tcflag_t = 0x00001000;
                                    pub const EXTPROC: tcflag_t = 0x00010000;

                                    pub const TCSANOW: c_int = 0;
                                    pub const TCSADRAIN: c_int = 1;
                                    pub const TCSAFLUSH: c_int = 2;
                                    
                                    pub const SYS_restart_syscall: c_long = 0;
                                    pub const SYS_exit: c_long = 1;
                                    pub const SYS_fork: c_long = 2;
                                    pub const SYS_read: c_long = 3;
                                    pub const SYS_write: c_long = 4;
                                    pub const SYS_open: c_long = 5;
                                    pub const SYS_close: c_long = 6;
                                    pub const SYS_waitpid: c_long = 7;
                                    pub const SYS_creat: c_long = 8;
                                    pub const SYS_link: c_long = 9;
                                    pub const SYS_unlink: c_long = 10;
                                    pub const SYS_execve: c_long = 11;
                                    pub const SYS_chdir: c_long = 12;
                                    pub const SYS_time: c_long = 13;
                                    pub const SYS_mknod: c_long = 14;
                                    pub const SYS_chmod: c_long = 15;
                                    pub const SYS_lchown: c_long = 16;
                                    pub const SYS_break: c_long = 17;
                                    pub const SYS_oldstat: c_long = 18;
                                    pub const SYS_lseek: c_long = 19;
                                    pub const SYS_getpid: c_long = 20;
                                    pub const SYS_mount: c_long = 21;
                                    pub const SYS_umount: c_long = 22;
                                    pub const SYS_setuid: c_long = 23;
                                    pub const SYS_getuid: c_long = 24;
                                    pub const SYS_stime: c_long = 25;
                                    pub const SYS_ptrace: c_long = 26;
                                    pub const SYS_alarm: c_long = 27;
                                    pub const SYS_oldfstat: c_long = 28;
                                    pub const SYS_pause: c_long = 29;
                                    pub const SYS_utime: c_long = 30;
                                    pub const SYS_stty: c_long = 31;
                                    pub const SYS_gtty: c_long = 32;
                                    pub const SYS_access: c_long = 33;
                                    pub const SYS_nice: c_long = 34;
                                    pub const SYS_ftime: c_long = 35;
                                    pub const SYS_sync: c_long = 36;
                                    pub const SYS_kill: c_long = 37;
                                    pub const SYS_rename: c_long = 38;
                                    pub const SYS_mkdir: c_long = 39;
                                    pub const SYS_rmdir: c_long = 40;
                                    pub const SYS_dup: c_long = 41;
                                    pub const SYS_pipe: c_long = 42;
                                    pub const SYS_times: c_long = 43;
                                    pub const SYS_prof: c_long = 44;
                                    pub const SYS_brk: c_long = 45;
                                    pub const SYS_setgid: c_long = 46;
                                    pub const SYS_getgid: c_long = 47;
                                    pub const SYS_signal: c_long = 48;
                                    pub const SYS_geteuid: c_long = 49;
                                    pub const SYS_getegid: c_long = 50;
                                    pub const SYS_acct: c_long = 51;
                                    pub const SYS_umount2: c_long = 52;
                                    pub const SYS_lock: c_long = 53;
                                    pub const SYS_ioctl: c_long = 54;
                                    pub const SYS_fcntl: c_long = 55;
                                    pub const SYS_mpx: c_long = 56;
                                    pub const SYS_setpgid: c_long = 57;
                                    pub const SYS_ulimit: c_long = 58;
                                    pub const SYS_oldolduname: c_long = 59;
                                    pub const SYS_umask: c_long = 60;
                                    pub const SYS_chroot: c_long = 61;
                                    pub const SYS_ustat: c_long = 62;
                                    pub const SYS_dup2: c_long = 63;
                                    pub const SYS_getppid: c_long = 64;
                                    pub const SYS_getpgrp: c_long = 65;
                                    pub const SYS_setsid: c_long = 66;
                                    pub const SYS_sigaction: c_long = 67;
                                    pub const SYS_sgetmask: c_long = 68;
                                    pub const SYS_ssetmask: c_long = 69;
                                    pub const SYS_setreuid: c_long = 70;
                                    pub const SYS_setregid: c_long = 71;
                                    pub const SYS_sigsuspend: c_long = 72;
                                    pub const SYS_sigpending: c_long = 73;
                                    pub const SYS_sethostname: c_long = 74;
                                    pub const SYS_setrlimit: c_long = 75;
                                    pub const SYS_getrlimit: c_long = 76;
                                    pub const SYS_getrusage: c_long = 77;
                                    pub const SYS_gettimeofday: c_long = 78;
                                    pub const SYS_settimeofday: c_long = 79;
                                    pub const SYS_getgroups: c_long = 80;
                                    pub const SYS_setgroups: c_long = 81;
                                    pub const SYS_select: c_long = 82;
                                    pub const SYS_symlink: c_long = 83;
                                    pub const SYS_oldlstat: c_long = 84;
                                    pub const SYS_readlink: c_long = 85;
                                    pub const SYS_uselib: c_long = 86;
                                    pub const SYS_swapon: c_long = 87;
                                    pub const SYS_reboot: c_long = 88;
                                    pub const SYS_readdir: c_long = 89;
                                    pub const SYS_mmap: c_long = 90;
                                    pub const SYS_munmap: c_long = 91;
                                    pub const SYS_truncate: c_long = 92;
                                    pub const SYS_ftruncate: c_long = 93;
                                    pub const SYS_fchmod: c_long = 94;
                                    pub const SYS_fchown: c_long = 95;
                                    pub const SYS_getpriority: c_long = 96;
                                    pub const SYS_setpriority: c_long = 97;
                                    pub const SYS_profil: c_long = 98;
                                    pub const SYS_statfs: c_long = 99;
                                    pub const SYS_fstatfs: c_long = 100;
                                    pub const SYS_ioperm: c_long = 101;
                                    pub const SYS_socketcall: c_long = 102;
                                    pub const SYS_syslog: c_long = 103;
                                    pub const SYS_setitimer: c_long = 104;
                                    pub const SYS_getitimer: c_long = 105;
                                    pub const SYS_stat: c_long = 106;
                                    pub const SYS_lstat: c_long = 107;
                                    pub const SYS_fstat: c_long = 108;
                                    pub const SYS_olduname: c_long = 109;
                                    pub const SYS_iopl: c_long = 110;
                                    pub const SYS_vhangup: c_long = 111;
                                    pub const SYS_idle: c_long = 112;
                                    pub const SYS_vm86old: c_long = 113;
                                    pub const SYS_wait4: c_long = 114;
                                    pub const SYS_swapoff: c_long = 115;
                                    pub const SYS_sysinfo: c_long = 116;
                                    pub const SYS_ipc: c_long = 117;
                                    pub const SYS_fsync: c_long = 118;
                                    pub const SYS_sigreturn: c_long = 119;
                                    pub const SYS_clone: c_long = 120;
                                    pub const SYS_setdomainname: c_long = 121;
                                    pub const SYS_uname: c_long = 122;
                                    pub const SYS_modify_ldt: c_long = 123;
                                    pub const SYS_adjtimex: c_long = 124;
                                    pub const SYS_mprotect: c_long = 125;
                                    pub const SYS_sigprocmask: c_long = 126;
                                    #[deprecated(since = "0.2.70", note = "Functional up to 2.6 kernel")]
                                    pub const SYS_create_module: c_long = 127;
                                    pub const SYS_init_module: c_long = 128;
                                    pub const SYS_delete_module: c_long = 129;
                                    #[deprecated(since = "0.2.70", note = "Functional up to 2.6 kernel")]
                                    pub const SYS_get_kernel_syms: c_long = 130;
                                    pub const SYS_quotactl: c_long = 131;
                                    pub const SYS_getpgid: c_long = 132;
                                    pub const SYS_fchdir: c_long = 133;
                                    pub const SYS_bdflush: c_long = 134;
                                    pub const SYS_sysfs: c_long = 135;
                                    pub const SYS_personality: c_long = 136;
                                    pub const SYS_afs_syscall: c_long = 137;
                                    pub const SYS_setfsuid: c_long = 138;
                                    pub const SYS_setfsgid: c_long = 139;
                                    pub const SYS__llseek: c_long = 140;
                                    pub const SYS_getdents: c_long = 141;
                                    pub const SYS__newselect: c_long = 142;
                                    pub const SYS_flock: c_long = 143;
                                    pub const SYS_msync: c_long = 144;
                                    pub const SYS_readv: c_long = 145;
                                    pub const SYS_writev: c_long = 146;
                                    pub const SYS_getsid: c_long = 147;
                                    pub const SYS_fdatasync: c_long = 148;
                                    pub const SYS__sysctl: c_long = 149;
                                    pub const SYS_mlock: c_long = 150;
                                    pub const SYS_munlock: c_long = 151;
                                    pub const SYS_mlockall: c_long = 152;
                                    pub const SYS_munlockall: c_long = 153;
                                    pub const SYS_sched_setparam: c_long = 154;
                                    pub const SYS_sched_getparam: c_long = 155;
                                    pub const SYS_sched_setscheduler: c_long = 156;
                                    pub const SYS_sched_getscheduler: c_long = 157;
                                    pub const SYS_sched_yield: c_long = 158;
                                    pub const SYS_sched_get_priority_max: c_long = 159;
                                    pub const SYS_sched_get_priority_min: c_long = 160;
                                    pub const SYS_sched_rr_get_interval: c_long = 161;
                                    pub const SYS_nanosleep: c_long = 162;
                                    pub const SYS_mremap: c_long = 163;
                                    pub const SYS_setresuid: c_long = 164;
                                    pub const SYS_getresuid: c_long = 165;
                                    pub const SYS_vm86: c_long = 166;
                                    #[deprecated(since = "0.2.70", note = "Functional up to 2.6 kernel")]
                                    pub const SYS_query_module: c_long = 167;
                                    pub const SYS_poll: c_long = 168;
                                    pub const SYS_nfsservctl: c_long = 169;
                                    pub const SYS_setresgid: c_long = 170;
                                    pub const SYS_getresgid: c_long = 171;
                                    pub const SYS_prctl: c_long = 172;
                                    pub const SYS_rt_sigreturn: c_long = 173;
                                    pub const SYS_rt_sigaction: c_long = 174;
                                    pub const SYS_rt_sigprocmask: c_long = 175;
                                    pub const SYS_rt_sigpending: c_long = 176;
                                    pub const SYS_rt_sigtimedwait: c_long = 177;
                                    pub const SYS_rt_sigqueueinfo: c_long = 178;
                                    pub const SYS_rt_sigsuspend: c_long = 179;
                                    pub const SYS_pread64: c_long = 180;
                                    pub const SYS_pwrite64: c_long = 181;
                                    pub const SYS_chown: c_long = 182;
                                    pub const SYS_getcwd: c_long = 183;
                                    pub const SYS_capget: c_long = 184;
                                    pub const SYS_capset: c_long = 185;
                                    pub const SYS_sigaltstack: c_long = 186;
                                    pub const SYS_sendfile: c_long = 187;
                                    pub const SYS_getpmsg: c_long = 188;
                                    pub const SYS_putpmsg: c_long = 189;
                                    pub const SYS_vfork: c_long = 190;
                                    pub const SYS_ugetrlimit: c_long = 191;
                                    pub const SYS_mmap2: c_long = 192;
                                    pub const SYS_truncate64: c_long = 193;
                                    pub const SYS_ftruncate64: c_long = 194;
                                    pub const SYS_stat64: c_long = 195;
                                    pub const SYS_lstat64: c_long = 196;
                                    pub const SYS_fstat64: c_long = 197;
                                    pub const SYS_lchown32: c_long = 198;
                                    pub const SYS_getuid32: c_long = 199;
                                    pub const SYS_getgid32: c_long = 200;
                                    pub const SYS_geteuid32: c_long = 201;
                                    pub const SYS_getegid32: c_long = 202;
                                    pub const SYS_setreuid32: c_long = 203;
                                    pub const SYS_setregid32: c_long = 204;
                                    pub const SYS_getgroups32: c_long = 205;
                                    pub const SYS_setgroups32: c_long = 206;
                                    pub const SYS_fchown32: c_long = 207;
                                    pub const SYS_setresuid32: c_long = 208;
                                    pub const SYS_getresuid32: c_long = 209;
                                    pub const SYS_setresgid32: c_long = 210;
                                    pub const SYS_getresgid32: c_long = 211;
                                    pub const SYS_chown32: c_long = 212;
                                    pub const SYS_setuid32: c_long = 213;
                                    pub const SYS_setgid32: c_long = 214;
                                    pub const SYS_setfsuid32: c_long = 215;
                                    pub const SYS_setfsgid32: c_long = 216;
                                    pub const SYS_pivot_root: c_long = 217;
                                    pub const SYS_mincore: c_long = 218;
                                    pub const SYS_madvise: c_long = 219;
                                    pub const SYS_getdents64: c_long = 220;
                                    pub const SYS_fcntl64: c_long = 221;
                                    pub const SYS_gettid: c_long = 224;
                                    pub const SYS_readahead: c_long = 225;
                                    pub const SYS_setxattr: c_long = 226;
                                    pub const SYS_lsetxattr: c_long = 227;
                                    pub const SYS_fsetxattr: c_long = 228;
                                    pub const SYS_getxattr: c_long = 229;
                                    pub const SYS_lgetxattr: c_long = 230;
                                    pub const SYS_fgetxattr: c_long = 231;
                                    pub const SYS_listxattr: c_long = 232;
                                    pub const SYS_llistxattr: c_long = 233;
                                    pub const SYS_flistxattr: c_long = 234;
                                    pub const SYS_removexattr: c_long = 235;
                                    pub const SYS_lremovexattr: c_long = 236;
                                    pub const SYS_fremovexattr: c_long = 237;
                                    pub const SYS_tkill: c_long = 238;
                                    pub const SYS_sendfile64: c_long = 239;
                                    pub const SYS_futex: c_long = 240;
                                    pub const SYS_sched_setaffinity: c_long = 241;
                                    pub const SYS_sched_getaffinity: c_long = 242;
                                    pub const SYS_set_thread_area: c_long = 243;
                                    pub const SYS_get_thread_area: c_long = 244;
                                    pub const SYS_io_setup: c_long = 245;
                                    pub const SYS_io_destroy: c_long = 246;
                                    pub const SYS_io_getevents: c_long = 247;
                                    pub const SYS_io_submit: c_long = 248;
                                    pub const SYS_io_cancel: c_long = 249;
                                    pub const SYS_fadvise64: c_long = 250;
                                    pub const SYS_exit_group: c_long = 252;
                                    pub const SYS_lookup_dcookie: c_long = 253;
                                    pub const SYS_epoll_create: c_long = 254;
                                    pub const SYS_epoll_ctl: c_long = 255;
                                    pub const SYS_epoll_wait: c_long = 256;
                                    pub const SYS_remap_file_pages: c_long = 257;
                                    pub const SYS_set_tid_address: c_long = 258;
                                    pub const SYS_timer_create: c_long = 259;
                                    pub const SYS_timer_settime: c_long = 260;
                                    pub const SYS_timer_gettime: c_long = 261;
                                    pub const SYS_timer_getoverrun: c_long = 262;
                                    pub const SYS_timer_delete: c_long = 263;
                                    pub const SYS_clock_settime: c_long = 264;
                                    pub const SYS_clock_gettime: c_long = 265;
                                    pub const SYS_clock_getres: c_long = 266;
                                    pub const SYS_clock_nanosleep: c_long = 267;
                                    pub const SYS_statfs64: c_long = 268;
                                    pub const SYS_fstatfs64: c_long = 269;
                                    pub const SYS_tgkill: c_long = 270;
                                    pub const SYS_utimes: c_long = 271;
                                    pub const SYS_fadvise64_64: c_long = 272;
                                    pub const SYS_vserver: c_long = 273;
                                    pub const SYS_mbind: c_long = 274;
                                    pub const SYS_get_mempolicy: c_long = 275;
                                    pub const SYS_set_mempolicy: c_long = 276;
                                    pub const SYS_mq_open: c_long = 277;
                                    pub const SYS_mq_unlink: c_long = 278;
                                    pub const SYS_mq_timedsend: c_long = 279;
                                    pub const SYS_mq_timedreceive: c_long = 280;
                                    pub const SYS_mq_notify: c_long = 281;
                                    pub const SYS_mq_getsetattr: c_long = 282;
                                    pub const SYS_kexec_load: c_long = 283;
                                    pub const SYS_waitid: c_long = 284;
                                    pub const SYS_add_key: c_long = 286;
                                    pub const SYS_request_key: c_long = 287;
                                    pub const SYS_keyctl: c_long = 288;
                                    pub const SYS_ioprio_set: c_long = 289;
                                    pub const SYS_ioprio_get: c_long = 290;
                                    pub const SYS_inotify_init: c_long = 291;
                                    pub const SYS_inotify_add_watch: c_long = 292;
                                    pub const SYS_inotify_rm_watch: c_long = 293;
                                    pub const SYS_migrate_pages: c_long = 294;
                                    pub const SYS_openat: c_long = 295;
                                    pub const SYS_mkdirat: c_long = 296;
                                    pub const SYS_mknodat: c_long = 297;
                                    pub const SYS_fchownat: c_long = 298;
                                    pub const SYS_futimesat: c_long = 299;
                                    pub const SYS_fstatat64: c_long = 300;
                                    pub const SYS_unlinkat: c_long = 301;
                                    pub const SYS_renameat: c_long = 302;
                                    pub const SYS_linkat: c_long = 303;
                                    pub const SYS_symlinkat: c_long = 304;
                                    pub const SYS_readlinkat: c_long = 305;
                                    pub const SYS_fchmodat: c_long = 306;
                                    pub const SYS_faccessat: c_long = 307;
                                    pub const SYS_pselect6: c_long = 308;
                                    pub const SYS_ppoll: c_long = 309;
                                    pub const SYS_unshare: c_long = 310;
                                    pub const SYS_set_robust_list: c_long = 311;
                                    pub const SYS_get_robust_list: c_long = 312;
                                    pub const SYS_splice: c_long = 313;
                                    pub const SYS_sync_file_range: c_long = 314;
                                    pub const SYS_tee: c_long = 315;
                                    pub const SYS_vmsplice: c_long = 316;
                                    pub const SYS_move_pages: c_long = 317;
                                    pub const SYS_getcpu: c_long = 318;
                                    pub const SYS_epoll_pwait: c_long = 319;
                                    pub const SYS_utimensat: c_long = 320;
                                    pub const SYS_signalfd: c_long = 321;
                                    pub const SYS_timerfd_create: c_long = 322;
                                    pub const SYS_eventfd: c_long = 323;
                                    pub const SYS_fallocate: c_long = 324;
                                    pub const SYS_timerfd_settime: c_long = 325;
                                    pub const SYS_timerfd_gettime: c_long = 326;
                                    pub const SYS_signalfd4: c_long = 327;
                                    pub const SYS_eventfd2: c_long = 328;
                                    pub const SYS_epoll_create1: c_long = 329;
                                    pub const SYS_dup3: c_long = 330;
                                    pub const SYS_pipe2: c_long = 331;
                                    pub const SYS_inotify_init1: c_long = 332;
                                    pub const SYS_preadv: c_long = 333;
                                    pub const SYS_pwritev: c_long = 334;
                                    pub const SYS_rt_tgsigqueueinfo: c_long = 335;
                                    pub const SYS_perf_event_open: c_long = 336;
                                    pub const SYS_recvmmsg: c_long = 337;
                                    pub const SYS_fanotify_init: c_long = 338;
                                    pub const SYS_fanotify_mark: c_long = 339;
                                    pub const SYS_prlimit64: c_long = 340;
                                    pub const SYS_name_to_handle_at: c_long = 341;
                                    pub const SYS_open_by_handle_at: c_long = 342;
                                    pub const SYS_clock_adjtime: c_long = 343;
                                    pub const SYS_syncfs: c_long = 344;
                                    pub const SYS_sendmmsg: c_long = 345;
                                    pub const SYS_setns: c_long = 346;
                                    pub const SYS_process_vm_readv: c_long = 347;
                                    pub const SYS_process_vm_writev: c_long = 348;
                                    pub const SYS_kcmp: c_long = 349;
                                    pub const SYS_finit_module: c_long = 350;
                                    pub const SYS_sched_setattr: c_long = 351;
                                    pub const SYS_sched_getattr: c_long = 352;
                                    pub const SYS_renameat2: c_long = 353;
                                    pub const SYS_seccomp: c_long = 354;
                                    pub const SYS_getrandom: c_long = 355;
                                    pub const SYS_memfd_create: c_long = 356;
                                    pub const SYS_bpf: c_long = 357;
                                    pub const SYS_execveat: c_long = 358;
                                    pub const SYS_socket: c_long = 359;
                                    pub const SYS_socketpair: c_long = 360;
                                    pub const SYS_bind: c_long = 361;
                                    pub const SYS_connect: c_long = 362;
                                    pub const SYS_listen: c_long = 363;
                                    pub const SYS_accept4: c_long = 364;
                                    pub const SYS_getsockopt: c_long = 365;
                                    pub const SYS_setsockopt: c_long = 366;
                                    pub const SYS_getsockname: c_long = 367;
                                    pub const SYS_getpeername: c_long = 368;
                                    pub const SYS_sendto: c_long = 369;
                                    pub const SYS_sendmsg: c_long = 370;
                                    pub const SYS_recvfrom: c_long = 371;
                                    pub const SYS_recvmsg: c_long = 372;
                                    pub const SYS_shutdown: c_long = 373;
                                    pub const SYS_userfaultfd: c_long = 374;
                                    pub const SYS_membarrier: c_long = 375;
                                    pub const SYS_mlock2: c_long = 376;
                                    pub const SYS_copy_file_range: c_long = 377;
                                    pub const SYS_preadv2: c_long = 378;
                                    pub const SYS_pwritev2: c_long = 379;
                                    pub const SYS_pkey_mprotect: c_long = 380;
                                    pub const SYS_pkey_alloc: c_long = 381;
                                    pub const SYS_pkey_free: c_long = 382;
                                    pub const SYS_statx: c_long = 383;
                                    pub const SYS_rseq: c_long = 386;
                                    pub const SYS_pidfd_send_signal: c_long = 424;
                                    pub const SYS_io_uring_setup: c_long = 425;
                                    pub const SYS_io_uring_enter: c_long = 426;
                                    pub const SYS_io_uring_register: c_long = 427;
                                    pub const SYS_open_tree: c_long = 428;
                                    pub const SYS_move_mount: c_long = 429;
                                    pub const SYS_fsopen: c_long = 430;
                                    pub const SYS_fsconfig: c_long = 431;
                                    pub const SYS_fsmount: c_long = 432;
                                    pub const SYS_fspick: c_long = 433;
                                    pub const SYS_pidfd_open: c_long = 434;
                                    pub const SYS_clone3: c_long = 435;
                                    pub const SYS_close_range: c_long = 436;
                                    pub const SYS_openat2: c_long = 437;
                                    pub const SYS_pidfd_getfd: c_long = 438;
                                    pub const SYS_faccessat2: c_long = 439;
                                    pub const SYS_process_madvise: c_long = 440;
                                    pub const SYS_epoll_pwait2: c_long = 441;
                                    pub const SYS_mount_setattr: c_long = 442;
                                    pub const SYS_quotactl_fd: c_long = 443;
                                    pub const SYS_landlock_create_ruleset: c_long = 444;
                                    pub const SYS_landlock_add_rule: c_long = 445;
                                    pub const SYS_landlock_restrict_self: c_long = 446;
                                    pub const SYS_memfd_secret: c_long = 447;
                                    pub const SYS_process_mrelease: c_long = 448;
                                    pub const SYS_futex_waitv: c_long = 449;
                                    pub const SYS_set_mempolicy_home_node: c_long = 450;
                                    pub const SYS_fchmodat2: c_long = 452;
                                    pub const SYS_mseal: c_long = 462;
                                    
                                    pub const EBX: c_int = 0;
                                    pub const ECX: c_int = 1;
                                    pub const EDX: c_int = 2;
                                    pub const ESI: c_int = 3;
                                    pub const EDI: c_int = 4;
                                    pub const EBP: c_int = 5;
                                    pub const EAX: c_int = 6;
                                    pub const DS: c_int = 7;
                                    pub const ES: c_int = 8;
                                    pub const FS: c_int = 9;
                                    pub const GS: c_int = 10;
                                    pub const ORIG_EAX: c_int = 11;
                                    pub const EIP: c_int = 12;
                                    pub const CS: c_int = 13;
                                    pub const EFL: c_int = 14;
                                    pub const UESP: c_int = 15;
                                    pub const SS: c_int = 16;
                                    
                                    pub const REG_GS: c_int = 0;
                                    pub const REG_FS: c_int = 1;
                                    pub const REG_ES: c_int = 2;
                                    pub const REG_DS: c_int = 3;
                                    pub const REG_EDI: c_int = 4;
                                    pub const REG_ESI: c_int = 5;
                                    pub const REG_EBP: c_int = 6;
                                    pub const REG_ESP: c_int = 7;
                                    pub const REG_EBX: c_int = 8;
                                    pub const REG_EDX: c_int = 9;
                                    pub const REG_ECX: c_int = 10;
                                    pub const REG_EAX: c_int = 11;
                                    pub const REG_TRAPNO: c_int = 12;
                                    pub const REG_ERR: c_int = 13;
                                    pub const REG_EIP: c_int = 14;
                                    pub const REG_CS: c_int = 15;
                                    pub const REG_EFL: c_int = 16;
                                    pub const REG_UESP: c_int = 17;
                                    pub const REG_SS: c_int = 18;

                                    extern "C"
                                    {
                                        pub fn getcontext(ucp: *mut ucontext_t) -> c_int;
                                        pub fn setcontext(ucp: *const ucontext_t) -> c_int;
                                        pub fn makecontext
                                        (
                                            ucp:*mut ucontext_t,
                                            func:extern "C" fn(), 
                                            argc:c_int, ...
                                        );
                                        pub fn swapcontext(uocp: *mut ucontext_t, ucp: *const ucontext_t) -> c_int;
                                    }
                                } pub use self::x86::*;
                            } pub use self::b32::*;
                        }

                        else if #[cfg(any
                        (
                            target_arch = "x86_64",
                            target_arch = "aarch64",
                            target_arch = "powerpc64",
                            target_arch = "mips64",
                            target_arch = "mips64r6",
                            target_arch = "s390x",
                            target_arch = "sparc64",
                            target_arch = "riscv64",
                            target_arch = "loongarch64"
                        ))]
                        {
                            mod b64
                            {
                                //! 64-bit specific definitions for linux-like values
                                use ::libc::*;

                                pub type ino_t = u64;
                                pub type off_t = i64;
                                pub type blkcnt_t = i64;
                                pub type shmatt_t = u64;
                                pub type msgqnum_t = u64;
                                pub type msglen_t = u64;
                                pub type fsblkcnt_t = u64;
                                pub type fsfilcnt_t = u64;
                                pub type rlim_t = u64;
                                #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                pub type __syscall_ulong_t = c_ulonglong;
                                #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                pub type __syscall_ulong_t = c_ulong;

                                cfg_if!
                                {
                                    if #[cfg(all(target_arch = "aarch64", target_pointer_width = "32"))]
                                    {
                                        pub type clock_t = i32;
                                        pub type __fsword_t = i32;
                                    }
                                    
                                    else
                                    {
                                        pub type __fsword_t = i64;
                                        pub type clock_t = i64;
                                    }
                                }

                                s!
                                {
                                    pub struct sigset_t
                                    {
                                        #[cfg(target_pointer_width = "32")]
                                        pub __val: [u32; 32],
                                        #[cfg(target_pointer_width = "64")]
                                        pub __val: [u64; 16],
                                    }

                                    pub struct sysinfo
                                    {
                                        pub uptime: i64,
                                        pub loads: [u64; 3],
                                        pub totalram: u64,
                                        pub freeram: u64,
                                        pub sharedram: u64,
                                        pub bufferram: u64,
                                        pub totalswap: u64,
                                        pub freeswap: u64,
                                        pub procs: c_ushort,
                                        pub pad: c_ushort,
                                        pub totalhigh: u64,
                                        pub freehigh: u64,
                                        pub mem_unit: c_uint,
                                        pub _f: [c_char; 0],
                                    }

                                    pub struct msqid_ds
                                    {
                                        pub msg_perm: ipc_perm,
                                        pub msg_stime: time_t,
                                        pub msg_rtime: time_t,
                                        pub msg_ctime: time_t,
                                        pub __msg_cbytes: u64,
                                        pub msg_qnum: msgqnum_t,
                                        pub msg_qbytes: msglen_t,
                                        pub msg_lspid: pid_t,
                                        pub msg_lrpid: pid_t,
                                        __glibc_reserved4: u64,
                                        __glibc_reserved5: u64,
                                    }

                                    pub struct semid_ds
                                    {
                                        pub sem_perm: ipc_perm,
                                        pub sem_otime: time_t,
                                        #[cfg(not(any
                                        (
                                            target_arch = "aarch64",
                                            target_arch = "loongarch64",
                                            target_arch = "mips64",
                                            target_arch = "mips64r6",
                                            target_arch = "powerpc64",
                                            target_arch = "riscv64",
                                            target_arch = "sparc64",
                                            target_arch = "s390x",
                                        )))]
                                        __reserved: __syscall_ulong_t,
                                        pub sem_ctime: time_t,
                                        #[cfg(not(any
                                        (
                                            target_arch = "aarch64",
                                            target_arch = "loongarch64",
                                            target_arch = "mips64",
                                            target_arch = "mips64r6",
                                            target_arch = "powerpc64",
                                            target_arch = "riscv64",
                                            target_arch = "sparc64",
                                            target_arch = "s390x",
                                        )))]
                                        __reserved2: __syscall_ulong_t,
                                        pub sem_nsems: __syscall_ulong_t,
                                        __glibc_reserved3: __syscall_ulong_t,
                                        __glibc_reserved4: __syscall_ulong_t,
                                    }

                                    pub struct timex 
                                    {
                                        pub modes: c_uint,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub offset: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub offset: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub freq: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub freq: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub maxerror: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub maxerror: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub esterror: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub esterror: c_long,
                                        pub status: c_int,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub constant: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub constant: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub precision: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub precision: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub tolerance: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub tolerance: c_long,
                                        pub time: timeval,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub tick: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub tick: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub ppsfreq: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub ppsfreq: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub jitter: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub jitter: c_long,
                                        pub shift: c_int,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub stabil: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub stabil: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub jitcnt: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub jitcnt: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub calcnt: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub calcnt: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub errcnt: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub errcnt: c_long,
                                        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
                                        pub stbcnt: i64,
                                        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
                                        pub stbcnt: c_long,
                                        pub tai: c_int,
                                        pub __unused1: i32,
                                        pub __unused2: i32,
                                        pub __unused3: i32,
                                        pub __unused4: i32,
                                        pub __unused5: i32,
                                        pub __unused6: i32,
                                        pub __unused7: i32,
                                        pub __unused8: i32,
                                        pub __unused9: i32,
                                        pub __unused10: i32,
                                        pub __unused11: i32,
                                    }
                                }

                                pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: usize = 8;

                                pub const O_LARGEFILE: c_int = 0;

                                mod x86_64
                                {
                                    //! x86_64-specific definitions for 64-bit linux-like values
                                    use ::libc::*;

                                    pub type wchar_t = i32;
                                    pub type nlink_t = u64;
                                    pub type blksize_t = i64;
                                    pub type greg_t = i64;
                                    pub type suseconds_t = i64;
                                    pub type __u64 = c_ulonglong;
                                    pub type __s64 = c_longlong;

                                    s! 
                                    {
                                        #[allow(unpredictable_function_pointer_comparisons)]
                                        pub struct sigaction 
                                        {
                                            pub sa_sigaction: sighandler_t,
                                            pub sa_mask: sigset_t,
                                            pub sa_flags: c_int,
                                            pub sa_restorer: Option<extern "C" fn()>,
                                        }

                                        pub struct statfs
                                        {
                                            pub f_type: __fsword_t,
                                            pub f_bsize: __fsword_t,
                                            pub f_blocks: fsblkcnt_t,
                                            pub f_bfree: fsblkcnt_t,
                                            pub f_bavail: fsblkcnt_t,

                                            pub f_files: fsfilcnt_t,
                                            pub f_ffree: fsfilcnt_t,
                                            pub f_fsid: fsid_t,

                                            pub f_namelen: __fsword_t,
                                            pub f_frsize: __fsword_t,
                                            f_spare: [__fsword_t; 5],
                                        }

                                        pub struct flock
                                        {
                                            pub l_type: c_short,
                                            pub l_whence: c_short,
                                            pub l_start: off_t,
                                            pub l_len: off_t,
                                            pub l_pid: pid_t,
                                        }

                                        pub struct flock64
                                        {
                                            pub l_type: c_short,
                                            pub l_whence: c_short,
                                            pub l_start: off64_t,
                                            pub l_len: off64_t,
                                            pub l_pid: pid_t,
                                        }

                                        pub struct siginfo_t
                                        {
                                            pub si_signo: c_int,
                                            pub si_errno: c_int,
                                            pub si_code: c_int,
                                                                    #[deprecated(
                                                since = "0.2.54",
                                                note = "Please leave a comment on \
                                                    https://github.com/rust-lang/libc/pull/1316 if you're using \
                                                    this field"
                                            )]
                                            pub _pad: [c_int; 29],
                                            _align: [u64; 0],
                                        }

                                        pub struct stack_t
                                        {
                                            pub ss_sp: *mut c_void,
                                            pub ss_flags: c_int,
                                            pub ss_size: size_t,
                                        }

                                        pub struct stat
                                        {
                                            pub st_dev: dev_t,
                                            pub st_ino: ino_t,
                                            pub st_nlink: nlink_t,
                                            pub st_mode: mode_t,
                                            pub st_uid: uid_t,
                                            pub st_gid: gid_t,
                                            __pad0: c_int,
                                            pub st_rdev: dev_t,
                                            pub st_size: off_t,
                                            pub st_blksize: blksize_t,
                                            pub st_blocks: blkcnt_t,
                                            pub st_atime: time_t,
                                            pub st_atime_nsec: i64,
                                            pub st_mtime: time_t,
                                            pub st_mtime_nsec: i64,
                                            pub st_ctime: time_t,
                                            pub st_ctime_nsec: i64,
                                            __unused: [i64; 3],
                                        }

                                        pub struct stat64
                                        {
                                            pub st_dev: dev_t,
                                            pub st_ino: ino64_t,
                                            pub st_nlink: nlink_t,
                                            pub st_mode: mode_t,
                                            pub st_uid: uid_t,
                                            pub st_gid: gid_t,
                                            __pad0: c_int,
                                            pub st_rdev: dev_t,
                                            pub st_size: off_t,
                                            pub st_blksize: blksize_t,
                                            pub st_blocks: blkcnt64_t,
                                            pub st_atime: time_t,
                                            pub st_atime_nsec: i64,
                                            pub st_mtime: time_t,
                                            pub st_mtime_nsec: i64,
                                            pub st_ctime: time_t,
                                            pub st_ctime_nsec: i64,
                                            __reserved: [i64; 3],
                                        }

                                        pub struct statfs64
                                        {
                                            pub f_type: __fsword_t,
                                            pub f_bsize: __fsword_t,
                                            pub f_blocks: u64,
                                            pub f_bfree: u64,
                                            pub f_bavail: u64,
                                            pub f_files: u64,
                                            pub f_ffree: u64,
                                            pub f_fsid: fsid_t,
                                            pub f_namelen: __fsword_t,
                                            pub f_frsize: __fsword_t,
                                            pub f_flags: __fsword_t,
                                            pub f_spare: [__fsword_t; 4],
                                        }

                                        pub struct statvfs64
                                        {
                                            pub f_bsize: c_ulong,
                                            pub f_frsize: c_ulong,
                                            pub f_blocks: u64,
                                            pub f_bfree: u64,
                                            pub f_bavail: u64,
                                            pub f_files: u64,
                                            pub f_ffree: u64,
                                            pub f_favail: u64,
                                            pub f_fsid: c_ulong,
                                            pub f_flag: c_ulong,
                                            pub f_namemax: c_ulong,
                                            __f_spare: [c_int; 6],
                                        }

                                        pub struct pthread_attr_t
                                        {
                                            #[cfg(target_pointer_width = "32")]
                                            __size: [u32; 8],
                                            #[cfg(target_pointer_width = "64")]
                                            __size: [u64; 7],
                                        }

                                        pub struct _libc_fpxreg
                                        {
                                            pub significand: [u16; 4],
                                            pub exponent: u16,
                                            __private: [u16; 3],
                                        }

                                        pub struct _libc_xmmreg
                                        {
                                            pub element: [u32; 4],
                                        }

                                        pub struct _libc_fpstate
                                        {
                                            pub cwd: u16,
                                            pub swd: u16,
                                            pub ftw: u16,
                                            pub fop: u16,
                                            pub rip: u64,
                                            pub rdp: u64,
                                            pub mxcsr: u32,
                                            pub mxcr_mask: u32,
                                            pub _st: [_libc_fpxreg; 8],
                                            pub _xmm: [_libc_xmmreg; 16],
                                            __private: [u64; 12],
                                        }

                                        pub struct user_regs_struct 
                                        {
                                            pub r15: c_ulonglong,
                                            pub r14: c_ulonglong,
                                            pub r13: c_ulonglong,
                                            pub r12: c_ulonglong,
                                            pub rbp: c_ulonglong,
                                            pub rbx: c_ulonglong,
                                            pub r11: c_ulonglong,
                                            pub r10: c_ulonglong,
                                            pub r9: c_ulonglong,
                                            pub r8: c_ulonglong,
                                            pub rax: c_ulonglong,
                                            pub rcx: c_ulonglong,
                                            pub rdx: c_ulonglong,
                                            pub rsi: c_ulonglong,
                                            pub rdi: c_ulonglong,
                                            pub orig_rax: c_ulonglong,
                                            pub rip: c_ulonglong,
                                            pub cs: c_ulonglong,
                                            pub eflags: c_ulonglong,
                                            pub rsp: c_ulonglong,
                                            pub ss: c_ulonglong,
                                            pub fs_base: c_ulonglong,
                                            pub gs_base: c_ulonglong,
                                            pub ds: c_ulonglong,
                                            pub es: c_ulonglong,
                                            pub fs: c_ulonglong,
                                            pub gs: c_ulonglong,
                                        }

                                        pub struct user
                                        {
                                            pub regs: user_regs_struct,
                                            pub u_fpvalid: c_int,
                                            pub i387: user_fpregs_struct,
                                            pub u_tsize: c_ulonglong,
                                            pub u_dsize: c_ulonglong,
                                            pub u_ssize: c_ulonglong,
                                            pub start_code: c_ulonglong,
                                            pub start_stack: c_ulonglong,
                                            pub signal: c_longlong,
                                            __reserved: c_int,
                                            #[cfg(target_pointer_width = "32")]
                                            __pad1: u32,
                                            pub u_ar0: *mut user_regs_struct,
                                            #[cfg(target_pointer_width = "32")]
                                            __pad2: u32,
                                            pub u_fpstate: *mut user_fpregs_struct,
                                            pub magic: c_ulonglong,
                                            pub u_comm: [c_char; 32],
                                            pub u_debugreg: [c_ulonglong; 8],
                                        }

                                        pub struct mcontext_t
                                        {
                                            pub gregs: [greg_t; 23],
                                            pub fpregs: *mut _libc_fpstate,
                                            __private: [u64; 8],
                                        }

                                        pub struct ipc_perm
                                        {
                                            pub __key: key_t,
                                            pub uid: uid_t,
                                            pub gid: gid_t,
                                            pub cuid: uid_t,
                                            pub cgid: gid_t,
                                            pub mode: c_ushort,
                                            __pad1: c_ushort,
                                            pub __seq: c_ushort,
                                            __pad2: c_ushort,
                                            __unused1: u64,
                                            __unused2: u64,
                                        }

                                        pub struct shmid_ds
                                        {
                                            pub shm_perm: ipc_perm,
                                            pub shm_segsz: size_t,
                                            pub shm_atime: time_t,
                                            pub shm_dtime: time_t,
                                            pub shm_ctime: time_t,
                                            pub shm_cpid: pid_t,
                                            pub shm_lpid: pid_t,
                                            pub shm_nattch: shmatt_t,
                                            __unused4: u64,
                                            __unused5: u64,
                                        }

                                        pub struct ptrace_rseq_configuration
                                        {
                                            pub rseq_abi_pointer: __u64,
                                            pub rseq_abi_size: __u32,
                                            pub signature: __u32,
                                            pub flags: __u32,
                                            pub pad: __u32,
                                        }

                                        #[repr(align(8))]
                                        pub struct clone_args
                                        {
                                            pub flags: c_ulonglong,
                                            pub pidfd: c_ulonglong,
                                            pub child_tid: c_ulonglong,
                                            pub parent_tid: c_ulonglong,
                                            pub exit_signal: c_ulonglong,
                                            pub stack: c_ulonglong,
                                            pub stack_size: c_ulonglong,
                                            pub tls: c_ulonglong,
                                            pub set_tid: c_ulonglong,
                                            pub set_tid_size: c_ulonglong,
                                            pub cgroup: c_ulonglong,
                                        }
                                    }

                                    s_no_extra_traits!
                                    {
                                        pub struct user_fpregs_struct
                                        {
                                            pub cwd: c_ushort,
                                            pub swd: c_ushort,
                                            pub ftw: c_ushort,
                                            pub fop: c_ushort,
                                            pub rip: c_ulonglong,
                                            pub rdp: c_ulonglong,
                                            pub mxcsr: c_uint,
                                            pub mxcr_mask: c_uint,
                                            pub st_space: [c_uint; 32],
                                            pub xmm_space: [c_uint; 64],
                                            padding: [c_uint; 24],
                                        }

                                        pub struct ucontext_t
                                        {
                                            pub uc_flags: c_ulong,
                                            pub uc_link: *mut ucontext_t,
                                            pub uc_stack: stack_t,
                                            pub uc_mcontext: mcontext_t,
                                            pub uc_sigmask: sigset_t,
                                            __private: [u8; 512],
                                        }

                                        #[repr(align(16))]
                                        pub struct max_align_t
                                        {
                                            priv_: [f64; 4],
                                        }
                                    }
                                    
                                    impl PartialEq for user_fpregs_struct
                                    {
                                        fn eq(&self, other: &user_fpregs_struct) -> bool
                                        {
                                            self.cwd == other.cwd
                                            && self.swd == other.swd
                                            && self.ftw == other.ftw
                                            && self.fop == other.fop
                                            && self.rip == other.rip
                                            && self.rdp == other.rdp
                                            && self.mxcsr == other.mxcsr
                                            && self.mxcr_mask == other.mxcr_mask
                                            && self.st_space == other.st_space
                                            && self
                                            .xmm_space
                                            .iter()
                                            .zip(other.xmm_space.iter())
                                            .all(|(a, b)| a == b)
                                        }
                                    }

                                    impl Eq for user_fpregs_struct {}

                                    impl ::hash::Hash for user_fpregs_struct
                                    {
                                        fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                                        {
                                            self.cwd.hash(state);
                                            self.ftw.hash(state);
                                            self.fop.hash(state);
                                            self.rip.hash(state);
                                            self.rdp.hash(state);
                                            self.mxcsr.hash(state);
                                            self.mxcr_mask.hash(state);
                                            self.st_space.hash(state);
                                            self.xmm_space.hash(state);
                                        }
                                    }

                                    impl PartialEq for ucontext_t
                                    {
                                        fn eq(&self, other: &ucontext_t) -> bool
                                        {
                                            self.uc_flags == other.uc_flags
                                            && self.uc_link == other.uc_link
                                            && self.uc_stack == other.uc_stack
                                            && self.uc_mcontext == other.uc_mcontext
                                            && self.uc_sigmask == other.uc_sigmask
                                        }
                                    }

                                    impl Eq for ucontext_t {}

                                    impl ::hash::Hash for ucontext_t
                                    {
                                        fn hash<H: ::hash::Hasher>(&self, state: &mut H)
                                        {
                                            self.uc_flags.hash(state);
                                            self.uc_link.hash(state);
                                            self.uc_stack.hash(state);
                                            self.uc_mcontext.hash(state);
                                            self.uc_sigmask.hash(state);
                                        }
                                    }

                                    pub const POSIX_FADV_DONTNEED: c_int = 4;
                                    pub const POSIX_FADV_NOREUSE: c_int = 5;

                                    pub const VEOF: usize = 4;
                                    pub const RTLD_DEEPBIND: c_int = 0x8;
                                    pub const RTLD_GLOBAL: c_int = 0x100;
                                    pub const RTLD_NOLOAD: c_int = 0x4;

                                    pub const O_APPEND: c_int = 1024;
                                    pub const O_CREAT: c_int = 64;
                                    pub const O_EXCL: c_int = 128;
                                    pub const O_NOCTTY: c_int = 256;
                                    pub const O_NONBLOCK: c_int = 2048;
                                    pub const O_SYNC: c_int = 1052672;
                                    pub const O_RSYNC: c_int = 1052672;
                                    pub const O_DSYNC: c_int = 4096;
                                    pub const O_FSYNC: c_int = 0x101000;
                                    pub const O_NOATIME: c_int = 0o1000000;
                                    pub const O_PATH: c_int = 0o10000000;
                                    pub const O_TMPFILE: c_int = 0o20000000 | O_DIRECTORY;

                                    pub const MADV_SOFT_OFFLINE: c_int = 101;
                                    pub const MAP_GROWSDOWN: c_int = 0x0100;

                                    pub const EDEADLK: c_int = 35;
                                    pub const ENAMETOOLONG: c_int = 36;
                                    pub const ENOLCK: c_int = 37;
                                    pub const ENOSYS: c_int = 38;
                                    pub const ENOTEMPTY: c_int = 39;
                                    pub const ELOOP: c_int = 40;
                                    pub const ENOMSG: c_int = 42;
                                    pub const EIDRM: c_int = 43;
                                    pub const ECHRNG: c_int = 44;
                                    pub const EL2NSYNC: c_int = 45;
                                    pub const EL3HLT: c_int = 46;
                                    pub const EL3RST: c_int = 47;
                                    pub const ELNRNG: c_int = 48;
                                    pub const EUNATCH: c_int = 49;
                                    pub const ENOCSI: c_int = 50;
                                    pub const EL2HLT: c_int = 51;
                                    pub const EBADE: c_int = 52;
                                    pub const EBADR: c_int = 53;
                                    pub const EXFULL: c_int = 54;
                                    pub const ENOANO: c_int = 55;
                                    pub const EBADRQC: c_int = 56;
                                    pub const EBADSLT: c_int = 57;
                                    pub const EMULTIHOP: c_int = 72;
                                    pub const EOVERFLOW: c_int = 75;
                                    pub const ENOTUNIQ: c_int = 76;
                                    pub const EBADFD: c_int = 77;
                                    pub const EBADMSG: c_int = 74;
                                    pub const EREMCHG: c_int = 78;
                                    pub const ELIBACC: c_int = 79;
                                    pub const ELIBBAD: c_int = 80;
                                    pub const ELIBSCN: c_int = 81;
                                    pub const ELIBMAX: c_int = 82;
                                    pub const ELIBEXEC: c_int = 83;
                                    pub const EILSEQ: c_int = 84;
                                    pub const ERESTART: c_int = 85;
                                    pub const ESTRPIPE: c_int = 86;
                                    pub const EUSERS: c_int = 87;
                                    pub const ENOTSOCK: c_int = 88;
                                    pub const EDESTADDRREQ: c_int = 89;
                                    pub const EMSGSIZE: c_int = 90;
                                    pub const EPROTOTYPE: c_int = 91;
                                    pub const ENOPROTOOPT: c_int = 92;
                                    pub const EPROTONOSUPPORT: c_int = 93;
                                    pub const ESOCKTNOSUPPORT: c_int = 94;
                                    pub const EOPNOTSUPP: c_int = 95;
                                    pub const EPFNOSUPPORT: c_int = 96;
                                    pub const EAFNOSUPPORT: c_int = 97;
                                    pub const EADDRINUSE: c_int = 98;
                                    pub const EADDRNOTAVAIL: c_int = 99;
                                    pub const ENETDOWN: c_int = 100;
                                    pub const ENETUNREACH: c_int = 101;
                                    pub const ENETRESET: c_int = 102;
                                    pub const ECONNABORTED: c_int = 103;
                                    pub const ECONNRESET: c_int = 104;
                                    pub const ENOBUFS: c_int = 105;
                                    pub const EISCONN: c_int = 106;
                                    pub const ENOTCONN: c_int = 107;
                                    pub const ESHUTDOWN: c_int = 108;
                                    pub const ETOOMANYREFS: c_int = 109;
                                    pub const ETIMEDOUT: c_int = 110;
                                    pub const ECONNREFUSED: c_int = 111;
                                    pub const EHOSTDOWN: c_int = 112;
                                    pub const EHOSTUNREACH: c_int = 113;
                                    pub const EALREADY: c_int = 114;
                                    pub const EINPROGRESS: c_int = 115;
                                    pub const ESTALE: c_int = 116;
                                    pub const EDQUOT: c_int = 122;
                                    pub const ENOMEDIUM: c_int = 123;
                                    pub const EMEDIUMTYPE: c_int = 124;
                                    pub const ECANCELED: c_int = 125;
                                    pub const ENOKEY: c_int = 126;
                                    pub const EKEYEXPIRED: c_int = 127;
                                    pub const EKEYREVOKED: c_int = 128;
                                    pub const EKEYREJECTED: c_int = 129;
                                    pub const EOWNERDEAD: c_int = 130;
                                    pub const ENOTRECOVERABLE: c_int = 131;
                                    pub const EHWPOISON: c_int = 133;
                                    pub const ERFKILL: c_int = 132;

                                    pub const SOCK_STREAM: c_int = 1;
                                    pub const SOCK_DGRAM: c_int = 2;

                                    pub const SA_ONSTACK: c_int = 0x08000000;
                                    pub const SA_SIGINFO: c_int = 0x00000004;
                                    pub const SA_NOCLDWAIT: c_int = 0x00000002;

                                    pub const SIGTTIN: c_int = 21;
                                    pub const SIGTTOU: c_int = 22;
                                    pub const SIGXCPU: c_int = 24;
                                    pub const SIGXFSZ: c_int = 25;
                                    pub const SIGVTALRM: c_int = 26;
                                    pub const SIGPROF: c_int = 27;
                                    pub const SIGWINCH: c_int = 28;
                                    pub const SIGCHLD: c_int = 17;
                                    pub const SIGBUS: c_int = 7;
                                    pub const SIGUSR1: c_int = 10;
                                    pub const SIGUSR2: c_int = 12;
                                    pub const SIGCONT: c_int = 18;
                                    pub const SIGSTOP: c_int = 19;
                                    pub const SIGTSTP: c_int = 20;
                                    pub const SIGURG: c_int = 23;
                                    pub const SIGIO: c_int = 29;
                                    pub const SIGSYS: c_int = 31;
                                    pub const SIGSTKFLT: c_int = 16;
                                    #[deprecated(since = "0.2.55", note = "Use SIGSYS instead")]
                                    pub const SIGUNUSED: c_int = 31;
                                    pub const SIGPOLL: c_int = 29;
                                    pub const SIGPWR: c_int = 30;
                                    pub const SIG_SETMASK: c_int = 2;
                                    pub const SIG_BLOCK: c_int = 0x000000;
                                    pub const SIG_UNBLOCK: c_int = 0x01;

                                    pub const POLLWRNORM: c_short = 0x100;
                                    pub const POLLWRBAND: c_short = 0x200;

                                    pub const O_ASYNC: c_int = 0x2000;
                                    pub const O_NDELAY: c_int = 0x800;

                                    pub const PTRACE_DETACH: c_uint = 17;
                                    pub const PTRACE_GET_RSEQ_CONFIGURATION: c_uint = 0x420f;

                                    pub const EFD_NONBLOCK: c_int = 0x800;

                                    pub const F_GETLK: c_int = 5;
                                    pub const F_GETOWN: c_int = 9;
                                    pub const F_SETOWN: c_int = 8;
                                    pub const F_SETLK: c_int = 6;
                                    pub const F_SETLKW: c_int = 7;
                                    pub const F_OFD_GETLK: c_int = 36;
                                    pub const F_OFD_SETLK: c_int = 37;
                                    pub const F_OFD_SETLKW: c_int = 38;

                                    pub const F_RDLCK: c_int = 0;
                                    pub const F_WRLCK: c_int = 1;
                                    pub const F_UNLCK: c_int = 2;

                                    pub const SFD_NONBLOCK: c_int = 0x0800;

                                    pub const TCSANOW: c_int = 0;
                                    pub const TCSADRAIN: c_int = 1;
                                    pub const TCSAFLUSH: c_int = 2;

                                    pub const SFD_CLOEXEC: c_int = 0x080000;

                                    pub const NCCS: usize = 32;

                                    pub const O_TRUNC: c_int = 512;

                                    pub const O_CLOEXEC: c_int = 0x80000;

                                    pub const EBFONT: c_int = 59;
                                    pub const ENOSTR: c_int = 60;
                                    pub const ENODATA: c_int = 61;
                                    pub const ETIME: c_int = 62;
                                    pub const ENOSR: c_int = 63;
                                    pub const ENONET: c_int = 64;
                                    pub const ENOPKG: c_int = 65;
                                    pub const EREMOTE: c_int = 66;
                                    pub const ENOLINK: c_int = 67;
                                    pub const EADV: c_int = 68;
                                    pub const ESRMNT: c_int = 69;
                                    pub const ECOMM: c_int = 70;
                                    pub const EPROTO: c_int = 71;
                                    pub const EDOTDOT: c_int = 73;

                                    pub const SA_NODEFER: c_uint = 0x40000000;
                                    pub const SA_RESETHAND: c_uint = 0x80000000;
                                    pub const SA_RESTART: c_uint = 0x10000000;
                                    pub const SA_NOCLDSTOP: c_uint = 0x00000001;

                                    pub const EPOLL_CLOEXEC: c_int = 0x80000;

                                    pub const EFD_CLOEXEC: c_int = 0x80000;

                                    pub const __SIZEOF_PTHREAD_CONDATTR_T: usize = 4;
                                    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: usize = 4;
                                    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: usize = 4;

                                    pub const O_DIRECT: c_int = 0x4000;
                                    pub const O_DIRECTORY: c_int = 0x10000;
                                    pub const O_NOFOLLOW: c_int = 0x20000;

                                    pub const MAP_HUGETLB: c_int = 0x040000;
                                    pub const MAP_LOCKED: c_int = 0x02000;
                                    pub const MAP_NORESERVE: c_int = 0x04000;
                                    pub const MAP_32BIT: c_int = 0x0040;
                                    pub const MAP_ANON: c_int = 0x0020;
                                    pub const MAP_ANONYMOUS: c_int = 0x0020;
                                    pub const MAP_DENYWRITE: c_int = 0x0800;
                                    pub const MAP_EXECUTABLE: c_int = 0x01000;
                                    pub const MAP_POPULATE: c_int = 0x08000;
                                    pub const MAP_NONBLOCK: c_int = 0x010000;
                                    pub const MAP_STACK: c_int = 0x020000;
                                    pub const MAP_SYNC: c_int = 0x080000;

                                    pub const EDEADLOCK: c_int = 35;
                                    pub const EUCLEAN: c_int = 117;
                                    pub const ENOTNAM: c_int = 118;
                                    pub const ENAVAIL: c_int = 119;
                                    pub const EISNAM: c_int = 120;
                                    pub const EREMOTEIO: c_int = 121;

                                    pub const PTRACE_GETFPREGS: c_uint = 14;
                                    pub const PTRACE_SETFPREGS: c_uint = 15;
                                    pub const PTRACE_GETFPXREGS: c_uint = 18;
                                    pub const PTRACE_SETFPXREGS: c_uint = 19;
                                    pub const PTRACE_GETREGS: c_uint = 12;
                                    pub const PTRACE_SETREGS: c_uint = 13;
                                    pub const PTRACE_PEEKSIGINFO_SHARED: c_uint = 1;
                                    pub const PTRACE_SYSEMU: c_uint = 31;
                                    pub const PTRACE_SYSEMU_SINGLESTEP: c_uint = 32;

                                    pub const PR_GET_SPECULATION_CTRL: c_int = 52;
                                    pub const PR_SET_SPECULATION_CTRL: c_int = 53;
                                    pub const PR_SPEC_NOT_AFFECTED: c_uint = 0;
                                    pub const PR_SPEC_PRCTL: c_uint = 1 << 0;
                                    pub const PR_SPEC_ENABLE: c_uint = 1 << 1;
                                    pub const PR_SPEC_DISABLE: c_uint = 1 << 2;
                                    pub const PR_SPEC_FORCE_DISABLE: c_uint = 1 << 3;
                                    pub const PR_SPEC_DISABLE_NOEXEC: c_uint = 1 << 4;
                                    pub const PR_SPEC_STORE_BYPASS: c_int = 0;
                                    pub const PR_SPEC_INDIRECT_BRANCH: c_int = 1;
                                    
                                    pub const MCL_CURRENT: c_int = 0x0001;
                                    pub const MCL_FUTURE: c_int = 0x0002;
                                    pub const MCL_ONFAULT: c_int = 0x0004;

                                    pub const SIGSTKSZ: size_t = 8192;
                                    pub const MINSIGSTKSZ: size_t = 2048;
                                    pub const CBAUD: tcflag_t = 0o0010017;
                                    pub const TAB1: tcflag_t = 0x00000800;
                                    pub const TAB2: tcflag_t = 0x00001000;
                                    pub const TAB3: tcflag_t = 0x00001800;
                                    pub const CR1: tcflag_t = 0x00000200;
                                    pub const CR2: tcflag_t = 0x00000400;
                                    pub const CR3: tcflag_t = 0x00000600;
                                    pub const FF1: tcflag_t = 0x00008000;
                                    pub const BS1: tcflag_t = 0x00002000;
                                    pub const VT1: tcflag_t = 0x00004000;
                                    pub const VWERASE: usize = 14;
                                    pub const VREPRINT: usize = 12;
                                    pub const VSUSP: usize = 10;
                                    pub const VSTART: usize = 8;
                                    pub const VSTOP: usize = 9;
                                    pub const VDISCARD: usize = 13;
                                    pub const VTIME: usize = 5;
                                    pub const IXON: tcflag_t = 0x00000400;
                                    pub const IXOFF: tcflag_t = 0x00001000;
                                    pub const ONLCR: tcflag_t = 0x4;
                                    pub const CSIZE: tcflag_t = 0x00000030;
                                    pub const CS6: tcflag_t = 0x00000010;
                                    pub const CS7: tcflag_t = 0x00000020;
                                    pub const CS8: tcflag_t = 0x00000030;
                                    pub const CSTOPB: tcflag_t = 0x00000040;
                                    pub const CREAD: tcflag_t = 0x00000080;
                                    pub const PARENB: tcflag_t = 0x00000100;
                                    pub const PARODD: tcflag_t = 0x00000200;
                                    pub const HUPCL: tcflag_t = 0x00000400;
                                    pub const CLOCAL: tcflag_t = 0x00000800;
                                    pub const ECHOKE: tcflag_t = 0x00000800;
                                    pub const ECHOE: tcflag_t = 0x00000010;
                                    pub const ECHOK: tcflag_t = 0x00000020;
                                    pub const ECHONL: tcflag_t = 0x00000040;
                                    pub const ECHOPRT: tcflag_t = 0x00000400;
                                    pub const ECHOCTL: tcflag_t = 0x00000200;
                                    pub const ISIG: tcflag_t = 0x00000001;
                                    pub const ICANON: tcflag_t = 0x00000002;
                                    pub const PENDIN: tcflag_t = 0x00004000;
                                    pub const NOFLSH: tcflag_t = 0x00000080;
                                    pub const CIBAUD: tcflag_t = 0o02003600000;
                                    pub const CBAUDEX: tcflag_t = 0o010000;
                                    pub const VSWTC: usize = 7;
                                    pub const OLCUC: tcflag_t = 0o000002;
                                    pub const NLDLY: tcflag_t = 0o000400;
                                    pub const CRDLY: tcflag_t = 0o003000;
                                    pub const TABDLY: tcflag_t = 0o014000;
                                    pub const BSDLY: tcflag_t = 0o020000;
                                    pub const FFDLY: tcflag_t = 0o100000;
                                    pub const VTDLY: tcflag_t = 0o040000;
                                    pub const XTABS: tcflag_t = 0o014000;

                                    pub const B0: speed_t = 0o000000;
                                    pub const B50: speed_t = 0o000001;
                                    pub const B75: speed_t = 0o000002;
                                    pub const B110: speed_t = 0o000003;
                                    pub const B134: speed_t = 0o000004;
                                    pub const B150: speed_t = 0o000005;
                                    pub const B200: speed_t = 0o000006;
                                    pub const B300: speed_t = 0o000007;
                                    pub const B600: speed_t = 0o000010;
                                    pub const B1200: speed_t = 0o000011;
                                    pub const B1800: speed_t = 0o000012;
                                    pub const B2400: speed_t = 0o000013;
                                    pub const B4800: speed_t = 0o000014;
                                    pub const B9600: speed_t = 0o000015;
                                    pub const B19200: speed_t = 0o000016;
                                    pub const B38400: speed_t = 0o000017;
                                    pub const EXTA: speed_t = B19200;
                                    pub const EXTB: speed_t = B38400;
                                    pub const B57600: speed_t = 0o010001;
                                    pub const B115200: speed_t = 0o010002;
                                    pub const B230400: speed_t = 0o010003;
                                    pub const B460800: speed_t = 0o010004;
                                    pub const B500000: speed_t = 0o010005;
                                    pub const B576000: speed_t = 0o010006;
                                    pub const B921600: speed_t = 0o010007;
                                    pub const B1000000: speed_t = 0o010010;
                                    pub const B1152000: speed_t = 0o010011;
                                    pub const B1500000: speed_t = 0o010012;
                                    pub const B2000000: speed_t = 0o010013;
                                    pub const B2500000: speed_t = 0o010014;
                                    pub const B3000000: speed_t = 0o010015;
                                    pub const B3500000: speed_t = 0o010016;
                                    pub const B4000000: speed_t = 0o010017;

                                    pub const VEOL: usize = 11;
                                    pub const VEOL2: usize = 16;
                                    pub const VMIN: usize = 6;
                                    pub const IEXTEN: tcflag_t = 0x00008000;
                                    pub const TOSTOP: tcflag_t = 0x00000100;
                                    pub const FLUSHO: tcflag_t = 0x00001000;
                                    pub const EXTPROC: tcflag_t = 0x00010000;
                                    
                                    pub const R15: c_int = 0;
                                    pub const R14: c_int = 1;
                                    pub const R13: c_int = 2;
                                    pub const R12: c_int = 3;
                                    pub const RBP: c_int = 4;
                                    pub const RBX: c_int = 5;
                                    pub const R11: c_int = 6;
                                    pub const R10: c_int = 7;
                                    pub const R9: c_int = 8;
                                    pub const R8: c_int = 9;
                                    pub const RAX: c_int = 10;
                                    pub const RCX: c_int = 11;
                                    pub const RDX: c_int = 12;
                                    pub const RSI: c_int = 13;
                                    pub const RDI: c_int = 14;
                                    pub const ORIG_RAX: c_int = 15;
                                    pub const RIP: c_int = 16;
                                    pub const CS: c_int = 17;
                                    pub const EFLAGS: c_int = 18;
                                    pub const RSP: c_int = 19;
                                    pub const SS: c_int = 20;
                                    pub const FS_BASE: c_int = 21;
                                    pub const GS_BASE: c_int = 22;
                                    pub const DS: c_int = 23;
                                    pub const ES: c_int = 24;
                                    pub const FS: c_int = 25;
                                    pub const GS: c_int = 26;
                                    
                                    pub const REG_R8: c_int = 0;
                                    pub const REG_R9: c_int = 1;
                                    pub const REG_R10: c_int = 2;
                                    pub const REG_R11: c_int = 3;
                                    pub const REG_R12: c_int = 4;
                                    pub const REG_R13: c_int = 5;
                                    pub const REG_R14: c_int = 6;
                                    pub const REG_R15: c_int = 7;
                                    pub const REG_RDI: c_int = 8;
                                    pub const REG_RSI: c_int = 9;
                                    pub const REG_RBP: c_int = 10;
                                    pub const REG_RBX: c_int = 11;
                                    pub const REG_RDX: c_int = 12;
                                    pub const REG_RAX: c_int = 13;
                                    pub const REG_RCX: c_int = 14;
                                    pub const REG_RSP: c_int = 15;
                                    pub const REG_RIP: c_int = 16;
                                    pub const REG_EFL: c_int = 17;
                                    pub const REG_CSGSFS: c_int = 18;
                                    pub const REG_ERR: c_int = 19;
                                    pub const REG_TRAPNO: c_int = 20;
                                    pub const REG_OLDMASK: c_int = 21;
                                    pub const REG_CR2: c_int = 22;

                                    extern "C"
                                    {
                                        pub fn getcontext(ucp: *mut ucontext_t) -> c_int;
                                        pub fn setcontext(ucp: *const ucontext_t) -> c_int;
                                        pub fn makecontext
                                        ( 
                                            ucp:*mut ucontext_t, 
                                            func:extern "C" fn(), 
                                            argc:c_int, 
                                            ...
                                        );
                                        pub fn swapcontext(uocp: *mut ucontext_t, ucp: *const ucontext_t) -> c_int;
                                    }

                                    cfg_if!
                                    {
                                        if #[cfg(target_pointer_width = "32")]
                                        {
                                            mod x32
                                            {
                                                use ::libc::*;

                                                s!
                                                {
                                                    pub struct statvfs
                                                    {
                                                        pub f_bsize: c_ulong,
                                                        pub f_frsize: c_ulong,
                                                        pub f_blocks: fsblkcnt_t,
                                                        pub f_bfree: fsblkcnt_t,
                                                        pub f_bavail: fsblkcnt_t,
                                                        pub f_files: fsfilcnt_t,
                                                        pub f_ffree: fsfilcnt_t,
                                                        pub f_favail: fsfilcnt_t,
                                                        pub f_fsid: c_ulong,
                                                        pub f_flag: c_ulong,
                                                        pub f_namemax: c_ulong,
                                                        __f_spare: [c_int; 6],
                                                    }
                                                }

                                                pub const __SIZEOF_PTHREAD_MUTEX_T: usize = 32;
                                                pub const __SIZEOF_PTHREAD_RWLOCK_T: usize = 44;
                                                pub const __SIZEOF_PTHREAD_BARRIER_T: usize = 20;

                                                pub const PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = 
                                                pthread_mutex_t 
                                                {
                                                    size:
                                                    [
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                                                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    ],
                                                };

                                                pub const PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP: pthread_mutex_t =
                                                pthread_mutex_t
                                                {
                                                    size:
                                                    [
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                                                        2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    ],
                                                };

                                                pub const PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = 
                                                pthread_mutex_t
                                                {
                                                    size:
                                                    [
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                                                        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    ],
                                                };
                                                
                                                pub const __X32_SYSCALL_BIT: c_long = 0x40000000;

                                                pub const SYS_read: c_long = __X32_SYSCALL_BIT + 0;
                                                pub const SYS_write: c_long = __X32_SYSCALL_BIT + 1;
                                                pub const SYS_open: c_long = __X32_SYSCALL_BIT + 2;
                                                pub const SYS_close: c_long = __X32_SYSCALL_BIT + 3;
                                                pub const SYS_stat: c_long = __X32_SYSCALL_BIT + 4;
                                                pub const SYS_fstat: c_long = __X32_SYSCALL_BIT + 5;
                                                pub const SYS_lstat: c_long = __X32_SYSCALL_BIT + 6;
                                                pub const SYS_poll: c_long = __X32_SYSCALL_BIT + 7;
                                                pub const SYS_lseek: c_long = __X32_SYSCALL_BIT + 8;
                                                pub const SYS_mmap: c_long = __X32_SYSCALL_BIT + 9;
                                                pub const SYS_mprotect: c_long = __X32_SYSCALL_BIT + 10;
                                                pub const SYS_munmap: c_long = __X32_SYSCALL_BIT + 11;
                                                pub const SYS_brk: c_long = __X32_SYSCALL_BIT + 12;
                                                pub const SYS_rt_sigprocmask: c_long = __X32_SYSCALL_BIT + 14;
                                                pub const SYS_pread64: c_long = __X32_SYSCALL_BIT + 17;
                                                pub const SYS_pwrite64: c_long = __X32_SYSCALL_BIT + 18;
                                                pub const SYS_access: c_long = __X32_SYSCALL_BIT + 21;
                                                pub const SYS_pipe: c_long = __X32_SYSCALL_BIT + 22;
                                                pub const SYS_select: c_long = __X32_SYSCALL_BIT + 23;
                                                pub const SYS_sched_yield: c_long = __X32_SYSCALL_BIT + 24;
                                                pub const SYS_mremap: c_long = __X32_SYSCALL_BIT + 25;
                                                pub const SYS_msync: c_long = __X32_SYSCALL_BIT + 26;
                                                pub const SYS_mincore: c_long = __X32_SYSCALL_BIT + 27;
                                                pub const SYS_madvise: c_long = __X32_SYSCALL_BIT + 28;
                                                pub const SYS_shmget: c_long = __X32_SYSCALL_BIT + 29;
                                                pub const SYS_shmat: c_long = __X32_SYSCALL_BIT + 30;
                                                pub const SYS_shmctl: c_long = __X32_SYSCALL_BIT + 31;
                                                pub const SYS_dup: c_long = __X32_SYSCALL_BIT + 32;
                                                pub const SYS_dup2: c_long = __X32_SYSCALL_BIT + 33;
                                                pub const SYS_pause: c_long = __X32_SYSCALL_BIT + 34;
                                                pub const SYS_nanosleep: c_long = __X32_SYSCALL_BIT + 35;
                                                pub const SYS_getitimer: c_long = __X32_SYSCALL_BIT + 36;
                                                pub const SYS_alarm: c_long = __X32_SYSCALL_BIT + 37;
                                                pub const SYS_setitimer: c_long = __X32_SYSCALL_BIT + 38;
                                                pub const SYS_getpid: c_long = __X32_SYSCALL_BIT + 39;
                                                pub const SYS_sendfile: c_long = __X32_SYSCALL_BIT + 40;
                                                pub const SYS_socket: c_long = __X32_SYSCALL_BIT + 41;
                                                pub const SYS_connect: c_long = __X32_SYSCALL_BIT + 42;
                                                pub const SYS_accept: c_long = __X32_SYSCALL_BIT + 43;
                                                pub const SYS_sendto: c_long = __X32_SYSCALL_BIT + 44;
                                                pub const SYS_shutdown: c_long = __X32_SYSCALL_BIT + 48;
                                                pub const SYS_bind: c_long = __X32_SYSCALL_BIT + 49;
                                                pub const SYS_listen: c_long = __X32_SYSCALL_BIT + 50;
                                                pub const SYS_getsockname: c_long = __X32_SYSCALL_BIT + 51;
                                                pub const SYS_getpeername: c_long = __X32_SYSCALL_BIT + 52;
                                                pub const SYS_socketpair: c_long = __X32_SYSCALL_BIT + 53;
                                                pub const SYS_clone: c_long = __X32_SYSCALL_BIT + 56;
                                                pub const SYS_fork: c_long = __X32_SYSCALL_BIT + 57;
                                                pub const SYS_vfork: c_long = __X32_SYSCALL_BIT + 58;
                                                pub const SYS_exit: c_long = __X32_SYSCALL_BIT + 60;
                                                pub const SYS_wait4: c_long = __X32_SYSCALL_BIT + 61;
                                                pub const SYS_kill: c_long = __X32_SYSCALL_BIT + 62;
                                                pub const SYS_uname: c_long = __X32_SYSCALL_BIT + 63;
                                                pub const SYS_semget: c_long = __X32_SYSCALL_BIT + 64;
                                                pub const SYS_semop: c_long = __X32_SYSCALL_BIT + 65;
                                                pub const SYS_semctl: c_long = __X32_SYSCALL_BIT + 66;
                                                pub const SYS_shmdt: c_long = __X32_SYSCALL_BIT + 67;
                                                pub const SYS_msgget: c_long = __X32_SYSCALL_BIT + 68;
                                                pub const SYS_msgsnd: c_long = __X32_SYSCALL_BIT + 69;
                                                pub const SYS_msgrcv: c_long = __X32_SYSCALL_BIT + 70;
                                                pub const SYS_msgctl: c_long = __X32_SYSCALL_BIT + 71;
                                                pub const SYS_fcntl: c_long = __X32_SYSCALL_BIT + 72;
                                                pub const SYS_flock: c_long = __X32_SYSCALL_BIT + 73;
                                                pub const SYS_fsync: c_long = __X32_SYSCALL_BIT + 74;
                                                pub const SYS_fdatasync: c_long = __X32_SYSCALL_BIT + 75;
                                                pub const SYS_truncate: c_long = __X32_SYSCALL_BIT + 76;
                                                pub const SYS_ftruncate: c_long = __X32_SYSCALL_BIT + 77;
                                                pub const SYS_getdents: c_long = __X32_SYSCALL_BIT + 78;
                                                pub const SYS_getcwd: c_long = __X32_SYSCALL_BIT + 79;
                                                pub const SYS_chdir: c_long = __X32_SYSCALL_BIT + 80;
                                                pub const SYS_fchdir: c_long = __X32_SYSCALL_BIT + 81;
                                                pub const SYS_rename: c_long = __X32_SYSCALL_BIT + 82;
                                                pub const SYS_mkdir: c_long = __X32_SYSCALL_BIT + 83;
                                                pub const SYS_rmdir: c_long = __X32_SYSCALL_BIT + 84;
                                                pub const SYS_creat: c_long = __X32_SYSCALL_BIT + 85;
                                                pub const SYS_link: c_long = __X32_SYSCALL_BIT + 86;
                                                pub const SYS_unlink: c_long = __X32_SYSCALL_BIT + 87;
                                                pub const SYS_symlink: c_long = __X32_SYSCALL_BIT + 88;
                                                pub const SYS_readlink: c_long = __X32_SYSCALL_BIT + 89;
                                                pub const SYS_chmod: c_long = __X32_SYSCALL_BIT + 90;
                                                pub const SYS_fchmod: c_long = __X32_SYSCALL_BIT + 91;
                                                pub const SYS_chown: c_long = __X32_SYSCALL_BIT + 92;
                                                pub const SYS_fchown: c_long = __X32_SYSCALL_BIT + 93;
                                                pub const SYS_lchown: c_long = __X32_SYSCALL_BIT + 94;
                                                pub const SYS_umask: c_long = __X32_SYSCALL_BIT + 95;
                                                pub const SYS_gettimeofday: c_long = __X32_SYSCALL_BIT + 96;
                                                pub const SYS_getrlimit: c_long = __X32_SYSCALL_BIT + 97;
                                                pub const SYS_getrusage: c_long = __X32_SYSCALL_BIT + 98;
                                                pub const SYS_sysinfo: c_long = __X32_SYSCALL_BIT + 99;
                                                pub const SYS_times: c_long = __X32_SYSCALL_BIT + 100;
                                                pub const SYS_getuid: c_long = __X32_SYSCALL_BIT + 102;
                                                pub const SYS_syslog: c_long = __X32_SYSCALL_BIT + 103;
                                                pub const SYS_getgid: c_long = __X32_SYSCALL_BIT + 104;
                                                pub const SYS_setuid: c_long = __X32_SYSCALL_BIT + 105;
                                                pub const SYS_setgid: c_long = __X32_SYSCALL_BIT + 106;
                                                pub const SYS_geteuid: c_long = __X32_SYSCALL_BIT + 107;
                                                pub const SYS_getegid: c_long = __X32_SYSCALL_BIT + 108;
                                                pub const SYS_setpgid: c_long = __X32_SYSCALL_BIT + 109;
                                                pub const SYS_getppid: c_long = __X32_SYSCALL_BIT + 110;
                                                pub const SYS_getpgrp: c_long = __X32_SYSCALL_BIT + 111;
                                                pub const SYS_setsid: c_long = __X32_SYSCALL_BIT + 112;
                                                pub const SYS_setreuid: c_long = __X32_SYSCALL_BIT + 113;
                                                pub const SYS_setregid: c_long = __X32_SYSCALL_BIT + 114;
                                                pub const SYS_getgroups: c_long = __X32_SYSCALL_BIT + 115;
                                                pub const SYS_setgroups: c_long = __X32_SYSCALL_BIT + 116;
                                                pub const SYS_setresuid: c_long = __X32_SYSCALL_BIT + 117;
                                                pub const SYS_getresuid: c_long = __X32_SYSCALL_BIT + 118;
                                                pub const SYS_setresgid: c_long = __X32_SYSCALL_BIT + 119;
                                                pub const SYS_getresgid: c_long = __X32_SYSCALL_BIT + 120;
                                                pub const SYS_getpgid: c_long = __X32_SYSCALL_BIT + 121;
                                                pub const SYS_setfsuid: c_long = __X32_SYSCALL_BIT + 122;
                                                pub const SYS_setfsgid: c_long = __X32_SYSCALL_BIT + 123;
                                                pub const SYS_getsid: c_long = __X32_SYSCALL_BIT + 124;
                                                pub const SYS_capget: c_long = __X32_SYSCALL_BIT + 125;
                                                pub const SYS_capset: c_long = __X32_SYSCALL_BIT + 126;
                                                pub const SYS_rt_sigsuspend: c_long = __X32_SYSCALL_BIT + 130;
                                                pub const SYS_utime: c_long = __X32_SYSCALL_BIT + 132;
                                                pub const SYS_mknod: c_long = __X32_SYSCALL_BIT + 133;
                                                pub const SYS_personality: c_long = __X32_SYSCALL_BIT + 135;
                                                pub const SYS_ustat: c_long = __X32_SYSCALL_BIT + 136;
                                                pub const SYS_statfs: c_long = __X32_SYSCALL_BIT + 137;
                                                pub const SYS_fstatfs: c_long = __X32_SYSCALL_BIT + 138;
                                                pub const SYS_sysfs: c_long = __X32_SYSCALL_BIT + 139;
                                                pub const SYS_getpriority: c_long = __X32_SYSCALL_BIT + 140;
                                                pub const SYS_setpriority: c_long = __X32_SYSCALL_BIT + 141;
                                                pub const SYS_sched_setparam: c_long = __X32_SYSCALL_BIT + 142;
                                                pub const SYS_sched_getparam: c_long = __X32_SYSCALL_BIT + 143;
                                                pub const SYS_sched_setscheduler: c_long = __X32_SYSCALL_BIT + 144;
                                                pub const SYS_sched_getscheduler: c_long = __X32_SYSCALL_BIT + 145;
                                                pub const SYS_sched_get_priority_max: c_long = __X32_SYSCALL_BIT + 146;
                                                pub const SYS_sched_get_priority_min: c_long = __X32_SYSCALL_BIT + 147;
                                                pub const SYS_sched_rr_get_interval: c_long = __X32_SYSCALL_BIT + 148;
                                                pub const SYS_mlock: c_long = __X32_SYSCALL_BIT + 149;
                                                pub const SYS_munlock: c_long = __X32_SYSCALL_BIT + 150;
                                                pub const SYS_mlockall: c_long = __X32_SYSCALL_BIT + 151;
                                                pub const SYS_munlockall: c_long = __X32_SYSCALL_BIT + 152;
                                                pub const SYS_vhangup: c_long = __X32_SYSCALL_BIT + 153;
                                                pub const SYS_modify_ldt: c_long = __X32_SYSCALL_BIT + 154;
                                                pub const SYS_pivot_root: c_long = __X32_SYSCALL_BIT + 155;
                                                pub const SYS_prctl: c_long = __X32_SYSCALL_BIT + 157;
                                                pub const SYS_arch_prctl: c_long = __X32_SYSCALL_BIT + 158;
                                                pub const SYS_adjtimex: c_long = __X32_SYSCALL_BIT + 159;
                                                pub const SYS_setrlimit: c_long = __X32_SYSCALL_BIT + 160;
                                                pub const SYS_chroot: c_long = __X32_SYSCALL_BIT + 161;
                                                pub const SYS_sync: c_long = __X32_SYSCALL_BIT + 162;
                                                pub const SYS_acct: c_long = __X32_SYSCALL_BIT + 163;
                                                pub const SYS_settimeofday: c_long = __X32_SYSCALL_BIT + 164;
                                                pub const SYS_mount: c_long = __X32_SYSCALL_BIT + 165;
                                                pub const SYS_umount2: c_long = __X32_SYSCALL_BIT + 166;
                                                pub const SYS_swapon: c_long = __X32_SYSCALL_BIT + 167;
                                                pub const SYS_swapoff: c_long = __X32_SYSCALL_BIT + 168;
                                                pub const SYS_reboot: c_long = __X32_SYSCALL_BIT + 169;
                                                pub const SYS_sethostname: c_long = __X32_SYSCALL_BIT + 170;
                                                pub const SYS_setdomainname: c_long = __X32_SYSCALL_BIT + 171;
                                                pub const SYS_iopl: c_long = __X32_SYSCALL_BIT + 172;
                                                pub const SYS_ioperm: c_long = __X32_SYSCALL_BIT + 173;
                                                pub const SYS_init_module: c_long = __X32_SYSCALL_BIT + 175;
                                                pub const SYS_delete_module: c_long = __X32_SYSCALL_BIT + 176;
                                                pub const SYS_quotactl: c_long = __X32_SYSCALL_BIT + 179;
                                                pub const SYS_getpmsg: c_long = __X32_SYSCALL_BIT + 181;
                                                pub const SYS_putpmsg: c_long = __X32_SYSCALL_BIT + 182;
                                                pub const SYS_afs_syscall: c_long = __X32_SYSCALL_BIT + 183;
                                                pub const SYS_tuxcall: c_long = __X32_SYSCALL_BIT + 184;
                                                pub const SYS_security: c_long = __X32_SYSCALL_BIT + 185;
                                                pub const SYS_gettid: c_long = __X32_SYSCALL_BIT + 186;
                                                pub const SYS_readahead: c_long = __X32_SYSCALL_BIT + 187;
                                                pub const SYS_setxattr: c_long = __X32_SYSCALL_BIT + 188;
                                                pub const SYS_lsetxattr: c_long = __X32_SYSCALL_BIT + 189;
                                                pub const SYS_fsetxattr: c_long = __X32_SYSCALL_BIT + 190;
                                                pub const SYS_getxattr: c_long = __X32_SYSCALL_BIT + 191;
                                                pub const SYS_lgetxattr: c_long = __X32_SYSCALL_BIT + 192;
                                                pub const SYS_fgetxattr: c_long = __X32_SYSCALL_BIT + 193;
                                                pub const SYS_listxattr: c_long = __X32_SYSCALL_BIT + 194;
                                                pub const SYS_llistxattr: c_long = __X32_SYSCALL_BIT + 195;
                                                pub const SYS_flistxattr: c_long = __X32_SYSCALL_BIT + 196;
                                                pub const SYS_removexattr: c_long = __X32_SYSCALL_BIT + 197;
                                                pub const SYS_lremovexattr: c_long = __X32_SYSCALL_BIT + 198;
                                                pub const SYS_fremovexattr: c_long = __X32_SYSCALL_BIT + 199;
                                                pub const SYS_tkill: c_long = __X32_SYSCALL_BIT + 200;
                                                pub const SYS_time: c_long = __X32_SYSCALL_BIT + 201;
                                                pub const SYS_futex: c_long = __X32_SYSCALL_BIT + 202;
                                                pub const SYS_sched_setaffinity: c_long = __X32_SYSCALL_BIT + 203;
                                                pub const SYS_sched_getaffinity: c_long = __X32_SYSCALL_BIT + 204;
                                                pub const SYS_io_destroy: c_long = __X32_SYSCALL_BIT + 207;
                                                pub const SYS_io_getevents: c_long = __X32_SYSCALL_BIT + 208;
                                                pub const SYS_io_cancel: c_long = __X32_SYSCALL_BIT + 210;
                                                pub const SYS_lookup_dcookie: c_long = __X32_SYSCALL_BIT + 212;
                                                pub const SYS_epoll_create: c_long = __X32_SYSCALL_BIT + 213;
                                                pub const SYS_remap_file_pages: c_long = __X32_SYSCALL_BIT + 216;
                                                pub const SYS_getdents64: c_long = __X32_SYSCALL_BIT + 217;
                                                pub const SYS_set_tid_address: c_long = __X32_SYSCALL_BIT + 218;
                                                pub const SYS_restart_syscall: c_long = __X32_SYSCALL_BIT + 219;
                                                pub const SYS_semtimedop: c_long = __X32_SYSCALL_BIT + 220;
                                                pub const SYS_fadvise64: c_long = __X32_SYSCALL_BIT + 221;
                                                pub const SYS_timer_settime: c_long = __X32_SYSCALL_BIT + 223;
                                                pub const SYS_timer_gettime: c_long = __X32_SYSCALL_BIT + 224;
                                                pub const SYS_timer_getoverrun: c_long = __X32_SYSCALL_BIT + 225;
                                                pub const SYS_timer_delete: c_long = __X32_SYSCALL_BIT + 226;
                                                pub const SYS_clock_settime: c_long = __X32_SYSCALL_BIT + 227;
                                                pub const SYS_clock_gettime: c_long = __X32_SYSCALL_BIT + 228;
                                                pub const SYS_clock_getres: c_long = __X32_SYSCALL_BIT + 229;
                                                pub const SYS_clock_nanosleep: c_long = __X32_SYSCALL_BIT + 230;
                                                pub const SYS_exit_group: c_long = __X32_SYSCALL_BIT + 231;
                                                pub const SYS_epoll_wait: c_long = __X32_SYSCALL_BIT + 232;
                                                pub const SYS_epoll_ctl: c_long = __X32_SYSCALL_BIT + 233;
                                                pub const SYS_tgkill: c_long = __X32_SYSCALL_BIT + 234;
                                                pub const SYS_utimes: c_long = __X32_SYSCALL_BIT + 235;
                                                pub const SYS_mbind: c_long = __X32_SYSCALL_BIT + 237;
                                                pub const SYS_set_mempolicy: c_long = __X32_SYSCALL_BIT + 238;
                                                pub const SYS_get_mempolicy: c_long = __X32_SYSCALL_BIT + 239;
                                                pub const SYS_mq_open: c_long = __X32_SYSCALL_BIT + 240;
                                                pub const SYS_mq_unlink: c_long = __X32_SYSCALL_BIT + 241;
                                                pub const SYS_mq_timedsend: c_long = __X32_SYSCALL_BIT + 242;
                                                pub const SYS_mq_timedreceive: c_long = __X32_SYSCALL_BIT + 243;
                                                pub const SYS_mq_getsetattr: c_long = __X32_SYSCALL_BIT + 245;
                                                pub const SYS_add_key: c_long = __X32_SYSCALL_BIT + 248;
                                                pub const SYS_request_key: c_long = __X32_SYSCALL_BIT + 249;
                                                pub const SYS_keyctl: c_long = __X32_SYSCALL_BIT + 250;
                                                pub const SYS_ioprio_set: c_long = __X32_SYSCALL_BIT + 251;
                                                pub const SYS_ioprio_get: c_long = __X32_SYSCALL_BIT + 252;
                                                pub const SYS_inotify_init: c_long = __X32_SYSCALL_BIT + 253;
                                                pub const SYS_inotify_add_watch: c_long = __X32_SYSCALL_BIT + 254;
                                                pub const SYS_inotify_rm_watch: c_long = __X32_SYSCALL_BIT + 255;
                                                pub const SYS_migrate_pages: c_long = __X32_SYSCALL_BIT + 256;
                                                pub const SYS_openat: c_long = __X32_SYSCALL_BIT + 257;
                                                pub const SYS_mkdirat: c_long = __X32_SYSCALL_BIT + 258;
                                                pub const SYS_mknodat: c_long = __X32_SYSCALL_BIT + 259;
                                                pub const SYS_fchownat: c_long = __X32_SYSCALL_BIT + 260;
                                                pub const SYS_futimesat: c_long = __X32_SYSCALL_BIT + 261;
                                                pub const SYS_newfstatat: c_long = __X32_SYSCALL_BIT + 262;
                                                pub const SYS_unlinkat: c_long = __X32_SYSCALL_BIT + 263;
                                                pub const SYS_renameat: c_long = __X32_SYSCALL_BIT + 264;
                                                pub const SYS_linkat: c_long = __X32_SYSCALL_BIT + 265;
                                                pub const SYS_symlinkat: c_long = __X32_SYSCALL_BIT + 266;
                                                pub const SYS_readlinkat: c_long = __X32_SYSCALL_BIT + 267;
                                                pub const SYS_fchmodat: c_long = __X32_SYSCALL_BIT + 268;
                                                pub const SYS_faccessat: c_long = __X32_SYSCALL_BIT + 269;
                                                pub const SYS_pselect6: c_long = __X32_SYSCALL_BIT + 270;
                                                pub const SYS_ppoll: c_long = __X32_SYSCALL_BIT + 271;
                                                pub const SYS_unshare: c_long = __X32_SYSCALL_BIT + 272;
                                                pub const SYS_splice: c_long = __X32_SYSCALL_BIT + 275;
                                                pub const SYS_tee: c_long = __X32_SYSCALL_BIT + 276;
                                                pub const SYS_sync_file_range: c_long = __X32_SYSCALL_BIT + 277;
                                                pub const SYS_utimensat: c_long = __X32_SYSCALL_BIT + 280;
                                                pub const SYS_epoll_pwait: c_long = __X32_SYSCALL_BIT + 281;
                                                pub const SYS_signalfd: c_long = __X32_SYSCALL_BIT + 282;
                                                pub const SYS_timerfd_create: c_long = __X32_SYSCALL_BIT + 283;
                                                pub const SYS_eventfd: c_long = __X32_SYSCALL_BIT + 284;
                                                pub const SYS_fallocate: c_long = __X32_SYSCALL_BIT + 285;
                                                pub const SYS_timerfd_settime: c_long = __X32_SYSCALL_BIT + 286;
                                                pub const SYS_timerfd_gettime: c_long = __X32_SYSCALL_BIT + 287;
                                                pub const SYS_accept4: c_long = __X32_SYSCALL_BIT + 288;
                                                pub const SYS_signalfd4: c_long = __X32_SYSCALL_BIT + 289;
                                                pub const SYS_eventfd2: c_long = __X32_SYSCALL_BIT + 290;
                                                pub const SYS_epoll_create1: c_long = __X32_SYSCALL_BIT + 291;
                                                pub const SYS_dup3: c_long = __X32_SYSCALL_BIT + 292;
                                                pub const SYS_pipe2: c_long = __X32_SYSCALL_BIT + 293;
                                                pub const SYS_inotify_init1: c_long = __X32_SYSCALL_BIT + 294;
                                                pub const SYS_perf_event_open: c_long = __X32_SYSCALL_BIT + 298;
                                                pub const SYS_fanotify_init: c_long = __X32_SYSCALL_BIT + 300;
                                                pub const SYS_fanotify_mark: c_long = __X32_SYSCALL_BIT + 301;
                                                pub const SYS_prlimit64: c_long = __X32_SYSCALL_BIT + 302;
                                                pub const SYS_name_to_handle_at: c_long = __X32_SYSCALL_BIT + 303;
                                                pub const SYS_open_by_handle_at: c_long = __X32_SYSCALL_BIT + 304;
                                                pub const SYS_clock_adjtime: c_long = __X32_SYSCALL_BIT + 305;
                                                pub const SYS_syncfs: c_long = __X32_SYSCALL_BIT + 306;
                                                pub const SYS_setns: c_long = __X32_SYSCALL_BIT + 308;
                                                pub const SYS_getcpu: c_long = __X32_SYSCALL_BIT + 309;
                                                pub const SYS_kcmp: c_long = __X32_SYSCALL_BIT + 312;
                                                pub const SYS_finit_module: c_long = __X32_SYSCALL_BIT + 313;
                                                pub const SYS_sched_setattr: c_long = __X32_SYSCALL_BIT + 314;
                                                pub const SYS_sched_getattr: c_long = __X32_SYSCALL_BIT + 315;
                                                pub const SYS_renameat2: c_long = __X32_SYSCALL_BIT + 316;
                                                pub const SYS_seccomp: c_long = __X32_SYSCALL_BIT + 317;
                                                pub const SYS_getrandom: c_long = __X32_SYSCALL_BIT + 318;
                                                pub const SYS_memfd_create: c_long = __X32_SYSCALL_BIT + 319;
                                                pub const SYS_kexec_file_load: c_long = __X32_SYSCALL_BIT + 320;
                                                pub const SYS_bpf: c_long = __X32_SYSCALL_BIT + 321;
                                                pub const SYS_userfaultfd: c_long = __X32_SYSCALL_BIT + 323;
                                                pub const SYS_membarrier: c_long = __X32_SYSCALL_BIT + 324;
                                                pub const SYS_mlock2: c_long = __X32_SYSCALL_BIT + 325;
                                                pub const SYS_copy_file_range: c_long = __X32_SYSCALL_BIT + 326;
                                                pub const SYS_pkey_mprotect: c_long = __X32_SYSCALL_BIT + 329;
                                                pub const SYS_pkey_alloc: c_long = __X32_SYSCALL_BIT + 330;
                                                pub const SYS_pkey_free: c_long = __X32_SYSCALL_BIT + 331;
                                                pub const SYS_statx: c_long = __X32_SYSCALL_BIT + 332;
                                                pub const SYS_rseq: c_long = __X32_SYSCALL_BIT + 334;
                                                pub const SYS_pidfd_send_signal: c_long = __X32_SYSCALL_BIT + 424;
                                                pub const SYS_io_uring_setup: c_long = __X32_SYSCALL_BIT + 425;
                                                pub const SYS_io_uring_enter: c_long = __X32_SYSCALL_BIT + 426;
                                                pub const SYS_io_uring_register: c_long = __X32_SYSCALL_BIT + 427;
                                                pub const SYS_open_tree: c_long = __X32_SYSCALL_BIT + 428;
                                                pub const SYS_move_mount: c_long = __X32_SYSCALL_BIT + 429;
                                                pub const SYS_fsopen: c_long = __X32_SYSCALL_BIT + 430;
                                                pub const SYS_fsconfig: c_long = __X32_SYSCALL_BIT + 431;
                                                pub const SYS_fsmount: c_long = __X32_SYSCALL_BIT + 432;
                                                pub const SYS_fspick: c_long = __X32_SYSCALL_BIT + 433;
                                                pub const SYS_pidfd_open: c_long = __X32_SYSCALL_BIT + 434;
                                                pub const SYS_clone3: c_long = __X32_SYSCALL_BIT + 435;
                                                pub const SYS_close_range: c_long = __X32_SYSCALL_BIT + 436;
                                                pub const SYS_openat2: c_long = __X32_SYSCALL_BIT + 437;
                                                pub const SYS_pidfd_getfd: c_long = __X32_SYSCALL_BIT + 438;
                                                pub const SYS_faccessat2: c_long = __X32_SYSCALL_BIT + 439;
                                                pub const SYS_process_madvise: c_long = __X32_SYSCALL_BIT + 440;
                                                pub const SYS_epoll_pwait2: c_long = __X32_SYSCALL_BIT + 441;
                                                pub const SYS_mount_setattr: c_long = __X32_SYSCALL_BIT + 442;
                                                pub const SYS_quotactl_fd: c_long = __X32_SYSCALL_BIT + 443;
                                                pub const SYS_landlock_create_ruleset: c_long = __X32_SYSCALL_BIT + 444;
                                                pub const SYS_landlock_add_rule: c_long = __X32_SYSCALL_BIT + 445;
                                                pub const SYS_landlock_restrict_self: c_long = __X32_SYSCALL_BIT + 446;
                                                pub const SYS_memfd_secret: c_long = __X32_SYSCALL_BIT + 447;
                                                pub const SYS_process_mrelease: c_long = __X32_SYSCALL_BIT + 448;
                                                pub const SYS_futex_waitv: c_long = __X32_SYSCALL_BIT + 449;
                                                pub const SYS_set_mempolicy_home_node: c_long = __X32_SYSCALL_BIT + 450;
                                                pub const SYS_fchmodat2: c_long = __X32_SYSCALL_BIT + 452;
                                                pub const SYS_rt_sigaction: c_long = __X32_SYSCALL_BIT + 512;
                                                pub const SYS_rt_sigreturn: c_long = __X32_SYSCALL_BIT + 513;
                                                pub const SYS_ioctl: c_long = __X32_SYSCALL_BIT + 514;
                                                pub const SYS_readv: c_long = __X32_SYSCALL_BIT + 515;
                                                pub const SYS_writev: c_long = __X32_SYSCALL_BIT + 516;
                                                pub const SYS_recvfrom: c_long = __X32_SYSCALL_BIT + 517;
                                                pub const SYS_sendmsg: c_long = __X32_SYSCALL_BIT + 518;
                                                pub const SYS_recvmsg: c_long = __X32_SYSCALL_BIT + 519;
                                                pub const SYS_execve: c_long = __X32_SYSCALL_BIT + 520;
                                                pub const SYS_ptrace: c_long = __X32_SYSCALL_BIT + 521;
                                                pub const SYS_rt_sigpending: c_long = __X32_SYSCALL_BIT + 522;
                                                pub const SYS_rt_sigtimedwait: c_long = __X32_SYSCALL_BIT + 523;
                                                pub const SYS_rt_sigqueueinfo: c_long = __X32_SYSCALL_BIT + 524;
                                                pub const SYS_sigaltstack: c_long = __X32_SYSCALL_BIT + 525;
                                                pub const SYS_timer_create: c_long = __X32_SYSCALL_BIT + 526;
                                                pub const SYS_mq_notify: c_long = __X32_SYSCALL_BIT + 527;
                                                pub const SYS_kexec_load: c_long = __X32_SYSCALL_BIT + 528;
                                                pub const SYS_waitid: c_long = __X32_SYSCALL_BIT + 529;
                                                pub const SYS_set_robust_list: c_long = __X32_SYSCALL_BIT + 530;
                                                pub const SYS_get_robust_list: c_long = __X32_SYSCALL_BIT + 531;
                                                pub const SYS_vmsplice: c_long = __X32_SYSCALL_BIT + 532;
                                                pub const SYS_move_pages: c_long = __X32_SYSCALL_BIT + 533;
                                                pub const SYS_preadv: c_long = __X32_SYSCALL_BIT + 534;
                                                pub const SYS_pwritev: c_long = __X32_SYSCALL_BIT + 535;
                                                pub const SYS_rt_tgsigqueueinfo: c_long = __X32_SYSCALL_BIT + 536;
                                                pub const SYS_recvmmsg: c_long = __X32_SYSCALL_BIT + 537;
                                                pub const SYS_sendmmsg: c_long = __X32_SYSCALL_BIT + 538;
                                                pub const SYS_process_vm_readv: c_long = __X32_SYSCALL_BIT + 539;
                                                pub const SYS_process_vm_writev: c_long = __X32_SYSCALL_BIT + 540;
                                                pub const SYS_setsockopt: c_long = __X32_SYSCALL_BIT + 541;
                                                pub const SYS_getsockopt: c_long = __X32_SYSCALL_BIT + 542;
                                                pub const SYS_io_setup: c_long = __X32_SYSCALL_BIT + 543;
                                                pub const SYS_io_submit: c_long = __X32_SYSCALL_BIT + 544;
                                                pub const SYS_execveat: c_long = __X32_SYSCALL_BIT + 545;
                                                pub const SYS_preadv2: c_long = __X32_SYSCALL_BIT + 546;
                                                pub const SYS_pwritev2: c_long = __X32_SYSCALL_BIT + 547;
                                            } pub use self::x32::*;
                                        }
                                        
                                        else
                                        {
                                            mod not_x32
                                            {
                                                use ::libc::*;

                                                s!
                                                {
                                                    pub struct statvfs
                                                    {
                                                        pub f_bsize: c_ulong,
                                                        pub f_frsize: c_ulong,
                                                        pub f_blocks: fsblkcnt_t,
                                                        pub f_bfree: fsblkcnt_t,
                                                        pub f_bavail: fsblkcnt_t,
                                                        pub f_files: fsfilcnt_t,
                                                        pub f_ffree: fsfilcnt_t,
                                                        pub f_favail: fsfilcnt_t,
                                                        pub f_fsid: c_ulong,
                                                        pub f_flag: c_ulong,
                                                        pub f_namemax: c_ulong,
                                                        __f_spare: [c_int; 6],
                                                    }
                                                }

                                                pub const __SIZEOF_PTHREAD_MUTEX_T: usize = 40;
                                                pub const __SIZEOF_PTHREAD_RWLOCK_T: usize = 56;
                                                pub const __SIZEOF_PTHREAD_BARRIER_T: usize = 32;

                                                #[cfg(target_endian = "little")]
                                                pub const PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = 
                                                pthread_mutex_t
                                                {
                                                    size:
                                                    [
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    ],
                                                };

                                                #[cfg(target_endian = "little")]
                                                pub const PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP: pthread_mutex_t = 
                                                pthread_mutex_t
                                                {
                                                    size:
                                                    [
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    ],
                                                };

                                                #[cfg(target_endian = "little")]
                                                pub const PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = 
                                                pthread_mutex_t
                                                {
                                                    size:
                                                    [
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    ],
                                                };

                                                #[cfg(target_endian = "big")]
                                                pub const PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = 
                                                pthread_mutex_t
                                                {
                                                    size:
                                                    [
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    ],
                                                };

                                                #[cfg(target_endian = "big")]
                                                pub const PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP: pthread_mutex_t = 
                                                pthread_mutex_t
                                                {
                                                    size:
                                                    [
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    ],
                                                };

                                                #[cfg(target_endian = "big")]
                                                pub const PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP: pthread_mutex_t = 
                                                pthread_mutex_t
                                                {
                                                    size:
                                                    [
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    ],
                                                };
                                                
                                                pub const SYS_read: c_long = 0;
                                                pub const SYS_write: c_long = 1;
                                                pub const SYS_open: c_long = 2;
                                                pub const SYS_close: c_long = 3;
                                                pub const SYS_stat: c_long = 4;
                                                pub const SYS_fstat: c_long = 5;
                                                pub const SYS_lstat: c_long = 6;
                                                pub const SYS_poll: c_long = 7;
                                                pub const SYS_lseek: c_long = 8;
                                                pub const SYS_mmap: c_long = 9;
                                                pub const SYS_mprotect: c_long = 10;
                                                pub const SYS_munmap: c_long = 11;
                                                pub const SYS_brk: c_long = 12;
                                                pub const SYS_rt_sigaction: c_long = 13;
                                                pub const SYS_rt_sigprocmask: c_long = 14;
                                                pub const SYS_rt_sigreturn: c_long = 15;
                                                pub const SYS_ioctl: c_long = 16;
                                                pub const SYS_pread64: c_long = 17;
                                                pub const SYS_pwrite64: c_long = 18;
                                                pub const SYS_readv: c_long = 19;
                                                pub const SYS_writev: c_long = 20;
                                                pub const SYS_access: c_long = 21;
                                                pub const SYS_pipe: c_long = 22;
                                                pub const SYS_select: c_long = 23;
                                                pub const SYS_sched_yield: c_long = 24;
                                                pub const SYS_mremap: c_long = 25;
                                                pub const SYS_msync: c_long = 26;
                                                pub const SYS_mincore: c_long = 27;
                                                pub const SYS_madvise: c_long = 28;
                                                pub const SYS_shmget: c_long = 29;
                                                pub const SYS_shmat: c_long = 30;
                                                pub const SYS_shmctl: c_long = 31;
                                                pub const SYS_dup: c_long = 32;
                                                pub const SYS_dup2: c_long = 33;
                                                pub const SYS_pause: c_long = 34;
                                                pub const SYS_nanosleep: c_long = 35;
                                                pub const SYS_getitimer: c_long = 36;
                                                pub const SYS_alarm: c_long = 37;
                                                pub const SYS_setitimer: c_long = 38;
                                                pub const SYS_getpid: c_long = 39;
                                                pub const SYS_sendfile: c_long = 40;
                                                pub const SYS_socket: c_long = 41;
                                                pub const SYS_connect: c_long = 42;
                                                pub const SYS_accept: c_long = 43;
                                                pub const SYS_sendto: c_long = 44;
                                                pub const SYS_recvfrom: c_long = 45;
                                                pub const SYS_sendmsg: c_long = 46;
                                                pub const SYS_recvmsg: c_long = 47;
                                                pub const SYS_shutdown: c_long = 48;
                                                pub const SYS_bind: c_long = 49;
                                                pub const SYS_listen: c_long = 50;
                                                pub const SYS_getsockname: c_long = 51;
                                                pub const SYS_getpeername: c_long = 52;
                                                pub const SYS_socketpair: c_long = 53;
                                                pub const SYS_setsockopt: c_long = 54;
                                                pub const SYS_getsockopt: c_long = 55;
                                                pub const SYS_clone: c_long = 56;
                                                pub const SYS_fork: c_long = 57;
                                                pub const SYS_vfork: c_long = 58;
                                                pub const SYS_execve: c_long = 59;
                                                pub const SYS_exit: c_long = 60;
                                                pub const SYS_wait4: c_long = 61;
                                                pub const SYS_kill: c_long = 62;
                                                pub const SYS_uname: c_long = 63;
                                                pub const SYS_semget: c_long = 64;
                                                pub const SYS_semop: c_long = 65;
                                                pub const SYS_semctl: c_long = 66;
                                                pub const SYS_shmdt: c_long = 67;
                                                pub const SYS_msgget: c_long = 68;
                                                pub const SYS_msgsnd: c_long = 69;
                                                pub const SYS_msgrcv: c_long = 70;
                                                pub const SYS_msgctl: c_long = 71;
                                                pub const SYS_fcntl: c_long = 72;
                                                pub const SYS_flock: c_long = 73;
                                                pub const SYS_fsync: c_long = 74;
                                                pub const SYS_fdatasync: c_long = 75;
                                                pub const SYS_truncate: c_long = 76;
                                                pub const SYS_ftruncate: c_long = 77;
                                                pub const SYS_getdents: c_long = 78;
                                                pub const SYS_getcwd: c_long = 79;
                                                pub const SYS_chdir: c_long = 80;
                                                pub const SYS_fchdir: c_long = 81;
                                                pub const SYS_rename: c_long = 82;
                                                pub const SYS_mkdir: c_long = 83;
                                                pub const SYS_rmdir: c_long = 84;
                                                pub const SYS_creat: c_long = 85;
                                                pub const SYS_link: c_long = 86;
                                                pub const SYS_unlink: c_long = 87;
                                                pub const SYS_symlink: c_long = 88;
                                                pub const SYS_readlink: c_long = 89;
                                                pub const SYS_chmod: c_long = 90;
                                                pub const SYS_fchmod: c_long = 91;
                                                pub const SYS_chown: c_long = 92;
                                                pub const SYS_fchown: c_long = 93;
                                                pub const SYS_lchown: c_long = 94;
                                                pub const SYS_umask: c_long = 95;
                                                pub const SYS_gettimeofday: c_long = 96;
                                                pub const SYS_getrlimit: c_long = 97;
                                                pub const SYS_getrusage: c_long = 98;
                                                pub const SYS_sysinfo: c_long = 99;
                                                pub const SYS_times: c_long = 100;
                                                pub const SYS_ptrace: c_long = 101;
                                                pub const SYS_getuid: c_long = 102;
                                                pub const SYS_syslog: c_long = 103;
                                                pub const SYS_getgid: c_long = 104;
                                                pub const SYS_setuid: c_long = 105;
                                                pub const SYS_setgid: c_long = 106;
                                                pub const SYS_geteuid: c_long = 107;
                                                pub const SYS_getegid: c_long = 108;
                                                pub const SYS_setpgid: c_long = 109;
                                                pub const SYS_getppid: c_long = 110;
                                                pub const SYS_getpgrp: c_long = 111;
                                                pub const SYS_setsid: c_long = 112;
                                                pub const SYS_setreuid: c_long = 113;
                                                pub const SYS_setregid: c_long = 114;
                                                pub const SYS_getgroups: c_long = 115;
                                                pub const SYS_setgroups: c_long = 116;
                                                pub const SYS_setresuid: c_long = 117;
                                                pub const SYS_getresuid: c_long = 118;
                                                pub const SYS_setresgid: c_long = 119;
                                                pub const SYS_getresgid: c_long = 120;
                                                pub const SYS_getpgid: c_long = 121;
                                                pub const SYS_setfsuid: c_long = 122;
                                                pub const SYS_setfsgid: c_long = 123;
                                                pub const SYS_getsid: c_long = 124;
                                                pub const SYS_capget: c_long = 125;
                                                pub const SYS_capset: c_long = 126;
                                                pub const SYS_rt_sigpending: c_long = 127;
                                                pub const SYS_rt_sigtimedwait: c_long = 128;
                                                pub const SYS_rt_sigqueueinfo: c_long = 129;
                                                pub const SYS_rt_sigsuspend: c_long = 130;
                                                pub const SYS_sigaltstack: c_long = 131;
                                                pub const SYS_utime: c_long = 132;
                                                pub const SYS_mknod: c_long = 133;
                                                pub const SYS_uselib: c_long = 134;
                                                pub const SYS_personality: c_long = 135;
                                                pub const SYS_ustat: c_long = 136;
                                                pub const SYS_statfs: c_long = 137;
                                                pub const SYS_fstatfs: c_long = 138;
                                                pub const SYS_sysfs: c_long = 139;
                                                pub const SYS_getpriority: c_long = 140;
                                                pub const SYS_setpriority: c_long = 141;
                                                pub const SYS_sched_setparam: c_long = 142;
                                                pub const SYS_sched_getparam: c_long = 143;
                                                pub const SYS_sched_setscheduler: c_long = 144;
                                                pub const SYS_sched_getscheduler: c_long = 145;
                                                pub const SYS_sched_get_priority_max: c_long = 146;
                                                pub const SYS_sched_get_priority_min: c_long = 147;
                                                pub const SYS_sched_rr_get_interval: c_long = 148;
                                                pub const SYS_mlock: c_long = 149;
                                                pub const SYS_munlock: c_long = 150;
                                                pub const SYS_mlockall: c_long = 151;
                                                pub const SYS_munlockall: c_long = 152;
                                                pub const SYS_vhangup: c_long = 153;
                                                pub const SYS_modify_ldt: c_long = 154;
                                                pub const SYS_pivot_root: c_long = 155;
                                                pub const SYS__sysctl: c_long = 156;
                                                pub const SYS_prctl: c_long = 157;
                                                pub const SYS_arch_prctl: c_long = 158;
                                                pub const SYS_adjtimex: c_long = 159;
                                                pub const SYS_setrlimit: c_long = 160;
                                                pub const SYS_chroot: c_long = 161;
                                                pub const SYS_sync: c_long = 162;
                                                pub const SYS_acct: c_long = 163;
                                                pub const SYS_settimeofday: c_long = 164;
                                                pub const SYS_mount: c_long = 165;
                                                pub const SYS_umount2: c_long = 166;
                                                pub const SYS_swapon: c_long = 167;
                                                pub const SYS_swapoff: c_long = 168;
                                                pub const SYS_reboot: c_long = 169;
                                                pub const SYS_sethostname: c_long = 170;
                                                pub const SYS_setdomainname: c_long = 171;
                                                pub const SYS_iopl: c_long = 172;
                                                pub const SYS_ioperm: c_long = 173;
                                                #[deprecated(since = "0.2.70", note = "Functional up to 2.6 kernel")]
                                                pub const SYS_create_module: c_long = 174;
                                                pub const SYS_init_module: c_long = 175;
                                                pub const SYS_delete_module: c_long = 176;
                                                #[deprecated(since = "0.2.70", note = "Functional up to 2.6 kernel")]
                                                pub const SYS_get_kernel_syms: c_long = 177;
                                                #[deprecated(since = "0.2.70", note = "Functional up to 2.6 kernel")]
                                                pub const SYS_query_module: c_long = 178;
                                                pub const SYS_quotactl: c_long = 179;
                                                pub const SYS_nfsservctl: c_long = 180;
                                                pub const SYS_getpmsg: c_long = 181;
                                                pub const SYS_putpmsg: c_long = 182;
                                                pub const SYS_afs_syscall: c_long = 183;
                                                pub const SYS_tuxcall: c_long = 184;
                                                pub const SYS_security: c_long = 185;
                                                pub const SYS_gettid: c_long = 186;
                                                pub const SYS_readahead: c_long = 187;
                                                pub const SYS_setxattr: c_long = 188;
                                                pub const SYS_lsetxattr: c_long = 189;
                                                pub const SYS_fsetxattr: c_long = 190;
                                                pub const SYS_getxattr: c_long = 191;
                                                pub const SYS_lgetxattr: c_long = 192;
                                                pub const SYS_fgetxattr: c_long = 193;
                                                pub const SYS_listxattr: c_long = 194;
                                                pub const SYS_llistxattr: c_long = 195;
                                                pub const SYS_flistxattr: c_long = 196;
                                                pub const SYS_removexattr: c_long = 197;
                                                pub const SYS_lremovexattr: c_long = 198;
                                                pub const SYS_fremovexattr: c_long = 199;
                                                pub const SYS_tkill: c_long = 200;
                                                pub const SYS_time: c_long = 201;
                                                pub const SYS_futex: c_long = 202;
                                                pub const SYS_sched_setaffinity: c_long = 203;
                                                pub const SYS_sched_getaffinity: c_long = 204;
                                                pub const SYS_set_thread_area: c_long = 205;
                                                pub const SYS_io_setup: c_long = 206;
                                                pub const SYS_io_destroy: c_long = 207;
                                                pub const SYS_io_getevents: c_long = 208;
                                                pub const SYS_io_submit: c_long = 209;
                                                pub const SYS_io_cancel: c_long = 210;
                                                pub const SYS_get_thread_area: c_long = 211;
                                                pub const SYS_lookup_dcookie: c_long = 212;
                                                pub const SYS_epoll_create: c_long = 213;
                                                pub const SYS_epoll_ctl_old: c_long = 214;
                                                pub const SYS_epoll_wait_old: c_long = 215;
                                                pub const SYS_remap_file_pages: c_long = 216;
                                                pub const SYS_getdents64: c_long = 217;
                                                pub const SYS_set_tid_address: c_long = 218;
                                                pub const SYS_restart_syscall: c_long = 219;
                                                pub const SYS_semtimedop: c_long = 220;
                                                pub const SYS_fadvise64: c_long = 221;
                                                pub const SYS_timer_create: c_long = 222;
                                                pub const SYS_timer_settime: c_long = 223;
                                                pub const SYS_timer_gettime: c_long = 224;
                                                pub const SYS_timer_getoverrun: c_long = 225;
                                                pub const SYS_timer_delete: c_long = 226;
                                                pub const SYS_clock_settime: c_long = 227;
                                                pub const SYS_clock_gettime: c_long = 228;
                                                pub const SYS_clock_getres: c_long = 229;
                                                pub const SYS_clock_nanosleep: c_long = 230;
                                                pub const SYS_exit_group: c_long = 231;
                                                pub const SYS_epoll_wait: c_long = 232;
                                                pub const SYS_epoll_ctl: c_long = 233;
                                                pub const SYS_tgkill: c_long = 234;
                                                pub const SYS_utimes: c_long = 235;
                                                pub const SYS_vserver: c_long = 236;
                                                pub const SYS_mbind: c_long = 237;
                                                pub const SYS_set_mempolicy: c_long = 238;
                                                pub const SYS_get_mempolicy: c_long = 239;
                                                pub const SYS_mq_open: c_long = 240;
                                                pub const SYS_mq_unlink: c_long = 241;
                                                pub const SYS_mq_timedsend: c_long = 242;
                                                pub const SYS_mq_timedreceive: c_long = 243;
                                                pub const SYS_mq_notify: c_long = 244;
                                                pub const SYS_mq_getsetattr: c_long = 245;
                                                pub const SYS_kexec_load: c_long = 246;
                                                pub const SYS_waitid: c_long = 247;
                                                pub const SYS_add_key: c_long = 248;
                                                pub const SYS_request_key: c_long = 249;
                                                pub const SYS_keyctl: c_long = 250;
                                                pub const SYS_ioprio_set: c_long = 251;
                                                pub const SYS_ioprio_get: c_long = 252;
                                                pub const SYS_inotify_init: c_long = 253;
                                                pub const SYS_inotify_add_watch: c_long = 254;
                                                pub const SYS_inotify_rm_watch: c_long = 255;
                                                pub const SYS_migrate_pages: c_long = 256;
                                                pub const SYS_openat: c_long = 257;
                                                pub const SYS_mkdirat: c_long = 258;
                                                pub const SYS_mknodat: c_long = 259;
                                                pub const SYS_fchownat: c_long = 260;
                                                pub const SYS_futimesat: c_long = 261;
                                                pub const SYS_newfstatat: c_long = 262;
                                                pub const SYS_unlinkat: c_long = 263;
                                                pub const SYS_renameat: c_long = 264;
                                                pub const SYS_linkat: c_long = 265;
                                                pub const SYS_symlinkat: c_long = 266;
                                                pub const SYS_readlinkat: c_long = 267;
                                                pub const SYS_fchmodat: c_long = 268;
                                                pub const SYS_faccessat: c_long = 269;
                                                pub const SYS_pselect6: c_long = 270;
                                                pub const SYS_ppoll: c_long = 271;
                                                pub const SYS_unshare: c_long = 272;
                                                pub const SYS_set_robust_list: c_long = 273;
                                                pub const SYS_get_robust_list: c_long = 274;
                                                pub const SYS_splice: c_long = 275;
                                                pub const SYS_tee: c_long = 276;
                                                pub const SYS_sync_file_range: c_long = 277;
                                                pub const SYS_vmsplice: c_long = 278;
                                                pub const SYS_move_pages: c_long = 279;
                                                pub const SYS_utimensat: c_long = 280;
                                                pub const SYS_epoll_pwait: c_long = 281;
                                                pub const SYS_signalfd: c_long = 282;
                                                pub const SYS_timerfd_create: c_long = 283;
                                                pub const SYS_eventfd: c_long = 284;
                                                pub const SYS_fallocate: c_long = 285;
                                                pub const SYS_timerfd_settime: c_long = 286;
                                                pub const SYS_timerfd_gettime: c_long = 287;
                                                pub const SYS_accept4: c_long = 288;
                                                pub const SYS_signalfd4: c_long = 289;
                                                pub const SYS_eventfd2: c_long = 290;
                                                pub const SYS_epoll_create1: c_long = 291;
                                                pub const SYS_dup3: c_long = 292;
                                                pub const SYS_pipe2: c_long = 293;
                                                pub const SYS_inotify_init1: c_long = 294;
                                                pub const SYS_preadv: c_long = 295;
                                                pub const SYS_pwritev: c_long = 296;
                                                pub const SYS_rt_tgsigqueueinfo: c_long = 297;
                                                pub const SYS_perf_event_open: c_long = 298;
                                                pub const SYS_recvmmsg: c_long = 299;
                                                pub const SYS_fanotify_init: c_long = 300;
                                                pub const SYS_fanotify_mark: c_long = 301;
                                                pub const SYS_prlimit64: c_long = 302;
                                                pub const SYS_name_to_handle_at: c_long = 303;
                                                pub const SYS_open_by_handle_at: c_long = 304;
                                                pub const SYS_clock_adjtime: c_long = 305;
                                                pub const SYS_syncfs: c_long = 306;
                                                pub const SYS_sendmmsg: c_long = 307;
                                                pub const SYS_setns: c_long = 308;
                                                pub const SYS_getcpu: c_long = 309;
                                                pub const SYS_process_vm_readv: c_long = 310;
                                                pub const SYS_process_vm_writev: c_long = 311;
                                                pub const SYS_kcmp: c_long = 312;
                                                pub const SYS_finit_module: c_long = 313;
                                                pub const SYS_sched_setattr: c_long = 314;
                                                pub const SYS_sched_getattr: c_long = 315;
                                                pub const SYS_renameat2: c_long = 316;
                                                pub const SYS_seccomp: c_long = 317;
                                                pub const SYS_getrandom: c_long = 318;
                                                pub const SYS_memfd_create: c_long = 319;
                                                pub const SYS_kexec_file_load: c_long = 320;
                                                pub const SYS_bpf: c_long = 321;
                                                pub const SYS_execveat: c_long = 322;
                                                pub const SYS_userfaultfd: c_long = 323;
                                                pub const SYS_membarrier: c_long = 324;
                                                pub const SYS_mlock2: c_long = 325;
                                                pub const SYS_copy_file_range: c_long = 326;
                                                pub const SYS_preadv2: c_long = 327;
                                                pub const SYS_pwritev2: c_long = 328;
                                                pub const SYS_pkey_mprotect: c_long = 329;
                                                pub const SYS_pkey_alloc: c_long = 330;
                                                pub const SYS_pkey_free: c_long = 331;
                                                pub const SYS_statx: c_long = 332;
                                                pub const SYS_rseq: c_long = 334;
                                                pub const SYS_pidfd_send_signal: c_long = 424;
                                                pub const SYS_io_uring_setup: c_long = 425;
                                                pub const SYS_io_uring_enter: c_long = 426;
                                                pub const SYS_io_uring_register: c_long = 427;
                                                pub const SYS_open_tree: c_long = 428;
                                                pub const SYS_move_mount: c_long = 429;
                                                pub const SYS_fsopen: c_long = 430;
                                                pub const SYS_fsconfig: c_long = 431;
                                                pub const SYS_fsmount: c_long = 432;
                                                pub const SYS_fspick: c_long = 433;
                                                pub const SYS_pidfd_open: c_long = 434;
                                                pub const SYS_clone3: c_long = 435;
                                                pub const SYS_close_range: c_long = 436;
                                                pub const SYS_openat2: c_long = 437;
                                                pub const SYS_pidfd_getfd: c_long = 438;
                                                pub const SYS_faccessat2: c_long = 439;
                                                pub const SYS_process_madvise: c_long = 440;
                                                pub const SYS_epoll_pwait2: c_long = 441;
                                                pub const SYS_mount_setattr: c_long = 442;
                                                pub const SYS_quotactl_fd: c_long = 443;
                                                pub const SYS_landlock_create_ruleset: c_long = 444;
                                                pub const SYS_landlock_add_rule: c_long = 445;
                                                pub const SYS_landlock_restrict_self: c_long = 446;
                                                pub const SYS_memfd_secret: c_long = 447;
                                                pub const SYS_process_mrelease: c_long = 448;
                                                pub const SYS_futex_waitv: c_long = 449;
                                                pub const SYS_set_mempolicy_home_node: c_long = 450;
                                                pub const SYS_fchmodat2: c_long = 452;
                                                pub const SYS_mseal: c_long = 462;

                                                extern "C"
                                                {
                                                    pub fn sysctl
                                                    (
                                                        name: *mut c_int,
                                                        namelen: c_int,
                                                        oldp: *mut c_void,
                                                        oldlenp: *mut size_t,
                                                        newp: *mut c_void,
                                                        newlen: size_t,
                                                    ) -> c_int;
                                                }
                                            } pub use self::not_x32::*;
                                        }
                                    }
                                } pub use self::x86_64::*;
                            } pub use self::b64::*;
                        }

                        else {}
                    }
                } pub use self::gnu::*;

                mod arch
                {
                    use ::libc::*;

                    s!
                    {
                        pub struct termios2
                        {
                            pub c_iflag: tcflag_t,
                            pub c_oflag: tcflag_t,
                            pub c_cflag: tcflag_t,
                            pub c_lflag: tcflag_t,
                            pub c_line: cc_t,
                            pub c_cc: [cc_t; 19],
                            pub c_ispeed: speed_t,
                            pub c_ospeed: speed_t,
                        }
                    }
                    
                    pub const SOL_SOCKET: c_int = 1;
                    pub const SO_REUSEADDR: c_int = 2;
                    pub const SO_TYPE: c_int = 3;
                    pub const SO_ERROR: c_int = 4;
                    pub const SO_DONTROUTE: c_int = 5;
                    pub const SO_BROADCAST: c_int = 6;
                    pub const SO_SNDBUF: c_int = 7;
                    pub const SO_RCVBUF: c_int = 8;
                    pub const SO_KEEPALIVE: c_int = 9;
                    pub const SO_OOBINLINE: c_int = 10;
                    pub const SO_NO_CHECK: c_int = 11;
                    pub const SO_PRIORITY: c_int = 12;
                    pub const SO_LINGER: c_int = 13;
                    pub const SO_BSDCOMPAT: c_int = 14;
                    pub const SO_REUSEPORT: c_int = 15;
                    pub const SO_PASSCRED: c_int = 16;
                    pub const SO_PEERCRED: c_int = 17;
                    pub const SO_RCVLOWAT: c_int = 18;
                    pub const SO_SNDLOWAT: c_int = 19;
                    pub const SO_SECURITY_AUTHENTICATION: c_int = 22;
                    pub const SO_SECURITY_ENCRYPTION_TRANSPORT: c_int = 23;
                    pub const SO_SECURITY_ENCRYPTION_NETWORK: c_int = 24;
                    pub const SO_BINDTODEVICE: c_int = 25;
                    pub const SO_ATTACH_FILTER: c_int = 26;
                    pub const SO_DETACH_FILTER: c_int = 27;
                    pub const SO_GET_FILTER: c_int = SO_ATTACH_FILTER;
                    pub const SO_PEERNAME: c_int = 28;

                    const SO_TIMESTAMP_OLD: c_int = 29;
                    const SO_TIMESTAMPNS_OLD: c_int = 35;
                    const SO_TIMESTAMPING_OLD: c_int = 37;
                    const SO_RCVTIMEO_OLD: c_int = 20;
                    const SO_SNDTIMEO_OLD: c_int = 21;

                    pub const SO_TIMESTAMP: c_int = SO_TIMESTAMP_OLD;
                    pub const SO_TIMESTAMPNS: c_int = SO_TIMESTAMPNS_OLD;
                    pub const SO_TIMESTAMPING: c_int = SO_TIMESTAMPING_OLD;
                    pub const SO_RCVTIMEO: c_int = SO_RCVTIMEO_OLD;
                    pub const SO_SNDTIMEO: c_int = SO_SNDTIMEO_OLD;

                    pub const SO_ACCEPTCONN: c_int = 30;
                    pub const SO_PEERSEC: c_int = 31;
                    pub const SO_SNDBUFFORCE: c_int = 32;
                    pub const SO_RCVBUFFORCE: c_int = 33;
                    pub const SO_PASSSEC: c_int = 34;
                    pub const SO_MARK: c_int = 36;
                    pub const SO_PROTOCOL: c_int = 38;
                    pub const SO_DOMAIN: c_int = 39;
                    pub const SO_RXQ_OVFL: c_int = 40;
                    pub const SO_WIFI_STATUS: c_int = 41;
                    pub const SCM_WIFI_STATUS: c_int = SO_WIFI_STATUS;
                    pub const SO_PEEK_OFF: c_int = 42;
                    pub const SO_NOFCS: c_int = 43;
                    pub const SO_LOCK_FILTER: c_int = 44;
                    pub const SO_SELECT_ERR_QUEUE: c_int = 45;
                    pub const SO_BUSY_POLL: c_int = 46;
                    pub const SO_MAX_PACING_RATE: c_int = 47;
                    pub const SO_BPF_EXTENSIONS: c_int = 48;
                    pub const SO_INCOMING_CPU: c_int = 49;
                    pub const SO_ATTACH_BPF: c_int = 50;
                    pub const SO_DETACH_BPF: c_int = SO_DETACH_FILTER;
                    pub const SO_ATTACH_REUSEPORT_CBPF: c_int = 51;
                    pub const SO_ATTACH_REUSEPORT_EBPF: c_int = 52;
                    pub const SO_CNX_ADVICE: c_int = 53;
                    pub const SCM_TIMESTAMPING_OPT_STATS: c_int = 54;
                    pub const SO_MEMINFO: c_int = 55;
                    pub const SO_INCOMING_NAPI_ID: c_int = 56;
                    pub const SO_COOKIE: c_int = 57;
                    pub const SCM_TIMESTAMPING_PKTINFO: c_int = 58;
                    pub const SO_PEERGROUPS: c_int = 59;
                    pub const SO_ZEROCOPY: c_int = 60;
                    pub const SO_TXTIME: c_int = 61;
                    pub const SCM_TXTIME: c_int = SO_TXTIME;
                    pub const SO_BINDTOIFINDEX: c_int = 62;
                    
                    pub const SO_TIMESTAMP_NEW: c_int = 63;
                    pub const SO_TIMESTAMPNS_NEW: c_int = 64;
                    pub const SO_TIMESTAMPING_NEW: c_int = 65;
                    pub const SO_RCVTIMEO_NEW: c_int = 66;
                    pub const SO_SNDTIMEO_NEW: c_int = 67;
                    pub const SO_DETACH_REUSEPORT_BPF: c_int = 68;

                    pub const SO_PREFER_BUSY_POLL: c_int = 69;
                    pub const SO_BUSY_POLL_BUDGET: c_int = 70;
                    pub const SO_NETNS_COOKIE: c_int = 71;
                    pub const SO_BUF_LOCK: c_int = 72;
                    pub const SO_RESERVE_MEM: c_int = 73;
                    pub const SO_TXREHASH: c_int = 74;
                    pub const SO_RCVMARK: c_int = 75;
                    pub const SO_PASSPIDFD: c_int = 76;
                    pub const SO_PEERPIDFD: c_int = 77;
                    pub const SO_DEVMEM_LINEAR: c_int = 78;
                    pub const SO_DEVMEM_DMABUF: c_int = 79;
                    pub const SO_DEVMEM_DONTNEED: c_int = 80;
                    
                    // pub const SCM_TIMESTAMP: c_int = SO_TIMESTAMP;
                    pub const SCM_TIMESTAMPNS: c_int = SO_TIMESTAMPNS;
                    pub const SCM_TIMESTAMPING: c_int = SO_TIMESTAMPING;

                    pub const SCM_DEVMEM_LINEAR: c_int = SO_DEVMEM_LINEAR;
                    pub const SCM_DEVMEM_DMABUF: c_int = SO_DEVMEM_DMABUF;
                    
                    pub const TCGETS: Ioctl = 0x5401;
                    pub const TCSETS: Ioctl = 0x5402;
                    pub const TCSETSW: Ioctl = 0x5403;
                    pub const TCSETSF: Ioctl = 0x5404;
                    pub const TCGETA: Ioctl = 0x5405;
                    pub const TCSETA: Ioctl = 0x5406;
                    pub const TCSETAW: Ioctl = 0x5407;
                    pub const TCSETAF: Ioctl = 0x5408;
                    pub const TCSBRK: Ioctl = 0x5409;
                    pub const TCXONC: Ioctl = 0x540A;
                    pub const TCFLSH: Ioctl = 0x540B;
                    pub const TIOCEXCL: Ioctl = 0x540C;
                    pub const TIOCNXCL: Ioctl = 0x540D;
                    pub const TIOCSCTTY: Ioctl = 0x540E;
                    pub const TIOCGPGRP: Ioctl = 0x540F;
                    pub const TIOCSPGRP: Ioctl = 0x5410;
                    pub const TIOCOUTQ: Ioctl = 0x5411;
                    pub const TIOCSTI: Ioctl = 0x5412;
                    pub const TIOCGWINSZ: Ioctl = 0x5413;
                    pub const TIOCSWINSZ: Ioctl = 0x5414;
                    pub const TIOCMGET: Ioctl = 0x5415;
                    pub const TIOCMBIS: Ioctl = 0x5416;
                    pub const TIOCMBIC: Ioctl = 0x5417;
                    pub const TIOCMSET: Ioctl = 0x5418;
                    pub const TIOCGSOFTCAR: Ioctl = 0x5419;
                    pub const TIOCSSOFTCAR: Ioctl = 0x541A;
                    pub const FIONREAD: Ioctl = 0x541B;
                    pub const TIOCINQ: Ioctl = FIONREAD;
                    pub const TIOCLINUX: Ioctl = 0x541C;
                    pub const TIOCCONS: Ioctl = 0x541D;
                    pub const TIOCGSERIAL: Ioctl = 0x541E;
                    pub const TIOCSSERIAL: Ioctl = 0x541F;
                    pub const TIOCPKT: Ioctl = 0x5420;
                    pub const FIONBIO: Ioctl = 0x5421;
                    pub const TIOCNOTTY: Ioctl = 0x5422;
                    pub const TIOCSETD: Ioctl = 0x5423;
                    pub const TIOCGETD: Ioctl = 0x5424;
                    pub const TCSBRKP: Ioctl = 0x5425;
                    pub const TIOCSBRK: Ioctl = 0x5427;
                    pub const TIOCCBRK: Ioctl = 0x5428;
                    pub const TIOCGSID: Ioctl = 0x5429;
                    pub const TCGETS2: Ioctl = 0x802c542a;
                    pub const TCSETS2: Ioctl = 0x402c542b;
                    pub const TCSETSW2: Ioctl = 0x402c542c;
                    pub const TCSETSF2: Ioctl = 0x402c542d;
                    pub const TIOCGRS485: Ioctl = 0x542E;
                    pub const TIOCSRS485: Ioctl = 0x542F;
                    pub const TIOCGPTN: Ioctl = 0x80045430;
                    pub const TIOCSPTLCK: Ioctl = 0x40045431;
                    pub const TIOCGDEV: Ioctl = 0x80045432;
                    pub const TCGETX: Ioctl = 0x5432;
                    pub const TCSETX: Ioctl = 0x5433;
                    pub const TCSETXF: Ioctl = 0x5434;
                    pub const TCSETXW: Ioctl = 0x5435;
                    pub const TIOCSIG: Ioctl = 0x40045436;
                    pub const TIOCVHANGUP: Ioctl = 0x5437;
                    pub const TIOCGPKT: Ioctl = 0x80045438;
                    pub const TIOCGPTLCK: Ioctl = 0x80045439;
                    pub const TIOCGEXCL: Ioctl = 0x80045440;
                    pub const TIOCGPTPEER: Ioctl = 0x5441;
                    // pub const TIOCGISO7816: Ioctl = 0x80285442;
                    // pub const TIOCSISO7816: Ioctl = 0xc0285443;
                    pub const FIONCLEX: Ioctl = 0x5450;
                    pub const FIOCLEX: Ioctl = 0x5451;
                    pub const FIOASYNC: Ioctl = 0x5452;
                    pub const TIOCSERCONFIG: Ioctl = 0x5453;
                    pub const TIOCSERGWILD: Ioctl = 0x5454;
                    pub const TIOCSERSWILD: Ioctl = 0x5455;
                    pub const TIOCGLCKTRMIOS: Ioctl = 0x5456;
                    pub const TIOCSLCKTRMIOS: Ioctl = 0x5457;
                    pub const TIOCSERGSTRUCT: Ioctl = 0x5458;
                    pub const TIOCSERGETLSR: Ioctl = 0x5459;
                    pub const TIOCSERGETMULTI: Ioctl = 0x545A;
                    pub const TIOCSERSETMULTI: Ioctl = 0x545B;
                    pub const TIOCMIWAIT: Ioctl = 0x545C;
                    pub const TIOCGICOUNT: Ioctl = 0x545D;
                    pub const BLKIOMIN: Ioctl = 0x1278;
                    pub const BLKIOOPT: Ioctl = 0x1279;
                    pub const BLKSSZGET: Ioctl = 0x1268;
                    pub const BLKPBSZGET: Ioctl = 0x127B;
                    pub const FIOQSIZE: Ioctl = 0x5460;

                    pub const TIOCM_LE: c_int = 0x001;
                    pub const TIOCM_DTR: c_int = 0x002;
                    pub const TIOCM_RTS: c_int = 0x004;
                    pub const TIOCM_ST: c_int = 0x008;
                    pub const TIOCM_SR: c_int = 0x010;
                    pub const TIOCM_CTS: c_int = 0x020;
                    pub const TIOCM_CAR: c_int = 0x040;
                    pub const TIOCM_CD: c_int = TIOCM_CAR;
                    pub const TIOCM_RNG: c_int = 0x080;
                    pub const TIOCM_RI: c_int = TIOCM_RNG;
                    pub const TIOCM_DSR: c_int = 0x100;
                    pub const BOTHER: speed_t = 0o010000;
                    pub const IBSHIFT: tcflag_t = 16;

                    cfg_if!
                    {
                        if #[cfg(any(target_env = "gnu", target_env = "uclibc"))]
                        {
                            pub const RLIMIT_CPU: __rlimit_resource_t = 0;
                            pub const RLIMIT_FSIZE: __rlimit_resource_t = 1;
                            pub const RLIMIT_DATA: __rlimit_resource_t = 2;
                            pub const RLIMIT_STACK: __rlimit_resource_t = 3;
                            pub const RLIMIT_CORE: __rlimit_resource_t = 4;
                            pub const RLIMIT_RSS: __rlimit_resource_t = 5;
                            pub const RLIMIT_NPROC: __rlimit_resource_t = 6;
                            pub const RLIMIT_NOFILE: __rlimit_resource_t = 7;
                            pub const RLIMIT_MEMLOCK: __rlimit_resource_t = 8;
                            pub const RLIMIT_AS: __rlimit_resource_t = 9;
                            pub const RLIMIT_LOCKS: __rlimit_resource_t = 10;
                            pub const RLIMIT_SIGPENDING: __rlimit_resource_t = 11;
                            pub const RLIMIT_MSGQUEUE: __rlimit_resource_t = 12;
                            pub const RLIMIT_NICE: __rlimit_resource_t = 13;
                            pub const RLIMIT_RTPRIO: __rlimit_resource_t = 14;
                            pub const RLIMIT_RTTIME: __rlimit_resource_t = 15;
                            
                            #[deprecated(since = "0.2.64", note = "Not stable across OS versions")]
                            pub const RLIMIT_NLIMITS: __rlimit_resource_t = RLIM_NLIMITS;
                        }
                        else if #[cfg(any(target_env = "musl", target_env = "ohos"))]
                        {
                            pub const RLIMIT_CPU: c_int = 0;
                            pub const RLIMIT_FSIZE: c_int = 1;
                            pub const RLIMIT_DATA: c_int = 2;
                            pub const RLIMIT_STACK: c_int = 3;
                            pub const RLIMIT_CORE: c_int = 4;
                            pub const RLIMIT_RSS: c_int = 5;
                            pub const RLIMIT_NPROC: c_int = 6;
                            pub const RLIMIT_NOFILE: c_int = 7;
                            pub const RLIMIT_MEMLOCK: c_int = 8;
                            pub const RLIMIT_AS: c_int = 9;
                            pub const RLIMIT_LOCKS: c_int = 10;
                            pub const RLIMIT_SIGPENDING: c_int = 11;
                            pub const RLIMIT_MSGQUEUE: c_int = 12;
                            pub const RLIMIT_NICE: c_int = 13;
                            pub const RLIMIT_RTPRIO: c_int = 14;
                            pub const RLIMIT_RTTIME: c_int = 15;
                            #[deprecated(since = "0.2.64", note = "Not stable across OS versions")]
                            pub const RLIM_NLIMITS: c_int = 16;
                            #[deprecated(since = "0.2.64", note = "Not stable across OS versions")]
                            pub const RLIMIT_NLIMITS: c_int = RLIM_NLIMITS;
                        }
                    }

                    cfg_if!
                    {
                        if #[cfg(target_env = "gnu")]
                        {
                            #[deprecated(since = "0.2.64", note = "Not stable across OS versions")]
                            pub const RLIM_NLIMITS: __rlimit_resource_t = 16;
                        }
                        
                        else if #[cfg(target_env = "uclibc")]
                        {
                            #[deprecated(since = "0.2.64", note = "Not stable across OS versions")]
                            pub const RLIM_NLIMITS: __rlimit_resource_t = 15;
                        }
                    }

                    pub const RLIM_INFINITY: rlim_t = !0;
                } pub use self::arch::*;
            } pub use self::linux::*;
        } pub use self::linux_like::{ * };
    } #[cfg( unix )] pub use self::unix::{ * };

    pub mod windows
    {

    } #[cfg( windows )] pub use self::windows::{ * };
}

pub mod io
{
    pub use std::io::{ * };
}

pub mod is
{
    use ::
    {
        *,
    };

    //pub fn is_login(args: &[String]) -> bool {
    pub fn login(args: &[String]) -> bool 
    {
        if !args.is_empty() && args[0].starts_with("-") { return true; }

        if args.len() > 1 && (args[1] == "--login" || args[1] == "-l") { return true; }

        if let Ok(term_program) = ::env::var("TERM_PROGRAM") 
        {
            if term_program == "vscode" 
            {
                return true;
            }
        }

        false
    }
}

pub mod iter
{
    pub use std::iter::{*};
}

pub mod marker
{
    pub use std::marker::{ * };
}

pub mod mem
{
    pub use std::mem::{ * };
}

pub mod num
{
    pub use std::num::{ * };
    /// Numbers which have upper and lower bounds
    pub trait Bounded 
    {
        fn min_value() -> Self;
        fn max_value() -> Self;
    }
}

pub mod ops
{
    pub use std::ops::{ * };
}

pub mod os
{
    pub mod raw
    {
        pub use std::os::raw::{ * };
    }
    
    pub mod unix
    {
        #[cfg( unix )] pub use std::os::unix::{ * };
    }
    
    pub mod windows
    {
        #[cfg( windows )] pub use std::os::windows::{ * };
    }
}

pub mod parsers
{
    pub mod locust
    {
        pub fn parse_lines
        (
            lines: &str,
        ) -> ::result::Result<(), ()> // Pairs<::parsers::locust::Rule>, Error<crate::parsers::locust::Rule>
        {
            //Locust::parse(Rule::EXP, lines)
            Ok( ( ) )
        }
    }
}

pub mod path
{
    pub use std::path::{ * };
    // pub fn get_current_dir() -> String
    pub fn get_current() -> String
    {
        use ::io::Write as _;

        let mut current_dir = PathBuf::new();
        
        match ::env::current_dir()
        {
            Ok(x) => current_dir = x,
            Err(e) => {
                println_stderr!("env current_dir() failed: {}", e);
            }
        }

        let mut str_current_dir = "";
        
        match current_dir.to_str() 
        {
            Some(x) => str_current_dir = x,
            None => { println_stderr!("current_dir to str failed."); }
        }

        str_current_dir.to_string()
    }
    // pub fn get_config_dir() -> String
    pub fn get_configuration() -> String
    {
        if let Ok(x) = ::env::var("XDG_CONFIG_HOME")
        {
            format!("{}/cicada", x)
        }
        else
        {
            let home = ::env::get_user_home();
            format!("{}/.config/cicada", home)
        }
    }
    // pub fn find_file_in_path(filename: &str, exec: bool) -> String
    pub fn find_file(filename: &str, exec: bool) -> String
    {
        let env_path = match ::env::var("PATH")
        {
            Ok(x) => x,
            Err(e) =>
            {
                println_stderr!("cicada: error with env PATH: {:?}", e);
                return String::new();
            }
        };

        let vec_path: Vec<&str> = env_path.split(':').collect();

        for p in &vec_path
        {
            match ::fs::read_dir(p)
            {
                Ok(list) =>
                {
                    for entry in list.flatten()
                    {
                        if let Ok(name) = entry.file_name().into_string()
                        {
                            if name != filename { continue; }

                            if exec
                            {
                                let _mode = match entry.metadata()
                                {
                                    Ok(x) => x,
                                    Err(e) =>
                                    {
                                        println_stderr!("cicada: metadata error: {:?}", e);
                                        continue;
                                    }
                                };
                                /*
                                let mode = _mode.permissions().mode();
                                
                                if mode & 0o111 == 0 { continue; } */
                            }

                            return entry.path().to_string_lossy().to_string();
                        }
                    }
                }
                Err(e) => {
                    if e.kind() == ::io::ErrorKind::NotFound {
                        continue;
                    }
                    log!(":: fs read_dir error: {}: {}", p, e);
                }
            }
        }
        String::new()
    }
}

pub mod process
{
    pub use std::process::{ * };
    // pub fn proc_has_terminal() -> bool
    pub fn has_terminal() -> bool
    {
        unsafe 
        {
            let tgid = ::libc::tcgetpgrp(0);
            let pgid = ::libc::getpgid(0);
            tgid == pgid
        }
    }
    // pub fn getpid() -> i32 
    pub fn pid() -> i32 
    {
        unsafe { ::libc::getpid() }
    }
}

pub mod ptr
{
    pub use std::ptr::{ * };
}

pub mod regex
{
    /*!
    This crate provides routines for searching strings for matches of a [regular expression] (aka "regex").*/
    pub use self::error::Error;
    pub use self::{builders::string::*, regex::string::*, regexset::string::*};
    
    pub mod automata
    {
        /*!
        This crate exposes a variety of regex engines used by the `regex` crate. */
        use ::
        {
            *
        };

        pub use crate::util::primitives::PatternID;
        pub use crate::util::search::*;

        #[macro_use]  pub mod macros
        {
            use ::
            {
                *
            };

            macro_rules! log
            {
                ($($tt:tt)*) =>
                {
                    #[cfg(feature = "logging")]
                    {
                        $($tt)*
                    }
                }
            }

            macro_rules! debug { ($($tt:tt)*) => { log!(log::debug!($($tt)*)) } }

            macro_rules! trace { ($($tt:tt)*) => { log!(log::trace!($($tt)*)) } }
        }
        
        pub mod dfa
        {
            /*!
            A module for building and searching with deterministic finite automata (DFAs).*/
            use ::
            {
                *
            };
            /*
            #[cfg(feature = "dfa-search")]
            pub use crate::dfa::{
                automaton::{Automaton, OverlappingState, StartError},
                start::StartKind,
            };
            */
            
            pub mod dense
            {
                /*!
                Types and routines specific to dense DFAs.*/
                use ::
                {
                    *
                };
                /*
                #[cfg(feature = "dfa-build")]
                use ::cmp;
                use ::{fmt, iter, mem::size_of, slice};

                #[cfg(feature = "dfa-build")]
                use alloc::{
                    collections::{BTreeMap, BTreeSet},
                    vec,
                    vec::Vec,
                };

                #[cfg(feature = "dfa-build")]
                use crate::{
                    dfa::{
                        accel::Accel, determinize, minimize::Minimizer, remapper::Remapper,
                        sparse,
                    },
                    nfa::thompson,
                    util::{look::LookMatcher, search::MatchKind},
                };
                use crate::{
                    dfa::{
                        accel::Accels,
                        automaton::{fmt_state_indicator, Automaton, StartError},
                        special::Special,
                        start::StartKind,
                        DEAD,
                    },
                    util::{
                        alphabet::{self, ByteClasses, ByteSet},
                        int::{Pointer, Usize},
                        prefilter::Prefilter,
                        primitives::{PatternID, StateID},
                        search::Anchored,
                        start::{self, Start, StartByteMap},
                        wire::{self, DeserializeError, Endian, SerializeError},
                    },
                };
                */
                /// The label that is pre-pended to a serialized DFA.
                const LABEL: &str = "rust-regex-automata-dfa-dense";
                /// The format version of dense regexes. 
                const VERSION: u32 = 2;
                /// The configuration used for compiling a dense DFA.
                ///
                /// As a convenience, [`DFA::config`] is an alias for [`Config::new`]. The
                /// advantage of the former is that it often lets you avoid importing the
                /// `Config` type directly.
                ///
                /// A dense DFA configuration is a simple data object that is typically used
                /// with [`dense::Builder::configure`](self::Builder::configure).
                ///
                /// The default configuration guarantees that a search will never return
                /// a "quit" error, although it is possible for a search to fail if
                /// [`Config::starts_for_each_pattern`] wasn't enabled (which it is
                /// not by default) and an [`Anchored::Pattern`] mode is requested via
                /// [`Input`](crate::Input).
                #[cfg(feature = "dfa-build")]
                #[derive(Clone, Debug, Default)]
                pub struct Config {
                    // As with other configuration types in this crate, we put all our knobs
                    // in options so that we can distinguish between "default" and "not set."
                    // This makes it possible to easily combine multiple configurations
                    // without default values overwriting explicitly specified values. See the
                    // 'overwrite' method.
                    //
                    // For docs on the fields below, see the corresponding method setters.
                    accelerate: Option<bool>,
                    pre: Option<Option<Prefilter>>,
                    minimize: Option<bool>,
                    match_kind: Option<MatchKind>,
                    start_kind: Option<StartKind>,
                    starts_for_each_pattern: Option<bool>,
                    byte_classes: Option<bool>,
                    unicode_word_boundary: Option<bool>,
                    quitset: Option<ByteSet>,
                    specialize_start_states: Option<bool>,
                    dfa_size_limit: Option<Option<usize>>,
                    determinize_size_limit: Option<Option<usize>>,
                }

                #[cfg(feature = "dfa-build")]
                impl Config {
                    /// Return a new default dense DFA compiler configuration.
                    pub fn new() -> Config {
                        Config::default()
                    }

                    /// Enable state acceleration.
                    ///
                    /// When enabled, DFA construction will analyze each state to determine
                    /// whether it is eligible for simple acceleration. Acceleration typically
                    /// occurs when most of a state's transitions loop back to itself, leaving
                    /// only a select few bytes that will exit the state. When this occurs,
                    /// other routines like `memchr` can be used to look for those bytes which
                    /// may be much faster than traversing the DFA.
                    ///
                    /// Callers may elect to disable this if consistent performance is more
                    /// desirable than variable performance. Namely, acceleration can sometimes
                    /// make searching slower than it otherwise would be if the transitions
                    /// that leave accelerated states are traversed frequently.
                    ///
                    /// See [`Automaton::accelerator`] for an example.
                    ///
                    /// This is enabled by default.
                    pub fn accelerate(mut self, yes: bool) -> Config {
                        self.accelerate = Some(yes);
                        self
                    }

                    /// Set a prefilter to be used whenever a start state is entered.
                    ///
                    /// A [`Prefilter`] in this context is meant to accelerate searches by
                    /// looking for literal prefixes that every match for the corresponding
                    /// pattern (or patterns) must start with. Once a prefilter produces a
                    /// match, the underlying search routine continues on to try and confirm
                    /// the match.
                    ///
                    /// Be warned that setting a prefilter does not guarantee that the search
                    /// will be faster. While it's usually a good bet, if the prefilter
                    /// produces a lot of false positive candidates (i.e., positions matched
                    /// by the prefilter but not by the regex), then the overall result can
                    /// be slower than if you had just executed the regex engine without any
                    /// prefilters.
                    ///
                    /// Note that unless [`Config::specialize_start_states`] has been
                    /// explicitly set, then setting this will also enable (when `pre` is
                    /// `Some`) or disable (when `pre` is `None`) start state specialization.
                    /// This occurs because without start state specialization, a prefilter
                    /// is likely to be less effective. And without a prefilter, start state
                    /// specialization is usually pointless.
                    ///
                    /// **WARNING:** Note that prefilters are not preserved as part of
                    /// serialization. Serializing a DFA will drop its prefilter.
                    ///
                    /// By default no prefilter is set.
                    ///
                    /// # Example
                    ///
                    /// ```
                    /// use regex_automata::{
                    ///     dfa::{dense::DFA, Automaton},
                    ///     util::prefilter::Prefilter,
                    ///     Input, HalfMatch, MatchKind,
                    /// };
                    ///
                    /// let pre = Prefilter::new(MatchKind::LeftmostFirst, &["foo", "bar"]);
                    /// let re = DFA::builder()
                    ///     .configure(DFA::config().prefilter(pre))
                    ///     .build(r"(foo|bar)[a-z]+")?;
                    /// let input = Input::new("foo1 barfox bar");
                    /// assert_eq!(
                    ///     Some(HalfMatch::must(0, 11)),
                    ///     re.try_search_fwd(&input)?,
                    /// );
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    ///
                    /// Be warned though that an incorrect prefilter can lead to incorrect
                    /// results!
                    ///
                    /// ```
                    /// use regex_automata::{
                    ///     dfa::{dense::DFA, Automaton},
                    ///     util::prefilter::Prefilter,
                    ///     Input, HalfMatch, MatchKind,
                    /// };
                    ///
                    /// let pre = Prefilter::new(MatchKind::LeftmostFirst, &["foo", "car"]);
                    /// let re = DFA::builder()
                    ///     .configure(DFA::config().prefilter(pre))
                    ///     .build(r"(foo|bar)[a-z]+")?;
                    /// let input = Input::new("foo1 barfox bar");
                    /// assert_eq!(
                    ///     // No match reported even though there clearly is one!
                    ///     None,
                    ///     re.try_search_fwd(&input)?,
                    /// );
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {
                        self.pre = Some(pre);
                        if self.specialize_start_states.is_none() {
                            self.specialize_start_states =
                                Some(self.get_prefilter().is_some());
                        }
                        self
                    }

                    /// Minimize the DFA.
                    ///
                    /// When enabled, the DFA built will be minimized such that it is as small
                    /// as possible.
                    ///
                    /// Whether one enables minimization or not depends on the types of costs
                    /// you're willing to pay and how much you care about its benefits. In
                    /// particular, minimization has worst case `O(n*k*logn)` time and `O(k*n)`
                    /// space, where `n` is the number of DFA states and `k` is the alphabet
                    /// size. In practice, minimization can be quite costly in terms of both
                    /// space and time, so it should only be done if you're willing to wait
                    /// longer to produce a DFA. In general, you might want a minimal DFA in
                    /// the following circumstances:
                    ///
                    /// 1. You would like to optimize for the size of the automaton. This can
                    ///    manifest in one of two ways. Firstly, if you're converting the
                    ///    DFA into Rust code (or a table embedded in the code), then a minimal
                    ///    DFA will translate into a corresponding reduction in code  size, and
                    ///    thus, also the final compiled binary size. Secondly, if you are
                    ///    building many DFAs and putting them on the heap, you'll be able to
                    ///    fit more if they are smaller. Note though that building a minimal
                    ///    DFA itself requires additional space; you only realize the space
                    ///    savings once the minimal DFA is constructed (at which point, the
                    ///    space used for minimization is freed).
                    /// 2. You've observed that a smaller DFA results in faster match
                    ///    performance. Naively, this isn't guaranteed since there is no
                    ///    inherent difference between matching with a bigger-than-minimal
                    ///    DFA and a minimal DFA. However, a smaller DFA may make use of your
                    ///    CPU's cache more efficiently.
                    /// 3. You are trying to establish an equivalence between regular
                    ///    languages. The standard method for this is to build a minimal DFA
                    ///    for each language and then compare them. If the DFAs are equivalent
                    ///    (up to state renaming), then the languages are equivalent.
                    ///
                    /// Typically, minimization only makes sense as an offline process. That
                    /// is, one might minimize a DFA before serializing it to persistent
                    /// storage. In practical terms, minimization can take around an order of
                    /// magnitude more time than compiling the initial DFA via determinization.
                    ///
                    /// This option is disabled by default.
                    pub fn minimize(mut self, yes: bool) -> Config {
                        self.minimize = Some(yes);
                        self
                    }

                    /// Set the desired match semantics.
                    ///
                    /// The default is [`MatchKind::LeftmostFirst`], which corresponds to the
                    /// match semantics of Perl-like regex engines. That is, when multiple
                    /// patterns would match at the same leftmost position, the pattern that
                    /// appears first in the concrete syntax is chosen.
                    ///
                    /// Currently, the only other kind of match semantics supported is
                    /// [`MatchKind::All`]. This corresponds to classical DFA construction
                    /// where all possible matches are added to the DFA.
                    ///
                    /// Typically, `All` is used when one wants to execute an overlapping
                    /// search and `LeftmostFirst` otherwise. In particular, it rarely makes
                    /// sense to use `All` with the various "leftmost" find routines, since the
                    /// leftmost routines depend on the `LeftmostFirst` automata construction
                    /// strategy. Specifically, `LeftmostFirst` adds dead states to the DFA
                    /// as a way to terminate the search and report a match. `LeftmostFirst`
                    /// also supports non-greedy matches using this strategy where as `All`
                    /// does not.
                    ///
                    /// # Example: overlapping search
                    ///
                    /// This example shows the typical use of `MatchKind::All`, which is to
                    /// report overlapping matches.
                    ///
                    /// ```
                    /// # if cfg!(miri) { return Ok(()); } // miri takes too long
                    /// use regex_automata::{
                    ///     dfa::{Automaton, OverlappingState, dense},
                    ///     HalfMatch, Input, MatchKind,
                    /// };
                    ///
                    /// let dfa = dense::Builder::new()
                    ///     .configure(dense::Config::new().match_kind(MatchKind::All))
                    ///     .build_many(&[r"\w+$", r"\S+$"])?;
                    /// let input = Input::new("@foo");
                    /// let mut state = OverlappingState::start();
                    ///
                    /// let expected = Some(HalfMatch::must(1, 4));
                    /// dfa.try_search_overlapping_fwd(&input, &mut state)?;
                    /// assert_eq!(expected, state.get_match());
                    ///
                    /// // The first pattern also matches at the same position, so re-running
                    /// // the search will yield another match. Notice also that the first
                    /// // pattern is returned after the second. This is because the second
                    /// // pattern begins its match before the first, is therefore an earlier
                    /// // match and is thus reported first.
                    /// let expected = Some(HalfMatch::must(0, 4));
                    /// dfa.try_search_overlapping_fwd(&input, &mut state)?;
                    /// assert_eq!(expected, state.get_match());
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    ///
                    /// # Example: reverse automaton to find start of match
                    ///
                    /// Another example for using `MatchKind::All` is for constructing a
                    /// reverse automaton to find the start of a match. `All` semantics are
                    /// used for this in order to find the longest possible match, which
                    /// corresponds to the leftmost starting position.
                    ///
                    /// Note that if you need the starting position then
                    /// [`dfa::regex::Regex`](crate::dfa::regex::Regex) will handle this for
                    /// you, so it's usually not necessary to do this yourself.
                    ///
                    /// ```
                    /// use regex_automata::{
                    ///     dfa::{dense, Automaton, StartKind},
                    ///     nfa::thompson::NFA,
                    ///     Anchored, HalfMatch, Input, MatchKind,
                    /// };
                    ///
                    /// let haystack = "123foobar456".as_bytes();
                    /// let pattern = r"[a-z]+r";
                    ///
                    /// let dfa_fwd = dense::DFA::new(pattern)?;
                    /// let dfa_rev = dense::Builder::new()
                    ///     .thompson(NFA::config().reverse(true))
                    ///     .configure(dense::Config::new()
                    ///         // This isn't strictly necessary since both anchored and
                    ///         // unanchored searches are supported by default. But since
                    ///         // finding the start-of-match only requires anchored searches,
                    ///         // we can get rid of the unanchored configuration and possibly
                    ///         // slim down our DFA considerably.
                    ///         .start_kind(StartKind::Anchored)
                    ///         .match_kind(MatchKind::All)
                    ///     )
                    ///     .build(pattern)?;
                    /// let expected_fwd = HalfMatch::must(0, 9);
                    /// let expected_rev = HalfMatch::must(0, 3);
                    /// let got_fwd = dfa_fwd.try_search_fwd(&Input::new(haystack))?.unwrap();
                    /// // Here we don't specify the pattern to search for since there's only
                    /// // one pattern and we're doing a leftmost search. But if this were an
                    /// // overlapping search, you'd need to specify the pattern that matched
                    /// // in the forward direction. (Otherwise, you might wind up finding the
                    /// // starting position of a match of some other pattern.) That in turn
                    /// // requires building the reverse automaton with starts_for_each_pattern
                    /// // enabled. Indeed, this is what Regex does internally.
                    /// let input = Input::new(haystack)
                    ///     .range(..got_fwd.offset())
                    ///     .anchored(Anchored::Yes);
                    /// let got_rev = dfa_rev.try_search_rev(&input)?.unwrap();
                    /// assert_eq!(expected_fwd, got_fwd);
                    /// assert_eq!(expected_rev, got_rev);
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn match_kind(mut self, kind: MatchKind) -> Config {
                        self.match_kind = Some(kind);
                        self
                    }

                    /// The type of starting state configuration to use for a DFA.
                    ///
                    /// By default, the starting state configuration is [`StartKind::Both`].
                    ///
                    /// # Example
                    ///
                    /// ```
                    /// use regex_automata::{
                    ///     dfa::{dense::DFA, Automaton, StartKind},
                    ///     Anchored, HalfMatch, Input,
                    /// };
                    ///
                    /// let haystack = "quux foo123";
                    /// let expected = HalfMatch::must(0, 11);
                    ///
                    /// // By default, DFAs support both anchored and unanchored searches.
                    /// let dfa = DFA::new(r"[0-9]+")?;
                    /// let input = Input::new(haystack);
                    /// assert_eq!(Some(expected), dfa.try_search_fwd(&input)?);
                    ///
                    /// // But if we only need anchored searches, then we can build a DFA
                    /// // that only supports anchored searches. This leads to a smaller DFA
                    /// // (potentially significantly smaller in some cases), but a DFA that
                    /// // will panic if you try to use it with an unanchored search.
                    /// let dfa = DFA::builder()
                    ///     .configure(DFA::config().start_kind(StartKind::Anchored))
                    ///     .build(r"[0-9]+")?;
                    /// let input = Input::new(haystack)
                    ///     .range(8..)
                    ///     .anchored(Anchored::Yes);
                    /// assert_eq!(Some(expected), dfa.try_search_fwd(&input)?);
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn start_kind(mut self, kind: StartKind) -> Config {
                        self.start_kind = Some(kind);
                        self
                    }

                    /// Whether to compile a separate start state for each pattern in the
                    /// automaton.
                    ///
                    /// When enabled, a separate **anchored** start state is added for each
                    /// pattern in the DFA. When this start state is used, then the DFA will
                    /// only search for matches for the pattern specified, even if there are
                    /// other patterns in the DFA.
                    ///
                    /// The main downside of this option is that it can potentially increase
                    /// the size of the DFA and/or increase the time it takes to build the DFA.
                    ///
                    /// There are a few reasons one might want to enable this (it's disabled
                    /// by default):
                    ///
                    /// 1. When looking for the start of an overlapping match (using a
                    /// reverse DFA), doing it correctly requires starting the reverse search
                    /// using the starting state of the pattern that matched in the forward
                    /// direction. Indeed, when building a [`Regex`](crate::dfa::regex::Regex),
                    /// it will automatically enable this option when building the reverse DFA
                    /// internally.
                    /// 2. When you want to use a DFA with multiple patterns to both search
                    /// for matches of any pattern or to search for anchored matches of one
                    /// particular pattern while using the same DFA. (Otherwise, you would need
                    /// to compile a new DFA for each pattern.)
                    /// 3. Since the start states added for each pattern are anchored, if you
                    /// compile an unanchored DFA with one pattern while also enabling this
                    /// option, then you can use the same DFA to perform anchored or unanchored
                    /// searches. The latter you get with the standard search APIs. The former
                    /// you get from the various `_at` search methods that allow you specify a
                    /// pattern ID to search for.
                    ///
                    /// By default this is disabled.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to use this option to permit the same DFA to
                    /// run both anchored and unanchored searches for a single pattern.
                    ///
                    /// ```
                    /// use regex_automata::{
                    ///     dfa::{dense, Automaton},
                    ///     Anchored, HalfMatch, PatternID, Input,
                    /// };
                    ///
                    /// let dfa = dense::Builder::new()
                    ///     .configure(dense::Config::new().starts_for_each_pattern(true))
                    ///     .build(r"foo[0-9]+")?;
                    /// let haystack = "quux foo123";
                    ///
                    /// // Here's a normal unanchored search. Notice that we use 'None' for the
                    /// // pattern ID. Since the DFA was built as an unanchored machine, it
                    /// // use its default unanchored starting state.
                    /// let expected = HalfMatch::must(0, 11);
                    /// let input = Input::new(haystack);
                    /// assert_eq!(Some(expected), dfa.try_search_fwd(&input)?);
                    /// // But now if we explicitly specify the pattern to search ('0' being
                    /// // the only pattern in the DFA), then it will use the starting state
                    /// // for that specific pattern which is always anchored. Since the
                    /// // pattern doesn't have a match at the beginning of the haystack, we
                    /// // find nothing.
                    /// let input = Input::new(haystack)
                    ///     .anchored(Anchored::Pattern(PatternID::must(0)));
                    /// assert_eq!(None, dfa.try_search_fwd(&input)?);
                    /// // And finally, an anchored search is not the same as putting a '^' at
                    /// // beginning of the pattern. An anchored search can only match at the
                    /// // beginning of the *search*, which we can change:
                    /// let input = Input::new(haystack)
                    ///     .anchored(Anchored::Pattern(PatternID::must(0)))
                    ///     .range(5..);
                    /// assert_eq!(Some(expected), dfa.try_search_fwd(&input)?);
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {
                        self.starts_for_each_pattern = Some(yes);
                        self
                    }

                    /// Whether to attempt to shrink the size of the DFA's alphabet or not.
                    ///
                    /// This option is enabled by default and should never be disabled unless
                    /// one is debugging a generated DFA.
                    ///
                    /// When enabled, the DFA will use a map from all possible bytes to their
                    /// corresponding equivalence class. Each equivalence class represents a
                    /// set of bytes that does not discriminate between a match and a non-match
                    /// in the DFA. For example, the pattern `[ab]+` has at least two
                    /// equivalence classes: a set containing `a` and `b` and a set containing
                    /// every byte except for `a` and `b`. `a` and `b` are in the same
                    /// equivalence class because they never discriminate between a match and a
                    /// non-match.
                    ///
                    /// The advantage of this map is that the size of the transition table
                    /// can be reduced drastically from `#states * 256 * sizeof(StateID)` to
                    /// `#states * k * sizeof(StateID)` where `k` is the number of equivalence
                    /// classes (rounded up to the nearest power of 2). As a result, total
                    /// space usage can decrease substantially. Moreover, since a smaller
                    /// alphabet is used, DFA compilation becomes faster as well.
                    ///
                    /// **WARNING:** This is only useful for debugging DFAs. Disabling this
                    /// does not yield any speed advantages. Namely, even when this is
                    /// disabled, a byte class map is still used while searching. The only
                    /// difference is that every byte will be forced into its own distinct
                    /// equivalence class. This is useful for debugging the actual generated
                    /// transitions because it lets one see the transitions defined on actual
                    /// bytes instead of the equivalence classes.
                    pub fn byte_classes(mut self, yes: bool) -> Config {
                        self.byte_classes = Some(yes);
                        self
                    }

                    /// Heuristically enable Unicode word boundaries.
                    ///
                    /// When set, this will attempt to implement Unicode word boundaries as if
                    /// they were ASCII word boundaries. This only works when the search input
                    /// is ASCII only. If a non-ASCII byte is observed while searching, then a
                    /// [`MatchError::quit`](crate::MatchError::quit) error is returned.
                    ///
                    /// A possible alternative to enabling this option is to simply use an
                    /// ASCII word boundary, e.g., via `(?-u:\b)`. The main reason to use this
                    /// option is if you absolutely need Unicode support. This option lets one
                    /// use a fast search implementation (a DFA) for some potentially very
                    /// common cases, while providing the option to fall back to some other
                    /// regex engine to handle the general case when an error is returned.
                    ///
                    /// If the pattern provided has no Unicode word boundary in it, then this
                    /// option has no effect. (That is, quitting on a non-ASCII byte only
                    /// occurs when this option is enabled _and_ a Unicode word boundary is
                    /// present in the pattern.)
                    ///
                    /// This is almost equivalent to setting all non-ASCII bytes to be quit
                    /// bytes. The only difference is that this will cause non-ASCII bytes to
                    /// be quit bytes _only_ when a Unicode word boundary is present in the
                    /// pattern.
                    ///
                    /// When enabling this option, callers _must_ be prepared to handle
                    /// a [`MatchError`](crate::MatchError) error during search.
                    /// When using a [`Regex`](crate::dfa::regex::Regex), this corresponds
                    /// to using the `try_` suite of methods. Alternatively, if
                    /// callers can guarantee that their input is ASCII only, then a
                    /// [`MatchError::quit`](crate::MatchError::quit) error will never be
                    /// returned while searching.
                    ///
                    /// This is disabled by default.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to heuristically enable Unicode word boundaries
                    /// in a pattern. It also shows what happens when a search comes across a
                    /// non-ASCII byte.
                    ///
                    /// ```
                    /// use regex_automata::{
                    ///     dfa::{Automaton, dense},
                    ///     HalfMatch, Input, MatchError,
                    /// };
                    ///
                    /// let dfa = dense::Builder::new()
                    ///     .configure(dense::Config::new().unicode_word_boundary(true))
                    ///     .build(r"\b[0-9]+\b")?;
                    ///
                    /// // The match occurs before the search ever observes the snowman
                    /// // character, so no error occurs.
                    /// let haystack = "foo 123  ☃".as_bytes();
                    /// let expected = Some(HalfMatch::must(0, 7));
                    /// let got = dfa.try_search_fwd(&Input::new(haystack))?;
                    /// assert_eq!(expected, got);
                    ///
                    /// // Notice that this search fails, even though the snowman character
                    /// // occurs after the ending match offset. This is because search
                    /// // routines read one byte past the end of the search to account for
                    /// // look-around, and indeed, this is required here to determine whether
                    /// // the trailing \b matches.
                    /// let haystack = "foo 123 ☃".as_bytes();
                    /// let expected = MatchError::quit(0xE2, 8);
                    /// let got = dfa.try_search_fwd(&Input::new(haystack));
                    /// assert_eq!(Err(expected), got);
                    ///
                    /// // Another example is executing a search where the span of the haystack
                    /// // we specify is all ASCII, but there is non-ASCII just before it. This
                    /// // correctly also reports an error.
                    /// let input = Input::new("β123").range(2..);
                    /// let expected = MatchError::quit(0xB2, 1);
                    /// let got = dfa.try_search_fwd(&input);
                    /// assert_eq!(Err(expected), got);
                    ///
                    /// // And similarly for the trailing word boundary.
                    /// let input = Input::new("123β").range(..3);
                    /// let expected = MatchError::quit(0xCE, 3);
                    /// let got = dfa.try_search_fwd(&input);
                    /// assert_eq!(Err(expected), got);
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {
                        // We have a separate option for this instead of just setting the
                        // appropriate quit bytes here because we don't want to set quit bytes
                        // for every regex. We only want to set them when the regex contains a
                        // Unicode word boundary.
                        self.unicode_word_boundary = Some(yes);
                        self
                    }

                    /// Add a "quit" byte to the DFA.
                    ///
                    /// When a quit byte is seen during search time, then search will return
                    /// a [`MatchError::quit`](crate::MatchError::quit) error indicating the
                    /// offset at which the search stopped.
                    ///
                    /// A quit byte will always overrule any other aspects of a regex. For
                    /// example, if the `x` byte is added as a quit byte and the regex `\w` is
                    /// used, then observing `x` will cause the search to quit immediately
                    /// despite the fact that `x` is in the `\w` class.
                    ///
                    /// This mechanism is primarily useful for heuristically enabling certain
                    /// features like Unicode word boundaries in a DFA. Namely, if the input
                    /// to search is ASCII, then a Unicode word boundary can be implemented
                    /// via an ASCII word boundary with no change in semantics. Thus, a DFA
                    /// can attempt to match a Unicode word boundary but give up as soon as it
                    /// observes a non-ASCII byte. Indeed, if callers set all non-ASCII bytes
                    /// to be quit bytes, then Unicode word boundaries will be permitted when
                    /// building DFAs. Of course, callers should enable
                    /// [`Config::unicode_word_boundary`] if they want this behavior instead.
                    /// (The advantage being that non-ASCII quit bytes will only be added if a
                    /// Unicode word boundary is in the pattern.)
                    ///
                    /// When enabling this option, callers _must_ be prepared to handle a
                    /// [`MatchError`](crate::MatchError) error during search. When using a
                    /// [`Regex`](crate::dfa::regex::Regex), this corresponds to using the
                    /// `try_` suite of methods.
                    ///
                    /// By default, there are no quit bytes set.
                    ///
                    /// # Panics
                    ///
                    /// This panics if heuristic Unicode word boundaries are enabled and any
                    /// non-ASCII byte is removed from the set of quit bytes. Namely, enabling
                    /// Unicode word boundaries requires setting every non-ASCII byte to a quit
                    /// byte. So if the caller attempts to undo any of that, then this will
                    /// panic.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to cause a search to terminate if it sees a
                    /// `\n` byte. This could be useful if, for example, you wanted to prevent
                    /// a user supplied pattern from matching across a line boundary.
                    ///
                    /// ```
                    /// # if cfg!(miri) { return Ok(()); } // miri takes too long
                    /// use regex_automata::{dfa::{Automaton, dense}, Input, MatchError};
                    ///
                    /// let dfa = dense::Builder::new()
                    ///     .configure(dense::Config::new().quit(b'\n', true))
                    ///     .build(r"foo\p{any}+bar")?;
                    ///
                    /// let haystack = "foo\nbar".as_bytes();
                    /// // Normally this would produce a match, since \p{any} contains '\n'.
                    /// // But since we instructed the automaton to enter a quit state if a
                    /// // '\n' is observed, this produces a match error instead.
                    /// let expected = MatchError::quit(b'\n', 3);
                    /// let got = dfa.try_search_fwd(&Input::new(haystack)).unwrap_err();
                    /// assert_eq!(expected, got);
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn quit(mut self, byte: u8, yes: bool) -> Config {
                        if self.get_unicode_word_boundary() && !byte.is_ascii() && !yes {
                            panic!(
                                "cannot set non-ASCII byte to be non-quit when \
                                Unicode word boundaries are enabled"
                            );
                        }
                        if self.quitset.is_none() {
                            self.quitset = Some(ByteSet::empty());
                        }
                        if yes {
                            self.quitset.as_mut().unwrap().add(byte);
                        } else {
                            self.quitset.as_mut().unwrap().remove(byte);
                        }
                        self
                    }

                    /// Enable specializing start states in the DFA.
                    ///
                    /// When start states are specialized, an implementor of a search routine
                    /// using a lazy DFA can tell when the search has entered a starting state.
                    /// When start states aren't specialized, then it is impossible to know
                    /// whether the search has entered a start state.
                    ///
                    /// Ideally, this option wouldn't need to exist and we could always
                    /// specialize start states. The problem is that start states can be quite
                    /// active. This in turn means that an efficient search routine is likely
                    /// to ping-pong between a heavily optimized hot loop that handles most
                    /// states and to a less optimized specialized handling of start states.
                    /// This causes branches to get heavily mispredicted and overall can
                    /// materially decrease throughput. Therefore, specializing start states
                    /// should only be enabled when it is needed.
                    ///
                    /// Knowing whether a search is in a start state is typically useful when a
                    /// prefilter is active for the search. A prefilter is typically only run
                    /// when in a start state and a prefilter can greatly accelerate a search.
                    /// Therefore, the possible cost of specializing start states is worth it
                    /// in this case. Otherwise, if you have no prefilter, there is likely no
                    /// reason to specialize start states.
                    ///
                    /// This is disabled by default, but note that it is automatically
                    /// enabled (or disabled) if [`Config::prefilter`] is set. Namely, unless
                    /// `specialize_start_states` has already been set, [`Config::prefilter`]
                    /// will automatically enable or disable it based on whether a prefilter
                    /// is present or not, respectively. This is done because a prefilter's
                    /// effectiveness is rooted in being executed whenever the DFA is in a
                    /// start state, and that's only possible to do when they are specialized.
                    ///
                    /// Note that it is plausibly reasonable to _disable_ this option
                    /// explicitly while _enabling_ a prefilter. In that case, a prefilter
                    /// will still be run at the beginning of a search, but never again. This
                    /// in theory could strike a good balance if you're in a situation where a
                    /// prefilter is likely to produce many false positive candidates.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to enable start state specialization and then
                    /// shows how to check whether a state is a start state or not.
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, Input};
                    ///
                    /// let dfa = DFA::builder()
                    ///     .configure(DFA::config().specialize_start_states(true))
                    ///     .build(r"[a-z]+")?;
                    ///
                    /// let haystack = "123 foobar 4567".as_bytes();
                    /// let sid = dfa.start_state_forward(&Input::new(haystack))?;
                    /// // The ID returned by 'start_state_forward' will always be tagged as
                    /// // a start state when start state specialization is enabled.
                    /// assert!(dfa.is_special_state(sid));
                    /// assert!(dfa.is_start_state(sid));
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    ///
                    /// Compare the above with the default DFA configuration where start states
                    /// are _not_ specialized. In this case, the start state is not tagged at
                    /// all:
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, Input};
                    ///
                    /// let dfa = DFA::new(r"[a-z]+")?;
                    ///
                    /// let haystack = "123 foobar 4567";
                    /// let sid = dfa.start_state_forward(&Input::new(haystack))?;
                    /// // Start states are not special in the default configuration!
                    /// assert!(!dfa.is_special_state(sid));
                    /// assert!(!dfa.is_start_state(sid));
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn specialize_start_states(mut self, yes: bool) -> Config {
                        self.specialize_start_states = Some(yes);
                        self
                    }

                    /// Set a size limit on the total heap used by a DFA.
                    ///
                    /// This size limit is expressed in bytes and is applied during
                    /// determinization of an NFA into a DFA. If the DFA's heap usage, and only
                    /// the DFA, exceeds this configured limit, then determinization is stopped
                    /// and an error is returned.
                    ///
                    /// This limit does not apply to auxiliary storage used during
                    /// determinization that isn't part of the generated DFA.
                    ///
                    /// This limit is only applied during determinization. Currently, there is
                    /// no way to post-pone this check to after minimization if minimization
                    /// was enabled.
                    ///
                    /// The total limit on heap used during determinization is the sum of the
                    /// DFA and determinization size limits.
                    ///
                    /// The default is no limit.
                    ///
                    /// # Example
                    ///
                    /// This example shows a DFA that fails to build because of a configured
                    /// size limit. This particular example also serves as a cautionary tale
                    /// demonstrating just how big DFAs with large Unicode character classes
                    /// can get.
                    ///
                    /// ```
                    /// # if cfg!(miri) { return Ok(()); } // miri takes too long
                    /// use regex_automata::{dfa::{dense, Automaton}, Input};
                    ///
                    /// // 6MB isn't enough!
                    /// dense::Builder::new()
                    ///     .configure(dense::Config::new().dfa_size_limit(Some(6_000_000)))
                    ///     .build(r"\w{20}")
                    ///     .unwrap_err();
                    ///
                    /// // ... but 7MB probably is!
                    /// // (Note that DFA sizes aren't necessarily stable between releases.)
                    /// let dfa = dense::Builder::new()
                    ///     .configure(dense::Config::new().dfa_size_limit(Some(7_000_000)))
                    ///     .build(r"\w{20}")?;
                    /// let haystack = "A".repeat(20).into_bytes();
                    /// assert!(dfa.try_search_fwd(&Input::new(&haystack))?.is_some());
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    ///
                    /// While one needs a little more than 6MB to represent `\w{20}`, it
                    /// turns out that you only need a little more than 6KB to represent
                    /// `(?-u:\w{20})`. So only use Unicode if you need it!
                    ///
                    /// As with [`Config::determinize_size_limit`], the size of a DFA is
                    /// influenced by other factors, such as what start state configurations
                    /// to support. For example, if you only need unanchored searches and not
                    /// anchored searches, then configuring the DFA to only support unanchored
                    /// searches can reduce its size. By default, DFAs support both unanchored
                    /// and anchored searches.
                    ///
                    /// ```
                    /// # if cfg!(miri) { return Ok(()); } // miri takes too long
                    /// use regex_automata::{dfa::{dense, Automaton, StartKind}, Input};
                    ///
                    /// // 3MB isn't enough!
                    /// dense::Builder::new()
                    ///     .configure(dense::Config::new()
                    ///         .dfa_size_limit(Some(3_000_000))
                    ///         .start_kind(StartKind::Unanchored)
                    ///     )
                    ///     .build(r"\w{20}")
                    ///     .unwrap_err();
                    ///
                    /// // ... but 4MB probably is!
                    /// // (Note that DFA sizes aren't necessarily stable between releases.)
                    /// let dfa = dense::Builder::new()
                    ///     .configure(dense::Config::new()
                    ///         .dfa_size_limit(Some(4_000_000))
                    ///         .start_kind(StartKind::Unanchored)
                    ///     )
                    ///     .build(r"\w{20}")?;
                    /// let haystack = "A".repeat(20).into_bytes();
                    /// assert!(dfa.try_search_fwd(&Input::new(&haystack))?.is_some());
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn dfa_size_limit(mut self, bytes: Option<usize>) -> Config {
                        self.dfa_size_limit = Some(bytes);
                        self
                    }

                    /// Set a size limit on the total heap used by determinization.
                    ///
                    /// This size limit is expressed in bytes and is applied during
                    /// determinization of an NFA into a DFA. If the heap used for auxiliary
                    /// storage during determinization (memory that is not in the DFA but
                    /// necessary for building the DFA) exceeds this configured limit, then
                    /// determinization is stopped and an error is returned.
                    ///
                    /// This limit does not apply to heap used by the DFA itself.
                    ///
                    /// The total limit on heap used during determinization is the sum of the
                    /// DFA and determinization size limits.
                    ///
                    /// The default is no limit.
                    ///
                    /// # Example
                    ///
                    /// This example shows a DFA that fails to build because of a
                    /// configured size limit on the amount of heap space used by
                    /// determinization. This particular example complements the example for
                    /// [`Config::dfa_size_limit`] by demonstrating that not only does Unicode
                    /// potentially make DFAs themselves big, but it also results in more
                    /// auxiliary storage during determinization. (Although, auxiliary storage
                    /// is still not as much as the DFA itself.)
                    ///
                    /// ```
                    /// # if cfg!(miri) { return Ok(()); } // miri takes too long
                    /// # if !cfg!(target_pointer_width = "64") { return Ok(()); } // see #1039
                    /// use regex_automata::{dfa::{dense, Automaton}, Input};
                    ///
                    /// // 700KB isn't enough!
                    /// dense::Builder::new()
                    ///     .configure(dense::Config::new()
                    ///         .determinize_size_limit(Some(700_000))
                    ///     )
                    ///     .build(r"\w{20}")
                    ///     .unwrap_err();
                    ///
                    /// // ... but 800KB probably is!
                    /// // (Note that auxiliary storage sizes aren't necessarily stable between
                    /// // releases.)
                    /// let dfa = dense::Builder::new()
                    ///     .configure(dense::Config::new()
                    ///         .determinize_size_limit(Some(800_000))
                    ///     )
                    ///     .build(r"\w{20}")?;
                    /// let haystack = "A".repeat(20).into_bytes();
                    /// assert!(dfa.try_search_fwd(&Input::new(&haystack))?.is_some());
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    ///
                    /// Note that some parts of the configuration on a DFA can have a
                    /// big impact on how big the DFA is, and thus, how much memory is
                    /// used. For example, the default setting for [`Config::start_kind`] is
                    /// [`StartKind::Both`]. But if you only need an anchored search, for
                    /// example, then it can be much cheaper to build a DFA that only supports
                    /// anchored searches. (Running an unanchored search with it would panic.)
                    ///
                    /// ```
                    /// # if cfg!(miri) { return Ok(()); } // miri takes too long
                    /// # if !cfg!(target_pointer_width = "64") { return Ok(()); } // see #1039
                    /// use regex_automata::{
                    ///     dfa::{dense, Automaton, StartKind},
                    ///     Anchored, Input,
                    /// };
                    ///
                    /// // 200KB isn't enough!
                    /// dense::Builder::new()
                    ///     .configure(dense::Config::new()
                    ///         .determinize_size_limit(Some(200_000))
                    ///         .start_kind(StartKind::Anchored)
                    ///     )
                    ///     .build(r"\w{20}")
                    ///     .unwrap_err();
                    ///
                    /// // ... but 300KB probably is!
                    /// // (Note that auxiliary storage sizes aren't necessarily stable between
                    /// // releases.)
                    /// let dfa = dense::Builder::new()
                    ///     .configure(dense::Config::new()
                    ///         .determinize_size_limit(Some(300_000))
                    ///         .start_kind(StartKind::Anchored)
                    ///     )
                    ///     .build(r"\w{20}")?;
                    /// let haystack = "A".repeat(20).into_bytes();
                    /// let input = Input::new(&haystack).anchored(Anchored::Yes);
                    /// assert!(dfa.try_search_fwd(&input)?.is_some());
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn determinize_size_limit(mut self, bytes: Option<usize>) -> Config {
                        self.determinize_size_limit = Some(bytes);
                        self
                    }

                    /// Returns whether this configuration has enabled simple state
                    /// acceleration.
                    pub fn get_accelerate(&self) -> bool {
                        self.accelerate.unwrap_or(true)
                    }

                    /// Returns the prefilter attached to this configuration, if any.
                    pub fn get_prefilter(&self) -> Option<&Prefilter> {
                        self.pre.as_ref().unwrap_or(&None).as_ref()
                    }

                    /// Returns whether this configuration has enabled the expensive process
                    /// of minimizing a DFA.
                    pub fn get_minimize(&self) -> bool {
                        self.minimize.unwrap_or(false)
                    }

                    /// Returns the match semantics set in this configuration.
                    pub fn get_match_kind(&self) -> MatchKind {
                        self.match_kind.unwrap_or(MatchKind::LeftmostFirst)
                    }

                    /// Returns the starting state configuration for a DFA.
                    pub fn get_starts(&self) -> StartKind {
                        self.start_kind.unwrap_or(StartKind::Both)
                    }

                    /// Returns whether this configuration has enabled anchored starting states
                    /// for every pattern in the DFA.
                    pub fn get_starts_for_each_pattern(&self) -> bool {
                        self.starts_for_each_pattern.unwrap_or(false)
                    }

                    /// Returns whether this configuration has enabled byte classes or not.
                    /// This is typically a debugging oriented option, as disabling it confers
                    /// no speed benefit.
                    pub fn get_byte_classes(&self) -> bool {
                        self.byte_classes.unwrap_or(true)
                    }

                    /// Returns whether this configuration has enabled heuristic Unicode word
                    /// boundary support. When enabled, it is possible for a search to return
                    /// an error.
                    pub fn get_unicode_word_boundary(&self) -> bool {
                        self.unicode_word_boundary.unwrap_or(false)
                    }

                    /// Returns whether this configuration will instruct the DFA to enter a
                    /// quit state whenever the given byte is seen during a search. When at
                    /// least one byte has this enabled, it is possible for a search to return
                    /// an error.
                    pub fn get_quit(&self, byte: u8) -> bool {
                        self.quitset.map_or(false, |q| q.contains(byte))
                    }

                    /// Returns whether this configuration will instruct the DFA to
                    /// "specialize" start states. When enabled, the DFA will mark start states
                    /// as "special" so that search routines using the DFA can detect when
                    /// it's in a start state and do some kind of optimization (like run a
                    /// prefilter).
                    pub fn get_specialize_start_states(&self) -> bool {
                        self.specialize_start_states.unwrap_or(false)
                    }

                    /// Returns the DFA size limit of this configuration if one was set.
                    /// The size limit is total number of bytes on the heap that a DFA is
                    /// permitted to use. If the DFA exceeds this limit during construction,
                    /// then construction is stopped and an error is returned.
                    pub fn get_dfa_size_limit(&self) -> Option<usize> {
                        self.dfa_size_limit.unwrap_or(None)
                    }

                    /// Returns the determinization size limit of this configuration if one
                    /// was set. The size limit is total number of bytes on the heap that
                    /// determinization is permitted to use. If determinization exceeds this
                    /// limit during construction, then construction is stopped and an error is
                    /// returned.
                    ///
                    /// This is different from the DFA size limit in that this only applies to
                    /// the auxiliary storage used during determinization. Once determinization
                    /// is complete, this memory is freed.
                    ///
                    /// The limit on the total heap memory used is the sum of the DFA and
                    /// determinization size limits.
                    pub fn get_determinize_size_limit(&self) -> Option<usize> {
                        self.determinize_size_limit.unwrap_or(None)
                    }

                    /// Overwrite the default configuration such that the options in `o` are
                    /// always used. If an option in `o` is not set, then the corresponding
                    /// option in `self` is used. If it's not set in `self` either, then it
                    /// remains not set.
                    pub fn overwrite(&self, o: Config) -> Config {
                        Config {
                            accelerate: o.accelerate.or(self.accelerate),
                            pre: o.pre.or_else(|| self.pre.clone()),
                            minimize: o.minimize.or(self.minimize),
                            match_kind: o.match_kind.or(self.match_kind),
                            start_kind: o.start_kind.or(self.start_kind),
                            starts_for_each_pattern: o
                                .starts_for_each_pattern
                                .or(self.starts_for_each_pattern),
                            byte_classes: o.byte_classes.or(self.byte_classes),
                            unicode_word_boundary: o
                                .unicode_word_boundary
                                .or(self.unicode_word_boundary),
                            quitset: o.quitset.or(self.quitset),
                            specialize_start_states: o
                                .specialize_start_states
                                .or(self.specialize_start_states),
                            dfa_size_limit: o.dfa_size_limit.or(self.dfa_size_limit),
                            determinize_size_limit: o
                                .determinize_size_limit
                                .or(self.determinize_size_limit),
                        }
                    }
                }

                /// A builder for constructing a deterministic finite automaton from regular
                /// expressions.
                ///
                /// This builder provides two main things:
                ///
                /// 1. It provides a few different `build` routines for actually constructing
                /// a DFA from different kinds of inputs. The most convenient is
                /// [`Builder::build`], which builds a DFA directly from a pattern string. The
                /// most flexible is [`Builder::build_from_nfa`], which builds a DFA straight
                /// from an NFA.
                /// 2. The builder permits configuring a number of things.
                /// [`Builder::configure`] is used with [`Config`] to configure aspects of
                /// the DFA and the construction process itself. [`Builder::syntax`] and
                /// [`Builder::thompson`] permit configuring the regex parser and Thompson NFA
                /// construction, respectively. The syntax and thompson configurations only
                /// apply when building from a pattern string.
                ///
                /// This builder always constructs a *single* DFA. As such, this builder
                /// can only be used to construct regexes that either detect the presence
                /// of a match or find the end location of a match. A single DFA cannot
                /// produce both the start and end of a match. For that information, use a
                /// [`Regex`](crate::dfa::regex::Regex), which can be similarly configured
                /// using [`regex::Builder`](crate::dfa::regex::Builder). The main reason to
                /// use a DFA directly is if the end location of a match is enough for your use
                /// case. Namely, a `Regex` will construct two DFAs instead of one, since a
                /// second reverse DFA is needed to find the start of a match.
                ///
                /// Note that if one wants to build a sparse DFA, you must first build a dense
                /// DFA and convert that to a sparse DFA. There is no way to build a sparse
                /// DFA without first building a dense DFA.
                ///
                /// # Example
                ///
                /// This example shows how to build a minimized DFA that completely disables
                /// Unicode. That is:
                ///
                /// * Things such as `\w`, `.` and `\b` are no longer Unicode-aware. `\w`
                ///   and `\b` are ASCII-only while `.` matches any byte except for `\n`
                ///   (instead of any UTF-8 encoding of a Unicode scalar value except for
                ///   `\n`). Things that are Unicode only, such as `\pL`, are not allowed.
                /// * The pattern itself is permitted to match invalid UTF-8. For example,
                ///   things like `[^a]` that match any byte except for `a` are permitted.
                ///
                /// ```
                /// use regex_automata::{
                ///     dfa::{Automaton, dense},
                ///     util::syntax,
                ///     HalfMatch, Input,
                /// };
                ///
                /// let dfa = dense::Builder::new()
                ///     .configure(dense::Config::new().minimize(false))
                ///     .syntax(syntax::Config::new().unicode(false).utf8(false))
                ///     .build(r"foo[^b]ar.*")?;
                ///
                /// let haystack = b"\xFEfoo\xFFar\xE2\x98\xFF\n";
                /// let expected = Some(HalfMatch::must(0, 10));
                /// let got = dfa.try_search_fwd(&Input::new(haystack))?;
                /// assert_eq!(expected, got);
                ///
                /// # Ok::<(), Box<dyn std::error::Error>>(())
                /// ```
                #[cfg(feature = "dfa-build")]
                #[derive(Clone, Debug)]
                pub struct Builder {
                    config: Config,
                    #[cfg(feature = "syntax")]
                    thompson: thompson::Compiler,
                }

                #[cfg(feature = "dfa-build")]
                impl Builder {
                    /// Create a new dense DFA builder with the default configuration.
                    pub fn new() -> Builder {
                        Builder {
                            config: Config::default(),
                            #[cfg(feature = "syntax")]
                            thompson: thompson::Compiler::new(),
                        }
                    }

                    /// Build a DFA from the given pattern.
                    ///
                    /// If there was a problem parsing or compiling the pattern, then an error
                    /// is returned.
                    #[cfg(feature = "syntax")]
                    pub fn build(&self, pattern: &str) -> Result<OwnedDFA, BuildError> {
                        self.build_many(&[pattern])
                    }

                    /// Build a DFA from the given patterns.
                    ///
                    /// When matches are returned, the pattern ID corresponds to the index of
                    /// the pattern in the slice given.
                    #[cfg(feature = "syntax")]
                    pub fn build_many<P: AsRef<str>>(
                        &self,
                        patterns: &[P],
                    ) -> Result<OwnedDFA, BuildError> {
                        let nfa = self
                            .thompson
                            .clone()
                            // We can always forcefully disable captures because DFAs do not
                            // support them.
                            .configure(
                                thompson::Config::new()
                                    .which_captures(thompson::WhichCaptures::None),
                            )
                            .build_many(patterns)
                            .map_err(BuildError::nfa)?;
                        self.build_from_nfa(&nfa)
                    }

                    /// Build a DFA from the given NFA.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to build a DFA if you already have an NFA in
                    /// hand.
                    ///
                    /// ```
                    /// use regex_automata::{
                    ///     dfa::{Automaton, dense},
                    ///     nfa::thompson::NFA,
                    ///     HalfMatch, Input,
                    /// };
                    ///
                    /// let haystack = "foo123bar".as_bytes();
                    ///
                    /// // This shows how to set non-default options for building an NFA.
                    /// let nfa = NFA::compiler()
                    ///     .configure(NFA::config().shrink(true))
                    ///     .build(r"[0-9]+")?;
                    /// let dfa = dense::Builder::new().build_from_nfa(&nfa)?;
                    /// let expected = Some(HalfMatch::must(0, 6));
                    /// let got = dfa.try_search_fwd(&Input::new(haystack))?;
                    /// assert_eq!(expected, got);
                    ///
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn build_from_nfa(
                        &self,
                        nfa: &thompson::NFA,
                    ) -> Result<OwnedDFA, BuildError> {
                        let mut quitset = self.config.quitset.unwrap_or(ByteSet::empty());
                        if self.config.get_unicode_word_boundary()
                            && nfa.look_set_any().contains_word_unicode()
                        {
                            for b in 0x80..=0xFF {
                                quitset.add(b);
                            }
                        }
                        let classes = if !self.config.get_byte_classes() {
                            // DFAs will always use the equivalence class map, but enabling
                            // this option is useful for debugging. Namely, this will cause all
                            // transitions to be defined over their actual bytes instead of an
                            // opaque equivalence class identifier. The former is much easier
                            // to grok as a human.
                            ByteClasses::singletons()
                        } else {
                            let mut set = nfa.byte_class_set().clone();
                            // It is important to distinguish any "quit" bytes from all other
                            // bytes. Otherwise, a non-quit byte may end up in the same
                            // class as a quit byte, and thus cause the DFA to stop when it
                            // shouldn't.
                            //
                            // Test case:
                            //
                            //   regex-cli find match dense --unicode-word-boundary \
                            //     -p '^#' -p '\b10\.55\.182\.100\b' -y @conn.json.1000x.log
                            if !quitset.is_empty() {
                                set.add_set(&quitset);
                            }
                            set.byte_classes()
                        };

                        let mut dfa = DFA::initial(
                            classes,
                            nfa.pattern_len(),
                            self.config.get_starts(),
                            nfa.look_matcher(),
                            self.config.get_starts_for_each_pattern(),
                            self.config.get_prefilter().map(|p| p.clone()),
                            quitset,
                            Flags::from_nfa(&nfa),
                        )?;
                        determinize::Config::new()
                            .match_kind(self.config.get_match_kind())
                            .quit(quitset)
                            .dfa_size_limit(self.config.get_dfa_size_limit())
                            .determinize_size_limit(self.config.get_determinize_size_limit())
                            .run(nfa, &mut dfa)?;
                        if self.config.get_minimize() {
                            dfa.minimize();
                        }
                        if self.config.get_accelerate() {
                            dfa.accelerate();
                        }
                        // The state shuffling done before this point always assumes that start
                        // states should be marked as "special," even though it isn't the
                        // default configuration. State shuffling is complex enough as it is,
                        // so it's simpler to just "fix" our special state ID ranges to not
                        // include starting states after-the-fact.
                        if !self.config.get_specialize_start_states() {
                            dfa.special.set_no_special_start_states();
                        }
                        // Look for and set the universal starting states.
                        dfa.set_universal_starts();
                        Ok(dfa)
                    }

                    /// Apply the given dense DFA configuration options to this builder.
                    pub fn configure(&mut self, config: Config) -> &mut Builder {
                        self.config = self.config.overwrite(config);
                        self
                    }

                    /// Set the syntax configuration for this builder using
                    /// [`syntax::Config`](crate::util::syntax::Config).
                    ///
                    /// This permits setting things like case insensitivity, Unicode and multi
                    /// line mode.
                    ///
                    /// These settings only apply when constructing a DFA directly from a
                    /// pattern.
                    #[cfg(feature = "syntax")]
                    pub fn syntax(
                        &mut self,
                        config: crate::util::syntax::Config,
                    ) -> &mut Builder {
                        self.thompson.syntax(config);
                        self
                    }

                    /// Set the Thompson NFA configuration for this builder using
                    /// [`nfa::thompson::Config`](crate::nfa::thompson::Config).
                    ///
                    /// This permits setting things like whether the DFA should match the regex
                    /// in reverse or if additional time should be spent shrinking the size of
                    /// the NFA.
                    ///
                    /// These settings only apply when constructing a DFA directly from a
                    /// pattern.
                    #[cfg(feature = "syntax")]
                    pub fn thompson(&mut self, config: thompson::Config) -> &mut Builder {
                        self.thompson.configure(config);
                        self
                    }
                }

                #[cfg(feature = "dfa-build")]
                impl Default for Builder {
                    fn default() -> Builder {
                        Builder::new()
                    }
                }

                /// A convenience alias for an owned DFA. We use this particular instantiation a lot in this crate, so it's worth giving it a name.
                pub type OwnedDFA = DFA<::vec::Vec<u32>>;
                /// A dense table-based deterministic finite automaton (DFA).
                #[derive(Clone)]
                pub struct DFA<T>
                {
                    /// The transition table for this DFA.
                    tt: TransitionTable<T>,
                    /// The set of starting state identifiers for this DFA.
                    st: StartTable<T>,
                    /// The set of match states and the patterns that match for each corresponding match state.
                    ms: MatchStates<T>,
                    /// Information about which states are "special."
                    special: Special,
                    /// The accelerators for this DFA.
                    accels: Accels<T>,
                    /// Any prefilter attached to this DFA.
                    pre: Option<Prefilter>,
                    /// The set of "quit" bytes for this DFA.
                    quitset: ByteSet,
                    /// Various flags describing the behavior of this DFA.
                    flags: Flags,
                }
                
                impl OwnedDFA
                {
                    /// Parse the given regular expression using a default configuration and return the corresponding DFA.
                    pub fn new(pattern: &str) -> Result<OwnedDFA, BuildError> { Builder::new().build(pattern) }
                    /// Parse the given regular expressions using a default configuration and return the corresponding multi-DFA.
                    pub fn new_many<P: AsRef<str>>( patterns: &[P] ) -> Result<OwnedDFA, BuildError> 
                    {
                        Builder::new().build_many(patterns)
                    }
                }
                
                impl OwnedDFA
                {
                    /// Create a new DFA that matches every input.
                    pub fn always_match() -> Result<OwnedDFA, BuildError>
                    {
                        let nfa = thompson::NFA::always_match();
                        Builder::new().build_from_nfa(&nfa)
                    }
                    /// Create a new DFA that never matches any input.
                    pub fn never_match() -> Result<OwnedDFA, BuildError>
                    {
                        let nfa = thompson::NFA::never_match();
                        Builder::new().build_from_nfa(&nfa)
                    }
                    /// Create an initial DFA with the given equivalence classes, 
                    /// pattern length and whether anchored starting states 
                    /// are enabled for each pattern.
                    fn initial
                    (
                        classes: ByteClasses,
                        pattern_len: usize,
                        starts: StartKind,
                        lookm: &LookMatcher,
                        starts_for_each_pattern: bool,
                        pre: Option<Prefilter>,
                        quitset: ByteSet,
                        flags: Flags,
                    ) -> Result<OwnedDFA, BuildError>
                    {
                        let start_pattern_len = if starts_for_each_pattern { Some(pattern_len) } else { None };

                        Ok
                        (
                            DFA
                            {
                                tt: TransitionTable::minimal(classes),
                                st: StartTable::dead(starts, lookm, start_pattern_len)?,
                                ms: MatchStates::empty(pattern_len),
                                special: Special::new(),
                                accels: Accels::empty(),
                                pre,
                                quitset,
                                flags,
                            }
                        )
                    }
                }
                
                impl DFA<&[u32]>
                {
                    /// Return a new default dense DFA compiler configuration.
                    pub fn config() -> Config { Config::new() }
                    /// Create a new dense DFA builder with the default configuration.
                    pub fn builder() -> Builder { Builder::new() }
                }

                impl<T: AsRef<[u32]>> DFA<T>
                {
                    /// Cheaply return a borrowed version of this dense DFA.
                    pub fn as_ref(&self) -> DFA<&'_ [u32]>
                    {
                        DFA
                        {
                            tt: self.tt.as_ref(),
                            st: self.st.as_ref(),
                            ms: self.ms.as_ref(),
                            special: self.special,
                            accels: self.accels(),
                            pre: self.pre.clone(),
                            quitset: self.quitset,
                            flags: self.flags,
                        }
                    }

                    /// Return an owned version of this sparse DFA.
                    pub fn to_owned(&self) -> OwnedDFA
                    {
                        DFA
                        {
                            tt: self.tt.to_owned(),
                            st: self.st.to_owned(),
                            ms: self.ms.to_owned(),
                            special: self.special,
                            accels: self.accels().to_owned(),
                            pre: self.pre.clone(),
                            quitset: self.quitset,
                            flags: self.flags,
                        }
                    }
                    /// Returns the starting state configuration for this DFA.
                    pub fn start_kind(&self) -> StartKind { self.st.kind }
                    /// Returns the start byte map used for computing the `Start` configuration
                    /// at the beginning of a search.
                    pub fn start_map(&self) -> &StartByteMap { &self.st.start_map }
                    /// Returns true only if this DFA has starting states for each pattern.
                    pub fn starts_for_each_pattern(&self) -> bool { self.st.pattern_len.is_some() }
                    /// Returns the equivalence classes that make up the alphabet for this DFA.
                    pub fn byte_classes(&self) -> &ByteClasses { &self.tt.classes }
                    /// Returns the total number of elements in the alphabet for this DFA.
                    pub fn alphabet_len(&self) -> usize { self.tt.alphabet_len() }
                    /// Returns the total stride for every state in this DFA, expressed as the
                    /// exponent of a power of 2.
                    pub fn stride2(&self) -> usize { self.tt.stride2 }
                    /// Returns the total stride for every state in this DFA.
                    pub fn stride(&self) -> usize { self.tt.stride() }
                    /// Returns the memory usage, in bytes, of this DFA.
                    pub fn memory_usage(&self) -> usize
                    {
                        self.tt.memory_usage()
                        + self.st.memory_usage()
                        + self.ms.memory_usage() 
                        + self.accels.memory_usage()
                    }
                }
                /// Routines for converting a dense DFA to other representations, such as sparse DFAs or raw bytes suitable for persistent storage.
                impl<T: AsRef<[u32]>> DFA<T>
                {
                    /// Convert this dense DFA to a sparse DFA.
                    pub fn to_sparse(&self) -> Result<sparse::DFA<Vec<u8>>, BuildError> { sparse::DFA::from_dense(self) }
                    /// Serialize this DFA as raw bytes to a `Vec<u8>` in little endian
                    /// format.
                    pub fn to_bytes_little_endian(&self) -> (Vec<u8>, usize) {
                        self.to_bytes::<wire::LE>()
                    }

                    /// Serialize this DFA as raw bytes to a `Vec<u8>` in big endian
                    /// format. Upon success, the `Vec<u8>` and the initial padding length are
                    /// returned.
                    ///
                    /// The written bytes are guaranteed to be deserialized correctly and
                    /// without errors in a semver compatible release of this crate by a
                    /// `DFA`'s deserialization APIs (assuming all other criteria for the
                    /// deserialization APIs has been satisfied):
                    ///
                    /// * [`DFA::from_bytes`]
                    /// * [`DFA::from_bytes_unchecked`]
                    ///
                    /// The padding returned is non-zero if the returned `Vec<u8>` starts at
                    /// an address that does not have the same alignment as `u32`. The padding
                    /// corresponds to the number of leading bytes written to the returned
                    /// `Vec<u8>`.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to serialize and deserialize a DFA:
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};
                    ///
                    /// // Compile our original DFA.
                    /// let original_dfa = DFA::new("foo[0-9]+")?;
                    ///
                    /// // N.B. We use native endianness here to make the example work, but
                    /// // using to_bytes_big_endian would work on a big endian target.
                    /// let (buf, _) = original_dfa.to_bytes_native_endian();
                    /// // Even if buf has initial padding, DFA::from_bytes will automatically
                    /// // ignore it.
                    /// let dfa: DFA<&[u32]> = DFA::from_bytes(&buf)?.0;
                    ///
                    /// let expected = Some(HalfMatch::must(0, 8));
                    /// assert_eq!(expected, dfa.try_search_fwd(&Input::new("foo12345"))?);
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    #[cfg(feature = "dfa-build")]
                    pub fn to_bytes_big_endian(&self) -> (Vec<u8>, usize) {
                        self.to_bytes::<wire::BE>()
                    }

                    /// Serialize this DFA as raw bytes to a `Vec<u8>` in native endian
                    /// format. Upon success, the `Vec<u8>` and the initial padding length are
                    /// returned.
                    ///
                    /// The written bytes are guaranteed to be deserialized correctly and
                    /// without errors in a semver compatible release of this crate by a
                    /// `DFA`'s deserialization APIs (assuming all other criteria for the
                    /// deserialization APIs has been satisfied):
                    ///
                    /// * [`DFA::from_bytes`]
                    /// * [`DFA::from_bytes_unchecked`]
                    ///
                    /// The padding returned is non-zero if the returned `Vec<u8>` starts at
                    /// an address that does not have the same alignment as `u32`. The padding
                    /// corresponds to the number of leading bytes written to the returned
                    /// `Vec<u8>`.
                    ///
                    /// Generally speaking, native endian format should only be used when
                    /// you know that the target you're compiling the DFA for matches the
                    /// endianness of the target on which you're compiling DFA. For example,
                    /// if serialization and deserialization happen in the same process or on
                    /// the same machine. Otherwise, when serializing a DFA for use in a
                    /// portable environment, you'll almost certainly want to serialize _both_
                    /// a little endian and a big endian version and then load the correct one
                    /// based on the target's configuration.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to serialize and deserialize a DFA:
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};
                    ///
                    /// // Compile our original DFA.
                    /// let original_dfa = DFA::new("foo[0-9]+")?;
                    ///
                    /// let (buf, _) = original_dfa.to_bytes_native_endian();
                    /// // Even if buf has initial padding, DFA::from_bytes will automatically
                    /// // ignore it.
                    /// let dfa: DFA<&[u32]> = DFA::from_bytes(&buf)?.0;
                    ///
                    /// let expected = Some(HalfMatch::must(0, 8));
                    /// assert_eq!(expected, dfa.try_search_fwd(&Input::new("foo12345"))?);
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    #[cfg(feature = "dfa-build")]
                    pub fn to_bytes_native_endian(&self) -> (Vec<u8>, usize) {
                        self.to_bytes::<wire::NE>()
                    }

                    /// The implementation of the public `to_bytes` serialization methods,
                    /// which is generic over endianness.
                    #[cfg(feature = "dfa-build")]
                    fn to_bytes<E: Endian>(&self) -> (Vec<u8>, usize) {
                        let len = self.write_to_len();
                        let (mut buf, padding) = wire::alloc_aligned_buffer::<u32>(len);
                        // This should always succeed since the only possible serialization
                        // error is providing a buffer that's too small, but we've ensured that
                        // `buf` is big enough here.
                        self.as_ref().write_to::<E>(&mut buf[padding..]).unwrap();
                        (buf, padding)
                    }

                    /// Serialize this DFA as raw bytes to the given slice, in little endian
                    /// format. Upon success, the total number of bytes written to `dst` is
                    /// returned.
                    ///
                    /// The written bytes are guaranteed to be deserialized correctly and
                    /// without errors in a semver compatible release of this crate by a
                    /// `DFA`'s deserialization APIs (assuming all other criteria for the
                    /// deserialization APIs has been satisfied):
                    ///
                    /// * [`DFA::from_bytes`]
                    /// * [`DFA::from_bytes_unchecked`]
                    ///
                    /// Note that unlike the various `to_byte_*` routines, this does not write
                    /// any padding. Callers are responsible for handling alignment correctly.
                    ///
                    /// # Errors
                    ///
                    /// This returns an error if the given destination slice is not big enough
                    /// to contain the full serialized DFA. If an error occurs, then nothing
                    /// is written to `dst`.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to serialize and deserialize a DFA without
                    /// dynamic memory allocation.
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};
                    ///
                    /// // Compile our original DFA.
                    /// let original_dfa = DFA::new("foo[0-9]+")?;
                    ///
                    /// // Create a 4KB buffer on the stack to store our serialized DFA. We
                    /// // need to use a special type to force the alignment of our [u8; N]
                    /// // array to be aligned to a 4 byte boundary. Otherwise, deserializing
                    /// // the DFA may fail because of an alignment mismatch.
                    /// #[repr(C)]
                    /// struct Aligned<B: ?Sized> {
                    ///     _align: [u32; 0],
                    ///     bytes: B,
                    /// }
                    /// let mut buf = Aligned { _align: [], bytes: [0u8; 4 * (1<<10)] };
                    /// // N.B. We use native endianness here to make the example work, but
                    /// // using write_to_little_endian would work on a little endian target.
                    /// let written = original_dfa.write_to_native_endian(&mut buf.bytes)?;
                    /// let dfa: DFA<&[u32]> = DFA::from_bytes(&buf.bytes[..written])?.0;
                    ///
                    /// let expected = Some(HalfMatch::must(0, 8));
                    /// assert_eq!(expected, dfa.try_search_fwd(&Input::new("foo12345"))?);
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn write_to_little_endian(
                        &self,
                        dst: &mut [u8],
                    ) -> Result<usize, SerializeError> {
                        self.as_ref().write_to::<wire::LE>(dst)
                    }

                    /// Serialize this DFA as raw bytes to the given slice, in big endian
                    /// format. Upon success, the total number of bytes written to `dst` is
                    /// returned.
                    ///
                    /// The written bytes are guaranteed to be deserialized correctly and
                    /// without errors in a semver compatible release of this crate by a
                    /// `DFA`'s deserialization APIs (assuming all other criteria for the
                    /// deserialization APIs has been satisfied):
                    ///
                    /// * [`DFA::from_bytes`]
                    /// * [`DFA::from_bytes_unchecked`]
                    ///
                    /// Note that unlike the various `to_byte_*` routines, this does not write
                    /// any padding. Callers are responsible for handling alignment correctly.
                    ///
                    /// # Errors
                    ///
                    /// This returns an error if the given destination slice is not big enough
                    /// to contain the full serialized DFA. If an error occurs, then nothing
                    /// is written to `dst`.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to serialize and deserialize a DFA without
                    /// dynamic memory allocation.
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};
                    ///
                    /// // Compile our original DFA.
                    /// let original_dfa = DFA::new("foo[0-9]+")?;
                    ///
                    /// // Create a 4KB buffer on the stack to store our serialized DFA. We
                    /// // need to use a special type to force the alignment of our [u8; N]
                    /// // array to be aligned to a 4 byte boundary. Otherwise, deserializing
                    /// // the DFA may fail because of an alignment mismatch.
                    /// #[repr(C)]
                    /// struct Aligned<B: ?Sized> {
                    ///     _align: [u32; 0],
                    ///     bytes: B,
                    /// }
                    /// let mut buf = Aligned { _align: [], bytes: [0u8; 4 * (1<<10)] };
                    /// // N.B. We use native endianness here to make the example work, but
                    /// // using write_to_big_endian would work on a big endian target.
                    /// let written = original_dfa.write_to_native_endian(&mut buf.bytes)?;
                    /// let dfa: DFA<&[u32]> = DFA::from_bytes(&buf.bytes[..written])?.0;
                    ///
                    /// let expected = Some(HalfMatch::must(0, 8));
                    /// assert_eq!(expected, dfa.try_search_fwd(&Input::new("foo12345"))?);
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn write_to_big_endian(
                        &self,
                        dst: &mut [u8],
                    ) -> Result<usize, SerializeError> {
                        self.as_ref().write_to::<wire::BE>(dst)
                    }

                    /// Serialize this DFA as raw bytes to the given slice, in native endian
                    /// format. Upon success, the total number of bytes written to `dst` is
                    /// returned.
                    ///
                    /// The written bytes are guaranteed to be deserialized correctly and
                    /// without errors in a semver compatible release of this crate by a
                    /// `DFA`'s deserialization APIs (assuming all other criteria for the
                    /// deserialization APIs has been satisfied):
                    ///
                    /// * [`DFA::from_bytes`]
                    /// * [`DFA::from_bytes_unchecked`]
                    ///
                    /// Generally speaking, native endian format should only be used when
                    /// you know that the target you're compiling the DFA for matches the
                    /// endianness of the target on which you're compiling DFA. For example,
                    /// if serialization and deserialization happen in the same process or on
                    /// the same machine. Otherwise, when serializing a DFA for use in a
                    /// portable environment, you'll almost certainly want to serialize _both_
                    /// a little endian and a big endian version and then load the correct one
                    /// based on the target's configuration.
                    ///
                    /// Note that unlike the various `to_byte_*` routines, this does not write
                    /// any padding. Callers are responsible for handling alignment correctly.
                    ///
                    /// # Errors
                    ///
                    /// This returns an error if the given destination slice is not big enough
                    /// to contain the full serialized DFA. If an error occurs, then nothing
                    /// is written to `dst`.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to serialize and deserialize a DFA without
                    /// dynamic memory allocation.
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};
                    ///
                    /// // Compile our original DFA.
                    /// let original_dfa = DFA::new("foo[0-9]+")?;
                    ///
                    /// // Create a 4KB buffer on the stack to store our serialized DFA. We
                    /// // need to use a special type to force the alignment of our [u8; N]
                    /// // array to be aligned to a 4 byte boundary. Otherwise, deserializing
                    /// // the DFA may fail because of an alignment mismatch.
                    /// #[repr(C)]
                    /// struct Aligned<B: ?Sized> {
                    ///     _align: [u32; 0],
                    ///     bytes: B,
                    /// }
                    /// let mut buf = Aligned { _align: [], bytes: [0u8; 4 * (1<<10)] };
                    /// let written = original_dfa.write_to_native_endian(&mut buf.bytes)?;
                    /// let dfa: DFA<&[u32]> = DFA::from_bytes(&buf.bytes[..written])?.0;
                    ///
                    /// let expected = Some(HalfMatch::must(0, 8));
                    /// assert_eq!(expected, dfa.try_search_fwd(&Input::new("foo12345"))?);
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub fn write_to_native_endian(
                        &self,
                        dst: &mut [u8],
                    ) -> Result<usize, SerializeError> {
                        self.as_ref().write_to::<wire::NE>(dst)
                    }

                    /// Return the total number of bytes required to serialize this DFA.
                    ///
                    /// This is useful for determining the size of the buffer required to pass
                    /// to one of the serialization routines:
                    ///
                    /// * [`DFA::write_to_little_endian`]
                    /// * [`DFA::write_to_big_endian`]
                    /// * [`DFA::write_to_native_endian`]
                    ///
                    /// Passing a buffer smaller than the size returned by this method will
                    /// result in a serialization error. Serialization routines are guaranteed
                    /// to succeed when the buffer is big enough.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to dynamically allocate enough room to serialize
                    /// a DFA.
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};
                    ///
                    /// let original_dfa = DFA::new("foo[0-9]+")?;
                    ///
                    /// let mut buf = vec![0; original_dfa.write_to_len()];
                    /// // This is guaranteed to succeed, because the only serialization error
                    /// // that can occur is when the provided buffer is too small. But
                    /// // write_to_len guarantees a correct size.
                    /// let written = original_dfa.write_to_native_endian(&mut buf).unwrap();
                    /// // But this is not guaranteed to succeed! In particular,
                    /// // deserialization requires proper alignment for &[u32], but our buffer
                    /// // was allocated as a &[u8] whose required alignment is smaller than
                    /// // &[u32]. However, it's likely to work in practice because of how most
                    /// // allocators work. So if you write code like this, make sure to either
                    /// // handle the error correctly and/or run it under Miri since Miri will
                    /// // likely provoke the error by returning Vec<u8> buffers with alignment
                    /// // less than &[u32].
                    /// let dfa: DFA<&[u32]> = match DFA::from_bytes(&buf[..written]) {
                    ///     // As mentioned above, it is legal for an error to be returned
                    ///     // here. It is quite difficult to get a Vec<u8> with a guaranteed
                    ///     // alignment equivalent to Vec<u32>.
                    ///     Err(_) => return Ok(()),
                    ///     Ok((dfa, _)) => dfa,
                    /// };
                    ///
                    /// let expected = Some(HalfMatch::must(0, 8));
                    /// assert_eq!(expected, dfa.try_search_fwd(&Input::new("foo12345"))?);
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    ///
                    /// Note that this example isn't actually guaranteed to work! In
                    /// particular, if `buf` is not aligned to a 4-byte boundary, then the
                    /// `DFA::from_bytes` call will fail. If you need this to work, then you
                    /// either need to deal with adding some initial padding yourself, or use
                    /// one of the `to_bytes` methods, which will do it for you.
                    pub fn write_to_len(&self) -> usize {
                        wire::write_label_len(LABEL)
                        + wire::write_endianness_check_len()
                        + wire::write_version_len()
                        + size_of::<u32>() // unused, intended for future flexibility
                        + self.flags.write_to_len()
                        + self.tt.write_to_len()
                        + self.st.write_to_len()
                        + self.ms.write_to_len()
                        + self.special.write_to_len()
                        + self.accels.write_to_len()
                        + self.quitset.write_to_len()
                    }
                }

                impl<'a> DFA<&'a [u32]> {
                    /// Safely deserialize a DFA with a specific state identifier
                    /// representation. Upon success, this returns both the deserialized DFA
                    /// and the number of bytes read from the given slice. Namely, the contents
                    /// of the slice beyond the DFA are not read.
                    ///
                    /// Deserializing a DFA using this routine will never allocate heap memory.
                    /// For safety purposes, the DFA's transition table will be verified such
                    /// that every transition points to a valid state. If this verification is
                    /// too costly, then a [`DFA::from_bytes_unchecked`] API is provided, which
                    /// will always execute in constant time.
                    ///
                    /// The bytes given must be generated by one of the serialization APIs
                    /// of a `DFA` using a semver compatible release of this crate. Those
                    /// include:
                    ///
                    /// * [`DFA::to_bytes_little_endian`]
                    /// * [`DFA::to_bytes_big_endian`]
                    /// * [`DFA::to_bytes_native_endian`]
                    /// * [`DFA::write_to_little_endian`]
                    /// * [`DFA::write_to_big_endian`]
                    /// * [`DFA::write_to_native_endian`]
                    ///
                    /// The `to_bytes` methods allocate and return a `Vec<u8>` for you, along
                    /// with handling alignment correctly. The `write_to` methods do not
                    /// allocate and write to an existing slice (which may be on the stack).
                    /// Since deserialization always uses the native endianness of the target
                    /// platform, the serialization API you use should match the endianness of
                    /// the target platform. (It's often a good idea to generate serialized
                    /// DFAs for both forms of endianness and then load the correct one based
                    /// on endianness.)
                    ///
                    /// # Errors
                    ///
                    /// Generally speaking, it's easier to state the conditions in which an
                    /// error is _not_ returned. All of the following must be true:
                    ///
                    /// * The bytes given must be produced by one of the serialization APIs
                    ///   on this DFA, as mentioned above.
                    /// * The endianness of the target platform matches the endianness used to
                    ///   serialized the provided DFA.
                    /// * The slice given must have the same alignment as `u32`.
                    ///
                    /// If any of the above are not true, then an error will be returned.
                    ///
                    /// # Panics
                    ///
                    /// This routine will never panic for any input.
                    ///
                    /// # Example
                    ///
                    /// This example shows how to serialize a DFA to raw bytes, deserialize it
                    /// and then use it for searching.
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};
                    ///
                    /// let initial = DFA::new("foo[0-9]+")?;
                    /// let (bytes, _) = initial.to_bytes_native_endian();
                    /// let dfa: DFA<&[u32]> = DFA::from_bytes(&bytes)?.0;
                    ///
                    /// let expected = Some(HalfMatch::must(0, 8));
                    /// assert_eq!(expected, dfa.try_search_fwd(&Input::new("foo12345"))?);
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    ///
                    /// # Example: dealing with alignment and padding
                    ///
                    /// In the above example, we used the `to_bytes_native_endian` method to
                    /// serialize a DFA, but we ignored part of its return value corresponding
                    /// to padding added to the beginning of the serialized DFA. This is OK
                    /// because deserialization will skip this initial padding. What matters
                    /// is that the address immediately following the padding has an alignment
                    /// that matches `u32`. That is, the following is an equivalent but
                    /// alternative way to write the above example:
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};
                    ///
                    /// let initial = DFA::new("foo[0-9]+")?;
                    /// // Serialization returns the number of leading padding bytes added to
                    /// // the returned Vec<u8>.
                    /// let (bytes, pad) = initial.to_bytes_native_endian();
                    /// let dfa: DFA<&[u32]> = DFA::from_bytes(&bytes[pad..])?.0;
                    ///
                    /// let expected = Some(HalfMatch::must(0, 8));
                    /// assert_eq!(expected, dfa.try_search_fwd(&Input::new("foo12345"))?);
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    ///
                    /// This padding is necessary because Rust's standard library does
                    /// not expose any safe and robust way of creating a `Vec<u8>` with a
                    /// guaranteed alignment other than 1. Now, in practice, the underlying
                    /// allocator is likely to provide a `Vec<u8>` that meets our alignment
                    /// requirements, which means `pad` is zero in practice most of the time.
                    ///
                    /// The purpose of exposing the padding like this is flexibility for the
                    /// caller. For example, if one wants to embed a serialized DFA into a
                    /// compiled program, then it's important to guarantee that it starts at a
                    /// `u32`-aligned address. The simplest way to do this is to discard the
                    /// padding bytes and set it up so that the serialized DFA itself begins at
                    /// a properly aligned address. We can show this in two parts. The first
                    /// part is serializing the DFA to a file:
                    ///
                    /// ```no_run
                    /// use regex_automata::dfa::dense::DFA;
                    ///
                    /// let dfa = DFA::new("foo[0-9]+")?;
                    ///
                    /// let (bytes, pad) = dfa.to_bytes_big_endian();
                    /// // Write the contents of the DFA *without* the initial padding.
                    /// std::fs::write("foo.bigendian.dfa", &bytes[pad..])?;
                    ///
                    /// // Do it again, but this time for little endian.
                    /// let (bytes, pad) = dfa.to_bytes_little_endian();
                    /// std::fs::write("foo.littleendian.dfa", &bytes[pad..])?;
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    ///
                    /// And now the second part is embedding the DFA into the compiled program
                    /// and deserializing it at runtime on first use. We use conditional
                    /// compilation to choose the correct endianness.
                    ///
                    /// ```no_run
                    /// use regex_automata::{
                    ///     dfa::{Automaton, dense::DFA},
                    ///     util::{lazy::Lazy, wire::AlignAs},
                    ///     HalfMatch, Input,
                    /// };
                    ///
                    /// // This crate provides its own "lazy" type, kind of like
                    /// // lazy_static! or once_cell::sync::Lazy. But it works in no-alloc
                    /// // no-std environments and let's us write this using completely
                    /// // safe code.
                    /// static RE: Lazy<DFA<&'static [u32]>> = Lazy::new(|| {
                    ///     # const _: &str = stringify! {
                    ///     // This assignment is made possible (implicitly) via the
                    ///     // CoerceUnsized trait. This is what guarantees that our
                    ///     // bytes are stored in memory on a 4 byte boundary. You
                    ///     // *must* do this or something equivalent for correct
                    ///     // deserialization.
                    ///     static ALIGNED: &AlignAs<[u8], u32> = &AlignAs {
                    ///         _align: [],
                    ///         #[cfg(target_endian = "big")]
                    ///         bytes: *include_bytes!("foo.bigendian.dfa"),
                    ///         #[cfg(target_endian = "little")]
                    ///         bytes: *include_bytes!("foo.littleendian.dfa"),
                    ///     };
                    ///     # };
                    ///     # static ALIGNED: &AlignAs<[u8], u32> = &AlignAs {
                    ///     #     _align: [],
                    ///     #     bytes: [],
                    ///     # };
                    ///
                    ///     let (dfa, _) = DFA::from_bytes(&ALIGNED.bytes)
                    ///         .expect("serialized DFA should be valid");
                    ///     dfa
                    /// });
                    ///
                    /// let expected = Ok(Some(HalfMatch::must(0, 8)));
                    /// assert_eq!(expected, RE.try_search_fwd(&Input::new("foo12345")));
                    /// ```
                    ///
                    /// An alternative to [`util::lazy::Lazy`](crate::util::lazy::Lazy)
                    /// is [`lazy_static`](https://crates.io/crates/lazy_static) or
                    /// [`once_cell`](https://crates.io/crates/once_cell), which provide
                    /// stronger guarantees (like the initialization function only being
                    /// executed once). And `once_cell` in particular provides a more
                    /// expressive API. But a `Lazy` value from this crate is likely just fine
                    /// in most circumstances.
                    ///
                    /// Note that regardless of which initialization method you use, you
                    /// will still need to use the [`AlignAs`](crate::util::wire::AlignAs)
                    /// trick above to force correct alignment, but this is safe to do and
                    /// `from_bytes` will return an error if you get it wrong.
                    pub fn from_bytes(
                        slice: &'a [u8],
                    ) -> Result<(DFA<&'a [u32]>, usize), DeserializeError> {
                        // SAFETY: This is safe because we validate the transition table, start
                        // table, match states and accelerators below. If any validation fails,
                        // then we return an error.
                        let (dfa, nread) = unsafe { DFA::from_bytes_unchecked(slice)? };
                        dfa.tt.validate(&dfa)?;
                        dfa.st.validate(&dfa)?;
                        dfa.ms.validate(&dfa)?;
                        dfa.accels.validate()?;
                        // N.B. dfa.special doesn't have a way to do unchecked deserialization,
                        // so it has already been validated.
                        for state in dfa.states() {
                            // If the state is an accel state, then it must have a non-empty
                            // accelerator.
                            if dfa.is_accel_state(state.id()) {
                                let index = dfa.accelerator_index(state.id());
                                if index >= dfa.accels.len() {
                                    return Err(DeserializeError::generic(
                                        "found DFA state with invalid accelerator index",
                                    ));
                                }
                                let needles = dfa.accels.needles(index);
                                if !(1 <= needles.len() && needles.len() <= 3) {
                                    return Err(DeserializeError::generic(
                                        "accelerator needles has invalid length",
                                    ));
                                }
                            }
                        }
                        Ok((dfa, nread))
                    }

                    /// Deserialize a DFA with a specific state identifier representation in
                    /// constant time by omitting the verification of the validity of the
                    /// transition table and other data inside the DFA.
                    ///
                    /// This is just like [`DFA::from_bytes`], except it can potentially return
                    /// a DFA that exhibits undefined behavior if its transition table contains
                    /// invalid state identifiers.
                    ///
                    /// This routine is useful if you need to deserialize a DFA cheaply
                    /// and cannot afford the transition table validation performed by
                    /// `from_bytes`.
                    ///
                    /// # Example
                    ///
                    /// ```
                    /// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};
                    ///
                    /// let initial = DFA::new("foo[0-9]+")?;
                    /// let (bytes, _) = initial.to_bytes_native_endian();
                    /// // SAFETY: This is guaranteed to be safe since the bytes given come
                    /// // directly from a compatible serialization routine.
                    /// let dfa: DFA<&[u32]> = unsafe { DFA::from_bytes_unchecked(&bytes)?.0 };
                    ///
                    /// let expected = Some(HalfMatch::must(0, 8));
                    /// assert_eq!(expected, dfa.try_search_fwd(&Input::new("foo12345"))?);
                    /// # Ok::<(), Box<dyn std::error::Error>>(())
                    /// ```
                    pub unsafe fn from_bytes_unchecked(
                        slice: &'a [u8],
                    ) -> Result<(DFA<&'a [u32]>, usize), DeserializeError> {
                        let mut nr = 0;

                        nr += wire::skip_initial_padding(slice);
                        wire::check_alignment::<StateID>(&slice[nr..])?;
                        nr += wire::read_label(&slice[nr..], LABEL)?;
                        nr += wire::read_endianness_check(&slice[nr..])?;
                        nr += wire::read_version(&slice[nr..], VERSION)?;

                        let _unused = wire::try_read_u32(&slice[nr..], "unused space")?;
                        nr += size_of::<u32>();

                        let (flags, nread) = Flags::from_bytes(&slice[nr..])?;
                        nr += nread;

                        let (tt, nread) = TransitionTable::from_bytes_unchecked(&slice[nr..])?;
                        nr += nread;

                        let (st, nread) = StartTable::from_bytes_unchecked(&slice[nr..])?;
                        nr += nread;

                        let (ms, nread) = MatchStates::from_bytes_unchecked(&slice[nr..])?;
                        nr += nread;

                        let (special, nread) = Special::from_bytes(&slice[nr..])?;
                        nr += nread;
                        special.validate_state_len(tt.len(), tt.stride2)?;

                        let (accels, nread) = Accels::from_bytes_unchecked(&slice[nr..])?;
                        nr += nread;

                        let (quitset, nread) = ByteSet::from_bytes(&slice[nr..])?;
                        nr += nread;

                        // Prefilters don't support serialization, so they're always absent.
                        let pre = None;
                        Ok((DFA { tt, st, ms, special, accels, pre, quitset, flags }, nr))
                    }

                    /// The implementation of the public `write_to` serialization methods,
                    /// which is generic over endianness.
                    ///
                    /// This is defined only for &[u32] to reduce binary size/compilation time.
                    fn write_to<E: Endian>(
                        &self,
                        mut dst: &mut [u8],
                    ) -> Result<usize, SerializeError> {
                        let nwrite = self.write_to_len();
                        if dst.len() < nwrite {
                            return Err(SerializeError::buffer_too_small("dense DFA"));
                        }
                        dst = &mut dst[..nwrite];

                        let mut nw = 0;
                        nw += wire::write_label(LABEL, &mut dst[nw..])?;
                        nw += wire::write_endianness_check::<E>(&mut dst[nw..])?;
                        nw += wire::write_version::<E>(VERSION, &mut dst[nw..])?;
                        nw += {
                            // Currently unused, intended for future flexibility
                            E::write_u32(0, &mut dst[nw..]);
                            size_of::<u32>()
                        };
                        nw += self.flags.write_to::<E>(&mut dst[nw..])?;
                        nw += self.tt.write_to::<E>(&mut dst[nw..])?;
                        nw += self.st.write_to::<E>(&mut dst[nw..])?;
                        nw += self.ms.write_to::<E>(&mut dst[nw..])?;
                        nw += self.special.write_to::<E>(&mut dst[nw..])?;
                        nw += self.accels.write_to::<E>(&mut dst[nw..])?;
                        nw += self.quitset.write_to::<E>(&mut dst[nw..])?;
                        Ok(nw)
                    }
                }

                /// Other routines that work for all `T`.
                impl<T> DFA<T> {
                    /// Set or unset the prefilter attached to this DFA.
                    ///
                    /// This is useful when one has deserialized a DFA from `&[u8]`.
                    /// Deserialization does not currently include prefilters, so if you
                    /// want prefilter acceleration, you'll need to rebuild it and attach
                    /// it here.
                    pub fn set_prefilter(&mut self, prefilter: Option<Prefilter>) {
                        self.pre = prefilter
                    }
                }

                // The following methods implement mutable routines on the internal
                // representation of a DFA. As such, we must fix the first type parameter to a
                // `Vec<u32>` since a generic `T: AsRef<[u32]>` does not permit mutation. We
                // can get away with this because these methods are internal to the crate and
                // are exclusively used during construction of the DFA.
                #[cfg(feature = "dfa-build")]
                impl OwnedDFA {
                    /// Add a start state of this DFA.
                    pub fn set_start_state(
                        &mut self,
                        anchored: Anchored,
                        start: Start,
                        id: StateID,
                    ) {
                        assert!(self.tt.is_valid(id), "invalid start state");
                        self.st.set_start(anchored, start, id);
                    }
                    /// Set the given transition to this DFA. Both the `from` and `to` states must already exist.
                    pub fn set_transition( &mut self, from: StateID, byte: alphabet::Unit, to: StateID )
                    { self.tt.set(from, byte, to); }
                    /// An empty state (a state where all transitions lead to a dead state)
                    /// and return its identifier.
                    pub fn add_empty_state(&mut self) -> Result<StateID, BuildError> { self.tt.add_empty_state() }
                    /// Swap the two states given in the transition table.
                    pub fn swap_states(&mut self, id1: StateID, id2: StateID) { self.tt.swap(id1, id2); }
                    /// Remap all of the state identifiers in this DFA according to the map function given.
                    pub fn remap(&mut self, map: impl Fn(StateID) -> StateID)
                    {
                        for sid in self.tt.table_mut().iter_mut()
                        { *sid = map(*sid); }

                        for sid in self.st.table_mut().iter_mut()
                        { *sid = map(*sid); }
                    }
                    /// Remap the transitions for the state given according to the function given.
                    pub fn remap_state( &mut self, id: StateID, map: impl Fn(StateID) -> StateID )
                    { self.tt.remap(id, map); }
                    /// Truncate the states in this DFA to the given length.
                    pub fn truncate_states(&mut self, len: usize) { self.tt.truncate(len); }
                    /// Minimize this DFA in place using Hopcroft's algorithm.
                    pub fn minimize(&mut self) { Minimizer::new(self).run(); }
                    /// Updates the match state pattern ID map to use the one provided.
                    pub fn set_pattern_map( &mut self, map: &BTreeMap<StateID, Vec<PatternID>>, ) -> Result<(), BuildError>
                    {
                        self.ms = self.ms.new_with_map(map)?;
                        Ok(())
                    }
                    /// Find states that have a small number of non-loop transitions and mark
                    /// them as candidates for acceleration during search.
                    pub fn accelerate(&mut self)
                    {
                        if self.state_len() <= 2 { return; }
                        let mut accels = BTreeMap::new();
                        let (mut cmatch, mut cstart, mut cnormal) = (0, 0, 0);
                        
                        for state in self.states()
                        {
                            if let Some(accel) = state.accelerate(self.byte_classes())
                            {
                                debug!
                                (
                                    "accelerating full DFA state {}: {:?}",
                                    state.id().as_usize(),
                                    accel,
                                );

                                accels.insert(state.id(), accel);

                                if self.is_match_state(state.id())
                                {
                                    cmatch += 1;
                                }
                                else if self.is_start_state(state.id()) { cstart += 1; }
                                else
                                {
                                    assert!(!self.is_dead_state(state.id()));
                                    assert!(!self.is_quit_state(state.id()));
                                    cnormal += 1;
                                }
                            }
                        }
                        
                        if accels.is_empty() { return; }

                        let original_accels_len = accels.len();
                        
                        let mut remapper = Remapper::new(self);
                        
                        let mut new_matches = self.ms.to_map(self);
                        
                        self.special.min_accel = StateID::MAX;
                        self.special.max_accel = StateID::ZERO;
                        let update_special_accel = | special: &mut Special, accel_id: StateID | 
                        {
                            special.min_accel = cmp::min(special.min_accel, accel_id);
                            special.max_accel = cmp::max(special.max_accel, accel_id);
                        };
                            
                        if cmatch > 0 && self.special.matches() {
                            let mut next_id = self.special.max_match;
                            let mut cur_id = next_id;
                            while cur_id >= self.special.min_match {
                                if let Some(accel) = accels.remove(&cur_id) {
                                    accels.insert(next_id, accel);
                                    update_special_accel(&mut self.special, next_id);
                                    
                                    if cur_id != next_id {
                                        remapper.swap(self, cur_id, next_id);
                                        
                                        let cur_pids = new_matches.remove(&cur_id).unwrap();
                                        let next_pids = new_matches.remove(&next_id).unwrap();
                                        new_matches.insert(cur_id, next_pids);
                                        new_matches.insert(next_id, cur_pids);
                                    }
                                    next_id = self.tt.prev_state_id(next_id);
                                }
                                cur_id = self.tt.prev_state_id(cur_id);
                            }
                        }
                        
                        if cnormal > 0
                        {   
                            let mut next_start_id = self.special.min_start;
                            let mut cur_id = self.to_state_id(self.state_len() - 1);
                            
                            let mut next_norm_id =
                                self.tt.next_state_id(self.special.max_start);
                            while cur_id >= next_norm_id {
                                if let Some(accel) = accels.remove(&cur_id) {
                                    remapper.swap(self, next_start_id, cur_id);
                                    remapper.swap(self, next_norm_id, cur_id);
                                    
                                    if let Some(accel2) = accels.remove(&next_norm_id) {
                                        accels.insert(cur_id, accel2);
                                    }
                                    if let Some(accel2) = accels.remove(&next_start_id) {
                                        accels.insert(next_norm_id, accel2);
                                    }
                                    accels.insert(next_start_id, accel);
                                    update_special_accel(&mut self.special, next_start_id);
                                    
                                    self.special.min_start =
                                        self.tt.next_state_id(self.special.min_start);
                                    self.special.max_start =
                                        self.tt.next_state_id(self.special.max_start);
                                    next_start_id = self.tt.next_state_id(next_start_id);
                                    next_norm_id = self.tt.next_state_id(next_norm_id);
                                }
                                
                                if !accels.contains_key(&cur_id) {
                                    cur_id = self.tt.prev_state_id(cur_id);
                                }
                            }
                        }
                        
                        if cstart > 0
                        {
                            let mut next_id = self.special.min_start;
                            let mut cur_id = next_id;
                            while cur_id <= self.special.max_start
                            {
                                if let Some(accel) = accels.remove(&cur_id)
                                {
                                    remapper.swap(self, cur_id, next_id);
                                    accels.insert(next_id, accel);
                                    update_special_accel(&mut self.special, next_id);
                                    next_id = self.tt.next_state_id(next_id);
                                }

                                cur_id = self.tt.next_state_id(cur_id);
                            }
                        }
                        
                        remapper.remap(self);
                        
                        self.set_pattern_map(&new_matches).unwrap();
                        self.special.set_max();
                        self.special.validate().expect("special state ranges should validate");
                        self.special
                        .validate_state_len(self.state_len(), self.stride2())
                        .expect( "special state ranges should be consistent with state length", );
                        
                        assert_eq!
                        (
                            self.special.accel_len(self.stride()),
                            original_accels_len,
                            "mismatch with expected number of accelerated states",
                        );
                        
                        let mut prev: Option<StateID> = None;
                        
                        for (id, accel) in accels
                        {
                            assert!(prev.map_or(true, |p| self.tt.next_state_id(p) == id));
                            prev = Some(id);
                            self.accels.add(accel);
                        }
                    }
                    /// Shuffle the states in this DFA so that starting states, match
                    /// states and accelerated states are all contiguous.
                    pub fn shuffle
                    (
                        &mut self,
                        mut matches: BTreeMap<StateID, Vec<PatternID>>,
                    ) -> Result<(), BuildError>
                    {
                        self.special.quit_id = self.to_state_id(1);
                        
                        if self.state_len() <= 2
                        {
                            self.special.set_max();
                            return Ok(());
                        }
                        
                        let mut is_start: BTreeSet<StateID> = BTreeSet::new();
                        for (start_id, _, _) in self.starts()
                        {
                            if start_id == DEAD { continue; }

                            assert!
                            (
                                !matches.contains_key(&start_id),
                                "{start_id:?} is both a start and a match state, \
                                which is not allowed",
                            );

                            is_start.insert(start_id);
                        }
                        
                        let mut remapper = Remapper::new(self);

                        // Shuffle matching states.
                        if matches.is_empty() 
                        {
                            self.special.min_match = DEAD;
                            self.special.max_match = DEAD;
                        }
                        else
                        {
                            let mut next_id = self.to_state_id(2);
                            let mut new_matches = BTreeMap::new();
                            self.special.min_match = next_id;

                            for (id, pids) in matches
                            {
                                remapper.swap(self, next_id, id);
                                new_matches.insert(next_id, pids);
                                
                                if is_start.contains(&next_id)
                                {
                                    is_start.remove(&next_id);
                                    is_start.insert(id);
                                }

                                next_id = self.tt.next_state_id(next_id);
                            }

                            matches = new_matches;
                            
                            self.special.max_match = cmp::max
                            (
                                self.special.min_match,
                                self.tt.prev_state_id(next_id),
                            );
                        }

                        // Shuffle starting states.
                        {
                            let mut next_id = self.to_state_id(2);
                            
                            if self.special.matches() { next_id = self.tt.next_state_id(self.special.max_match); }

                            self.special.min_start = next_id;
                            
                            for id in is_start 
                            {
                                remapper.swap(self, next_id, id);
                                next_id = self.tt.next_state_id(next_id);
                            }
                            
                            self.special.max_start = cmp::max
                            (
                                self.special.min_start,
                                self.tt.prev_state_id(next_id),
                            );
                        }
                        
                        remapper.remap(self);
                        self.set_pattern_map(&matches)?;
                        self.special.set_max();
                        self.special.validate().expect("special state ranges should validate");
                        self.special
                        .validate_state_len(self.state_len(), self.stride2())
                        .expect
                        (
                            "special state ranges should be consistent with state length",
                        );

                        Ok(())
                    }
                    /// Checks whether there are universal start states (both anchored and
                    /// unanchored), and if so, sets the relevant fields to the start state
                    /// IDs.
                    fn set_universal_starts(&mut self) 
                    {
                        assert_eq!(6, Start::len(), "expected 6 start configurations");

                        let start_id = | dfa: &mut OwnedDFA, anchored: Anchored, start: Start |
                        {
                            dfa.st.start(anchored, start).expect("valid Input configuration")
                        };

                        if self.start_kind().has_unanchored() 
                        {
                            let anchor = Anchored::No;
                            let sid = start_id(self, anchor, Start::NonWordByte);
                            if sid == start_id(self, anchor, Start::WordByte)
                            && sid == start_id(self, anchor, Start::Text)
                            && sid == start_id(self, anchor, Start::LineLF)
                            && sid == start_id(self, anchor, Start::LineCR)
                            && sid == start_id(self, anchor, Start::CustomLineTerminator)
                            { self.st.universal_start_unanchored = Some(sid); }
                        }

                        if self.start_kind().has_anchored()
                        {
                            let anchor = Anchored::Yes;
                            let sid = start_id(self, anchor, Start::NonWordByte);
                            if sid == start_id(self, anchor, Start::WordByte)
                            && sid == start_id(self, anchor, Start::Text)
                            && sid == start_id(self, anchor, Start::LineLF)
                            && sid == start_id(self, anchor, Start::LineCR)
                            && sid == start_id(self, anchor, Start::CustomLineTerminator)
                            { self.st.universal_start_anchored = Some(sid); }
                        }
                    }
                }
                
                impl<T: AsRef<[u32]>> DFA<T>
                {
                    /// Return the info about special states.
                    pub fn special(&self) -> &Special { &self.special }
                    /// Return the info about special states as a mutable borrow.
                    pub fn special_mut(&mut self) -> &mut Special { &mut self.special }
                    /// Returns the quit set (may be empty) used by this DFA.
                    pub fn quitset(&self) -> &ByteSet { &self.quitset }
                    /// Returns the flags for this DFA.
                    pub fn flags(&self) -> &Flags { &self.flags }
                    /// Returns an iterator over all states in this DFA.
                    pub fn states(&self) -> StateIter<'_, T> { self.tt.states() }
                    /// Return the total number of states in this DFA.
                    pub fn state_len(&self) -> usize { self.tt.len() }
                    /// Return an iterator over all pattern IDs for the given match state.
                    pub fn pattern_id_slice(&self, id: StateID) -> &[PatternID] 
                    {
                        assert!(self.is_match_state(id));
                        self.ms.pattern_id_slice(self.match_state_index(id))
                    }
                    /// Return the total number of pattern IDs for the given match state.
                    pub fn match_pattern_len(&self, id: StateID) -> usize 
                    {
                        assert!(self.is_match_state(id));
                        self.ms.pattern_len(self.match_state_index(id))
                    }
                    /// Returns the total number of patterns matched by this DFA.
                    pub fn pattern_len(&self) -> usize { self.ms.pattern_len }
                    /// Returns a map from match state ID to a list of pattern IDs that match in that state.
                    pub fn pattern_map(&self) -> BTreeMap<StateID, Vec<PatternID>> { self.ms.to_map(self) }
                    /// Returns the ID of the quit state for this DFA.
                    pub fn quit_id(&self) -> StateID { self.to_state_id(1) }
                    /// Convert the given state identifier to the state's index.
                    pub fn to_index(&self, id: StateID) -> usize { self.tt.to_index(id) }
                    /// Convert an index to a state (in the range 0..self.state_len()) to an
                    /// actual state identifier.
                    pub fn to_state_id(&self, index: usize) -> StateID { self.tt.to_state_id(index) }
                    /// Return the table of state IDs for this DFA's start states.
                    pub fn starts(&self) -> StartStateIter<'_> { self.st.iter() }
                    /// Returns the index of the match state for the given ID.
                    fn match_state_index(&self, id: StateID) -> usize 
                    {
                        debug_assert!(self.is_match_state(id));
                        let min = self.special().min_match.as_usize();
                        self.to_index(StateID::new_unchecked(id.as_usize() - min))
                    }
                    /// Returns the index of the accelerator state for the given ID.
                    fn accelerator_index(&self, id: StateID) -> usize 
                    {
                        let min = self.special().min_accel.as_usize();
                        self.to_index(StateID::new_unchecked(id.as_usize() - min))
                    }

                    /// Return the accelerators for this DFA.
                    fn accels(&self) -> Accels<&[u32]> { self.accels.as_ref() }
                    /// Return this DFA's transition table as a slice.
                    fn trans(&self) -> &[StateID] { self.tt.table() }                
                }

                impl<T: AsRef<[u32]>> fmt::Debug for DFA<T> 
                {
                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result 
                    {
                        writeln!(f, "dense::DFA(")?;
                        for state in self.states() 
                        {
                            fmt_state_indicator(f, self, state.id())?;
                            let id = if f.alternate() {
                                state.id().as_usize()
                            } else {
                                self.to_index(state.id())
                            };
                            write!(f, "{id:06?}: ")?;
                            state.fmt(f)?;
                            write!(f, "\n")?;
                        }

                        writeln!(f, "")?;
                        for (i, (start_id, anchored, sty)) in self.starts().enumerate()
                        {
                            let id = if f.alternate() {
                                start_id.as_usize()
                            } else {
                                self.to_index(start_id)
                            };
                            if i % self.st.stride == 0 {
                                match anchored {
                                    Anchored::No => writeln!(f, "START-GROUP(unanchored)")?,
                                    Anchored::Yes => writeln!(f, "START-GROUP(anchored)")?,
                                    Anchored::Pattern(pid) => {
                                        writeln!(f, "START_GROUP(pattern: {pid:?})")?
                                    }
                                }
                            }
                            writeln!(f, "  {sty:?} => {id:06?}")?;
                        }

                        if self.pattern_len() > 1 
                        {
                            writeln!(f, "")?;
                            for i in 0..self.ms.len() {
                                let id = self.ms.match_state_id(self, i);
                                let id = if f.alternate() {
                                    id.as_usize()
                                } else {
                                    self.to_index(id)
                                };
                                write!(f, "MATCH({id:06?}): ")?;
                                for (i, &pid) in self.ms.pattern_id_slice(i).iter().enumerate()
                                {
                                    if i > 0 {
                                        write!(f, ", ")?;
                                    }
                                    write!(f, "{pid:?}")?;
                                }
                                writeln!(f, "")?;
                            }
                        }

                        writeln!(f, "state length: {:?}", self.state_len())?;
                        writeln!(f, "pattern length: {:?}", self.pattern_len())?;
                        writeln!(f, "flags: {:?}", self.flags)?;
                        writeln!(f, ")")?;
                        Ok(())
                    }
                }
                
                unsafe impl<T: AsRef<[u32]>> Automaton for DFA<T>
                {
                    fn is_special_state(&self, id: StateID) -> bool { self.special.is_special_state(id) }

                    fn is_dead_state(&self, id: StateID) -> bool { self.special.is_dead_state(id) }

                    fn is_quit_state(&self, id: StateID) -> bool { self.special.is_quit_state(id) }

                    fn is_match_state(&self, id: StateID) -> bool { self.special.is_match_state(id) }

                    fn is_start_state(&self, id: StateID) -> bool { self.special.is_start_state(id) }

                    fn is_accel_state(&self, id: StateID) -> bool { self.special.is_accel_state(id) }

                    fn next_state(&self, current: StateID, input: u8) -> StateID
                    {
                        let input = self.byte_classes().get(input);
                        let o = current.as_usize() + usize::from(input);
                        self.trans()[o]
                    }

                    unsafe fn next_state_unchecked
                    (
                        &self,
                        current: StateID,
                        byte: u8,
                    ) -> StateID
                    {
                        let class = self.byte_classes().get(byte);
                        let o = current.as_usize() + usize::from(class);
                        let next = *self.trans().get_unchecked(o);
                        next
                    }

                    fn next_eoi_state(&self, current: StateID) -> StateID 
                    {
                        let eoi = self.byte_classes().eoi().as_usize();
                        let o = current.as_usize() + eoi;
                        self.trans()[o]
                    }

                    fn pattern_len(&self) -> usize { self.ms.pattern_len }

                    fn match_len(&self, id: StateID) -> usize { self.match_pattern_len(id) }

                    fn match_pattern(&self, id: StateID, match_index: usize) -> PatternID 
                    {
                        if self.ms.pattern_len == 1 { return PatternID::ZERO; }
                        
                        let state_index = self.match_state_index(id);
                        self.ms.pattern_id(state_index, match_index)
                    }

                    fn has_empty(&self) -> bool { self.flags.has_empty }
                    
                    fn is_utf8(&self) -> bool { self.flags.is_utf8 }

                    fn is_always_start_anchored(&self) -> bool { self.flags.is_always_start_anchored }

                    fn start_state( &self, config: &start::Config ) -> Result<StateID, StartError>
                    {
                        let anchored = config.get_anchored();
                        let start = match config.get_look_behind()
                        {
                            None => Start::Text,
                            Some(byte) =>
                            {
                                if !self.quitset.is_empty() && self.quitset.contains(byte) { return Err(StartError::quit(byte)); }

                                self.st.start_map.get(byte)
                            }
                        };

                        self.st.start(anchored, start)
                    }

                    fn universal_start_state(&self, mode: Anchored) -> Option<StateID>
                    {
                        match mode
                        {
                            Anchored::No => self.st.universal_start_unanchored,
                            Anchored::Yes => self.st.universal_start_anchored,
                            Anchored::Pattern(_) => None,
                        }
                    }

                    fn accelerator(&self, id: StateID) -> &[u8]
                    {
                        if !self.is_accel_state(id)
                        {
                            return &[];
                        }

                        self.accels.needles(self.accelerator_index(id))
                    }

                    fn get_prefilter(&self) -> Option<&Prefilter> { self.pre.as_ref() }
                }

                /// The transition table portion of a dense DFA.
                #[derive(Clone)]
                pub struct TransitionTable<T>
                {
                    /// A contiguous region of memory representing the transition table in
                    /// row-major order.
                    table: T,
                    /// A set of equivalence classes, where a single equivalence class
                    /// represents a set of bytes that never discriminate between a match
                    /// and a non-match in the DFA.
                    classes: ByteClasses,
                    /// The stride of each DFA state, expressed as a power-of-two exponent.
                    stride2: usize,
                }

                impl<'a> TransitionTable<&'a [u32]> 
                {
                    /// Deserialize a transition table starting at the beginning of `slice`.
                    unsafe fn from_bytes_unchecked( mut slice: &'a [u8] ) -> Result<(TransitionTable<&'a [u32]>, usize), DeserializeError>
                    {
                        let slice_start = slice.as_ptr().as_usize();

                        let (state_len, nr) =
                            wire::try_read_u32_as_usize(slice, "state length")?;
                        slice = &slice[nr..];

                        let (stride2, nr) = wire::try_read_u32_as_usize(slice, "stride2")?;
                        slice = &slice[nr..];

                        let (classes, nr) = ByteClasses::from_bytes(slice)?;
                        slice = &slice[nr..];
                        
                        if stride2 > 9 
                        {
                            return Err(DeserializeError::generic(
                                "dense DFA has invalid stride2 (too big)",
                            ));
                        }
                        
                        if stride2 < 1 
                        {
                            return Err(DeserializeError::generic(
                                "dense DFA has invalid stride2 (too small)",
                            ));
                        }
                        
                        let stride = 1usize.checked_shl(u32::try_from(stride2).unwrap()).unwrap();
                        
                        if classes.alphabet_len() > stride 
                        {
                            return Err(DeserializeError::generic(
                                "alphabet size cannot be bigger than transition table stride",
                            ));
                        }

                        let trans_len = wire::shl(state_len, stride2, "dense table transition length")?;
                        
                        let table_bytes_len = wire::mul(
                            trans_len,
                            StateID::SIZE,
                            "dense table state byte length",
                        )?;
                        
                        wire::check_slice_len(slice, table_bytes_len, "transition table")?;
                        wire::check_alignment::<StateID>(slice)?;
                        let table_bytes = &slice[..table_bytes_len];
                        slice = &slice[table_bytes_len..];
                        
                        let table = ::slice::from_raw_parts
                        (
                            table_bytes.as_ptr().cast::<u32>(),
                            trans_len,
                        );

                        let tt = TransitionTable { table, classes, stride2 };
                        Ok((tt, slice.as_ptr().as_usize() - slice_start))
                    }
                }
                
                impl TransitionTable<Vec<u32>>
                {
                    /// Create a minimal transition table with just two states: a dead state and a quit state.
                    fn minimal(classes: ByteClasses) -> TransitionTable<Vec<u32>>
                    {
                        let mut tt = TransitionTable
                        {
                            table: vec![],
                            classes,
                            stride2: classes.stride2(),
                        };
                        
                        tt.add_empty_state().unwrap(); // dead state
                        tt.add_empty_state().unwrap(); // quit state
                        tt
                    }
                    /// Set a transition in this table.
                    fn set(&mut self, from: StateID, unit: alphabet::Unit, to: StateID)
                    {
                        assert!(self.is_valid(from), "invalid 'from' state");
                        assert!(self.is_valid(to), "invalid 'to' state");
                        self.table[from.as_usize() + self.classes.get_by_unit(unit)] =
                            to.as_u32();
                    }
                    /// Add an empty state (a state where all transitions lead to a dead state) and return its identifier.
                    fn add_empty_state(&mut self) -> Result<StateID, BuildError> 
                    {
                        let next = self.table.len();
                        let id = StateID::new(next).map_err(|_| BuildError::too_many_states())?;
                        self.table.extend(iter::repeat(0).take(self.stride()));
                        Ok(id)
                    }
                    /// Swap the two states given in this transition table.
                    fn swap(&mut self, id1: StateID, id2: StateID)
                    {
                        assert!(self.is_valid(id1), "invalid 'id1' state: {id1:?}");
                        assert!(self.is_valid(id2), "invalid 'id2' state: {id2:?}");
                        
                        for b in 0..self.classes.alphabet_len() {
                            self.table.swap(id1.as_usize() + b, id2.as_usize() + b);
                        }
                    }
                    /// Remap the transitions for the state given according to the function given.
                    fn remap(&mut self, id: StateID, map: impl Fn(StateID) -> StateID)
                    {
                        for byte in 0..self.alphabet_len() {
                            let i = id.as_usize() + byte;
                            let next = self.table()[i];
                            self.table_mut()[id.as_usize() + byte] = map(next);
                        }
                    }

                    /// Truncate the states in this transition table to the given length.
                    fn truncate(&mut self, len: usize) { self.table.truncate(len << self.stride2); }
                }

                impl<T: AsRef<[u32]>> TransitionTable<T>
                {
                    /// Writes a serialized form of this transition table to the buffer given.
                    fn write_to<E: Endian>( &self, mut dst: &mut [u8] ) -> Result<usize, SerializeError>
                    {
                        let nwrite = self.write_to_len();
                        if dst.len() < nwrite {
                            return Err(SerializeError::buffer_too_small("transition table"));
                        }
                        dst = &mut dst[..nwrite];
                        
                        E::write_u32(u32::try_from(self.len()).unwrap(), dst);
                        dst = &mut dst[size_of::<u32>()..];
                        
                        E::write_u32(u32::try_from(self.stride2).unwrap(), dst);
                        dst = &mut dst[size_of::<u32>()..];
                        
                        let n = self.classes.write_to(dst)?;
                        dst = &mut dst[n..];
                        
                        for &sid in self.table()
                        {
                            let n = wire::write_state_id::<E>(sid, &mut dst);
                            dst = &mut dst[n..];
                        }

                        Ok(nwrite)
                    }

                    /// Returns the number of bytes the serialized form of this transition table will use.
                    fn write_to_len(&self) -> usize
                    {
                        size_of::<u32>()   // state length
                        + size_of::<u32>() // stride2
                        + self.classes.write_to_len()
                        + (self.table().len() * StateID::SIZE)
                    }

                    /// Validates that every state ID in this transition table is valid.
                    fn validate(&self, dfa: &DFA<T>) -> Result<(), DeserializeError>
                    {
                        let sp = &dfa.special;
                        for state in self.states()
                        {
                            if sp.is_special_state(state.id())
                            {
                                let is_actually_special = sp.is_dead_state(state.id())
                                || sp.is_quit_state(state.id())
                                || sp.is_match_state(state.id())
                                || sp.is_start_state(state.id())
                                || sp.is_accel_state(state.id());

                                if !is_actually_special
                                {
                                    // This is kind of a cryptic error message...
                                    return Err(DeserializeError::generic(
                                        "found dense state tagged as special but \
                                        wasn't actually special",
                                    ));
                                }

                                if sp.is_match_state(state.id()) && dfa.match_len(state.id()) == 0
                                {
                                    return Err(DeserializeError::generic
                                    (
                                        "found match state with zero pattern IDs",
                                    ));
                                }
                            }

                            for (_, to) in state.transitions()
                            {
                                if !self.is_valid(to)
                                {
                                    return Err(DeserializeError::generic
                                    (
                                        "found invalid state ID in transition table",
                                    ));
                                }
                            }
                        }

                        Ok(())
                    }
                    /// Converts this transition table to a borrowed value.
                    fn as_ref(&self) -> TransitionTable<&'_ [u32]>
                    {
                        TransitionTable
                        {
                            table: self.table.as_ref(),
                            classes: self.classes.clone(),
                            stride2: self.stride2,
                        }
                    }
                    /// Converts this transition table to an owned value.
                    fn to_owned(&self) -> TransitionTable<::vec::Vec<u32>>
                    {
                        TransitionTable
                        {
                            table: self.table.as_ref().to_vec(),
                            classes: self.classes.clone(),
                            stride2: self.stride2,
                        }
                    }
                    /// Return the state for the given ID. If the given ID is not valid, then this panics.
                    fn state(&self, id: StateID) -> State<'_>
                    {
                        assert!(self.is_valid(id));

                        let i = id.as_usize();
                        State
                        {
                            id,
                            stride2: self.stride2,
                            transitions: &self.table()[i..i + self.alphabet_len()],
                        }
                    }
                    /// Returns an iterator over all states in this transition table.
                    fn states(&self) -> StateIter<'_, T>
                    {
                        StateIter
                        {
                            tt: self,
                            it: self.table().chunks(self.stride()).enumerate(),
                        }
                    }
                    /// Convert a state identifier to an index to a state (in the range 0..self.len()).
                    fn to_index(&self, id: StateID) -> usize { id.as_usize() >> self.stride2 }
                    /// Convert an index to a state (in the range 0..self.len()) to an actual state identifier.
                    fn to_state_id(&self, index: usize) -> StateID { StateID::new_unchecked(index << self.stride2) }
                    /// Returns the state ID for the state immediately following the one given.
                    fn next_state_id(&self, id: StateID) -> StateID { self.to_state_id(self.to_index(id).checked_add(1).unwrap()) }
                    /// Returns the state ID for the state immediately preceding the one given.
                    fn prev_state_id(&self, id: StateID) -> StateID { self.to_state_id(self.to_index(id).checked_sub(1).unwrap()) }
                    /// Returns the table as a slice of state IDs.
                    fn table(&self) -> &[StateID] { wire::u32s_to_state_ids(self.table.as_ref()) }
                    /// Returns the total number of states in this transition table.
                    fn len(&self) -> usize { self.table().len() >> self.stride2 }
                    /// Returns the total stride for every state in this DFA.
                    fn stride(&self) -> usize { 1 << self.stride2 }
                    /// Returns the total number of elements in the alphabet for this transition table.
                    fn alphabet_len(&self) -> usize { self.classes.alphabet_len() }
                    /// Returns true if and only if the given state ID is valid for this transition table.
                    fn is_valid(&self, id: StateID) -> bool
                    {
                        let id = id.as_usize();
                        id < self.table().len() && id % self.stride() == 0
                    }
                    /// Return the memory usage, in bytes, of this transition table.
                    fn memory_usage(&self) -> usize { self.table().len() * StateID::SIZE }
                }
                
                impl<T: AsMut<[u32]>> TransitionTable<T>
                {
                    /// Returns the table as a slice of state IDs.
                    fn table_mut(&mut self) -> &mut [StateID] { wire::u32s_to_state_ids_mut(self.table.as_mut()) }
                }

                /// The set of all possible starting states in a DFA.
                #[derive(Clone)]
                pub struct StartTable<T>
                {
                    /// The initial start state IDs.
                    table: T,
                    /// The starting state configuration supported. When 'both', both
                    /// unanchored and anchored searches work.
                    kind: StartKind,
                    /// The start state configuration for every possible byte.
                    start_map: StartByteMap,
                    /// The number of starting state IDs per pattern.
                    stride: usize,
                    /// The total number of patterns for which starting states are encoded.
                    pattern_len: Option<usize>,
                    /// The universal starting state for unanchored searches.
                    universal_start_unanchored: Option<StateID>,
                    /// The universal starting state for anchored searches.
                    universal_start_anchored: Option<StateID>,
                }
                
                impl StartTable<Vec<u32>> 
                {
                    /// Create a valid set of start states all pointing to the dead state.
                    fn dead(
                        kind: StartKind,
                        lookm: &LookMatcher,
                        pattern_len: Option<usize>,
                    ) -> Result<StartTable<Vec<u32>>, BuildError> {
                        if let Some(len) = pattern_len {
                            assert!(len <= PatternID::LIMIT);
                        }
                        let stride = Start::len();
                        // OK because 2*4 is never going to overflow anything.
                        let starts_len = stride.checked_mul(2).unwrap();
                        let pattern_starts_len =
                            match stride.checked_mul(pattern_len.unwrap_or(0)) {
                                Some(x) => x,
                                None => return Err(BuildError::too_many_start_states()),
                            };
                        let table_len = match starts_len.checked_add(pattern_starts_len) {
                            Some(x) => x,
                            None => return Err(BuildError::too_many_start_states()),
                        };
                        
                        if let Err(_) = isize::try_from(table_len) {
                            return Err(BuildError::too_many_start_states());
                        }
                        
                        let table = vec![DEAD.as_u32(); table_len];
                        let start_map = StartByteMap::new(lookm);
                        
                        Ok(StartTable 
                        {
                            table,
                            kind,
                            start_map,
                            stride,
                            pattern_len,
                            universal_start_unanchored: None,
                            universal_start_anchored: None,
                        })
                    }
                }

                impl<'a> StartTable<&'a [u32]> 
                {
                    /// Deserialize a table of start state IDs starting at the beginning of `slice`.
                    unsafe fn from_bytes_unchecked( mut slice: &'a [u8] ) -> Result<(StartTable<&'a [u32]>, usize), DeserializeError>
                    {
                        let slice_start = slice.as_ptr().as_usize();

                        let (kind, nr) = StartKind::from_bytes(slice)?;
                        slice = &slice[nr..];

                        let (start_map, nr) = StartByteMap::from_bytes(slice)?;
                        slice = &slice[nr..];

                        let (stride, nr) = wire::try_read_u32_as_usize(slice, "start table stride")?;
                        slice = &slice[nr..];
                        
                        if stride != Start::len()
                        {
                            return Err(DeserializeError::generic( "invalid starting table stride", ));
                        }

                        let (maybe_pattern_len, nr) = wire::try_read_u32_as_usize(slice, "start table patterns")?;
                        slice = &slice[nr..];

                        let pattern_len = if maybe_pattern_len.as_u32() == u32::MAX { None } else { Some(maybe_pattern_len) };
                        
                        if pattern_len.map_or(false, |len| len > PatternID::LIMIT)
                        {
                            return Err(DeserializeError::generic( "invalid number of patterns", ));
                        }

                        let (universal_unanchored, nr) =
                            wire::try_read_u32(slice, "universal unanchored start")?;
                        slice = &slice[nr..];

                        let universal_start_unanchored = if universal_unanchored == u32::MAX { None }
                        else
                        {
                            Some(StateID::try_from(universal_unanchored).map_err(|e|
                            {
                                DeserializeError::state_id_error(
                                    e,
                                    "universal unanchored start",
                                )
                            })?)
                        };

                        let (universal_anchored, nr) = wire::try_read_u32(slice, "universal anchored start")?;
                        slice = &slice[nr..];

                        let universal_start_anchored = if universal_anchored == u32::MAX { None }
                        else
                        {
                            Some(StateID::try_from(universal_anchored).map_err(|e|
                            {
                                DeserializeError::state_id_error(e, "universal anchored start")
                            })?)
                        };

                        let pattern_table_size = wire::mul
                        (
                            stride,
                            pattern_len.unwrap_or(0),
                            "invalid pattern length",
                        )?;
                        
                        let start_state_len = wire::add
                        (
                            wire::mul(2, stride, "start state stride too big")?,
                            pattern_table_size,
                            "invalid 'any' pattern starts size",
                        )?;
                        
                        let table_bytes_len = wire::mul
                        (
                            start_state_len,
                            StateID::SIZE,
                            "pattern table bytes length",
                        )?;

                        wire::check_slice_len(slice, table_bytes_len, "start ID table")?;
                        wire::check_alignment::<StateID>(slice)?;
                        let table_bytes = &slice[..table_bytes_len];
                        slice = &slice[table_bytes_len..];
                        
                        let table = ::slice::from_raw_parts
                        (
                            table_bytes.as_ptr().cast::<u32>(),
                            start_state_len,
                        );
                        
                        let st = StartTable
                        {
                            table,
                            kind,
                            start_map,
                            stride,
                            pattern_len,
                            universal_start_unanchored,
                            universal_start_anchored,
                        };

                        Ok((st, slice.as_ptr().as_usize() - slice_start))
                    }
                }

                impl<T: AsRef<[u32]>> StartTable<T> 
                {
                    /// Writes a serialized form of this start table to the buffer given.
                    fn write_to<E: Endian>
                    (
                        &self,
                        mut dst: &mut [u8],
                    ) -> Result<usize, SerializeError>
                    {
                        let nwrite = self.write_to_len();
                        if dst.len() < nwrite {
                            return Err(SerializeError::buffer_too_small(
                                "starting table ids",
                            ));
                        }

                        dst = &mut dst[..nwrite];
                        
                        let nw = self.kind.write_to::<E>(dst)?;
                        dst = &mut dst[nw..];
                        
                        let nw = self.start_map.write_to(dst)?;
                        dst = &mut dst[nw..];
                        
                        E::write_u32(u32::try_from(self.stride).unwrap(), dst);
                        dst = &mut dst[size_of::<u32>()..];
                        
                        E::write_u32
                        (
                            u32::try_from(self.pattern_len.unwrap_or(0xFFFF_FFFF)).unwrap(),
                            dst,
                        );
                        dst = &mut dst[size_of::<u32>()..];
                        
                        E::write_u32
                        (
                            self.universal_start_unanchored
                            .map_or(u32::MAX, |sid| sid.as_u32()),
                            dst,
                        );
                        
                        dst = &mut dst[size_of::<u32>()..];
                        
                        E::write_u32
                        (
                            self.universal_start_anchored.map_or(u32::MAX, |sid| sid.as_u32()),
                            dst,
                        );
                        
                        dst = &mut dst[size_of::<u32>()..];
                        
                        for &sid in self.table()
                        {
                            let n = wire::write_state_id::<E>(sid, &mut dst);
                            dst = &mut dst[n..];
                        }

                        Ok(nwrite)
                    }
                    /// Returns the number of bytes the serialized form of this start ID table will use.
                    fn write_to_len(&self) -> usize
                    {
                        self.kind.write_to_len()
                        + self.start_map.write_to_len()
                        + size_of::<u32>()
                        + size_of::<u32>()
                        + size_of::<u32>()
                        + size_of::<u32>()
                        + (self.table().len() * StateID::SIZE)
                    }
                    /// Validates that every state ID in this start table is valid by checking
                    /// it against the given transition table (which must be for the same DFA).
                    fn validate(&self, dfa: &DFA<T>) -> Result<(), DeserializeError>
                    {
                        let tt = &dfa.tt;
                        if !self.universal_start_unanchored.map_or(true, |s| tt.is_valid(s))
                        {
                            return Err(DeserializeError::generic(
                                "found invalid universal unanchored starting state ID",
                            ));
                        }

                        if !self.universal_start_anchored.map_or(true, |s| tt.is_valid(s))
                        {
                            return Err(DeserializeError::generic(
                                "found invalid universal anchored starting state ID",
                            ));
                        }

                        for &id in self.table()
                        {
                            if !tt.is_valid(id)
                            {
                                return Err(DeserializeError::generic( "found invalid starting state ID", ));
                            }
                        }

                        Ok(())
                    }
                    /// Converts this start list to a borrowed value.
                    fn as_ref(&self) -> StartTable<&'_ [u32]>
                    {
                        StartTable
                        {
                            table: self.table.as_ref(),
                            kind: self.kind,
                            start_map: self.start_map.clone(),
                            stride: self.stride,
                            pattern_len: self.pattern_len,
                            universal_start_unanchored: self.universal_start_unanchored,
                            universal_start_anchored: self.universal_start_anchored,
                        }
                    }

                    /// Converts this start list to an owned value.
                    fn to_owned(&self) -> StartTable<::vec::Vec<u32>>
                    {
                        StartTable
                        {
                            table: self.table.as_ref().to_vec(),
                            kind: self.kind,
                            start_map: self.start_map.clone(),
                            stride: self.stride,
                            pattern_len: self.pattern_len,
                            universal_start_unanchored: self.universal_start_unanchored,
                            universal_start_anchored: self.universal_start_anchored,
                        }
                    }

                    /// Return the start state for the given input and starting configuration.
                    fn start
                    (
                        &self,
                        anchored: Anchored,
                        start: Start,
                    ) -> Result<StateID, StartError>
                    {
                        let start_index = start.as_usize();
                        let index = match anchored
                        {
                            Anchored::No =>
                            {
                                if !self.kind.has_unanchored() { return Err(StartError::unsupported_anchored(anchored)); }

                                start_index
                            }

                            Anchored::Yes =>
                            {
                                if !self.kind.has_anchored() { return Err(StartError::unsupported_anchored(anchored)); }

                                self.stride + start_index
                            }

                            Anchored::Pattern(pid) =>
                            {
                                let len = match self.pattern_len
                                {
                                    None => { return Err(StartError::unsupported_anchored(anchored)) }
                                    Some(len) => len,
                                };
                                
                                if pid.as_usize() >= len { return Ok(DEAD); }
                                
                                (2 * self.stride) + (self.stride * pid.as_usize()) + start_index
                            }
                        };
                        Ok(self.table()[index])
                    }
                    /// Returns an iterator over all start state IDs in this table.
                    fn iter(&self) -> StartStateIter<'_> { StartStateIter { st: self.as_ref(), i: 0 } }
                    /// Returns the table as a slice of state IDs.
                    fn table(&self) -> &[StateID] { wire::u32s_to_state_ids(self.table.as_ref()) }
                    /// Return the memory usage, in bytes, of this start list.
                    fn memory_usage(&self) -> usize { self.table().len() * StateID::SIZE }
                }
                
                impl<T: AsMut<[u32]>> StartTable<T>
                {
                    /// Set the start state for the given index and pattern.
                    ///
                    /// If the pattern ID or state ID are not valid, then this will panic.
                    fn set_start(&mut self, anchored: Anchored, start: Start, id: StateID)
                    {
                        let start_index = start.as_usize();
                        let index = match anchored
                        {
                            Anchored::No => start_index,
                            Anchored::Yes => self.stride + start_index,
                            Anchored::Pattern(pid) =>
                            {
                                let pid = pid.as_usize();
                                let len = self
                                .pattern_len
                                .expect("start states for each pattern enabled");

                                assert!(pid < len, "invalid pattern ID {pid:?}");
                                
                                self.stride
                                .checked_mul(pid)
                                .unwrap()
                                .checked_add(self.stride.checked_mul(2).unwrap())
                                .unwrap()
                                .checked_add(start_index)
                                .unwrap()
                            }
                        };

                        self.table_mut()[index] = id;
                    }
                    /// Returns the table as a mutable slice of state IDs.
                    fn table_mut(&mut self) -> &mut [StateID] { wire::u32s_to_state_ids_mut(self.table.as_mut()) }
                }

                /// An iterator over start state IDs.
                pub struct StartStateIter<'a>
                {
                    st: StartTable<&'a [u32]>,
                    i: usize,
                }

                impl<'a> Iterator for StartStateIter<'a>
                {
                    type Item = (StateID, Anchored, Start);
                    fn next(&mut self) -> Option<(StateID, Anchored, Start)>
                    {
                        let i = self.i;
                        let table = self.st.table();

                        if i >= table.len() { return None; }
                        
                        self.i += 1;
                        
                        let start_type = Start::from_usize(i % self.st.stride).unwrap();
                        let anchored = if i < self.st.stride { Anchored::No }

                        else if i < (2 * self.st.stride) { Anchored::Yes }
                        
                        else
                        {
                            let pid = (i - (2 * self.st.stride)) / self.st.stride;
                            Anchored::Pattern(PatternID::new(pid).unwrap())
                        };

                        Some((table[i], anchored, start_type))
                    }
                }
                /// This type represents that patterns that should be reported whenever a DFA enters a match state.
                #[derive(Clone, Debug)]
                struct MatchStates<T>
                {
                    /// Slices is a flattened sequence of pairs, where each pair points to a
                    /// sub-slice of pattern_ids.
                    slices: T,
                    /// A flattened sequence of pattern IDs for each DFA match state.
                    pattern_ids: T,
                    /// The total number of unique patterns represented by these match states.
                    pattern_len: usize,
                }

                impl<'a> MatchStates<&'a [u32]>
                {
                    unsafe fn from_bytes_unchecked( mut slice: &'a [u8] ) -> Result<(MatchStates<&'a [u32]>, usize), DeserializeError>
                    {
                        let slice_start = slice.as_ptr().as_usize();

                        let (state_len, nr) =
                            wire::try_read_u32_as_usize(slice, "match state length")?;
                        slice = &slice[nr..];
                        
                        let pair_len = wire::mul(2, state_len, "match state offset pairs")?;
                        let slices_bytes_len = wire::mul(
                            pair_len,
                            PatternID::SIZE,
                            "match state slice offset byte length",
                        )?;

                        wire::check_slice_len(slice, slices_bytes_len, "match state slices")?;
                        wire::check_alignment::<PatternID>(slice)?;
                        let slices_bytes = &slice[..slices_bytes_len];
                        slice = &slice[slices_bytes_len..];
                        
                        let slices = ::slice::from_raw_parts(
                            slices_bytes.as_ptr().cast::<u32>(),
                            pair_len,
                        );
                        
                        let (pattern_len, nr) =
                            wire::try_read_u32_as_usize(slice, "pattern length")?;
                        slice = &slice[nr..];
                        
                        let (idlen, nr) = wire::try_read_u32_as_usize(slice, "pattern ID length")?;
                        slice = &slice[nr..];
                        
                        let pattern_ids_len = wire::mul(idlen, PatternID::SIZE, "pattern ID byte length")?;
                        wire::check_slice_len(slice, pattern_ids_len, "match pattern IDs")?;
                        wire::check_alignment::<PatternID>(slice)?;
                        let pattern_ids_bytes = &slice[..pattern_ids_len];
                        slice = &slice[pattern_ids_len..];
                        
                        let pattern_ids = ::slice::from_raw_parts
                        (
                            pattern_ids_bytes.as_ptr().cast::<u32>(),
                            idlen,
                        );

                        let ms = MatchStates { slices, pattern_ids, pattern_len };
                        Ok((ms, slice.as_ptr().as_usize() - slice_start))
                    }
                }
                
                impl MatchStates<Vec<u32>>
                {
                    fn empty(pattern_len: usize) -> MatchStates<Vec<u32>>
                    {
                        assert!(pattern_len <= PatternID::LIMIT);
                        MatchStates { slices: vec![], pattern_ids: vec![], pattern_len }
                    }

                    fn new
                    (
                        matches: &BTreeMap<StateID, Vec<PatternID>>,
                        pattern_len: usize,
                    ) -> Result<MatchStates<Vec<u32>>, BuildError>
                    {
                        let mut m = MatchStates::empty(pattern_len);
                        for (_, pids) in matches.iter()
                        {
                            let start = PatternID::new(m.pattern_ids.len())
                            .map_err(|_| BuildError::too_many_match_pattern_ids())?;

                            m.slices.push(start.as_u32());
                            
                            m.slices.push(u32::try_from(pids.len()).unwrap());
                            
                            for &pid in pids
                            {
                                m.pattern_ids.push(pid.as_u32());
                            }
                        }
                        m.pattern_len = pattern_len;
                        Ok(m)
                    }

                    fn new_with_map
                    (
                        &self,
                        matches: &BTreeMap<StateID, Vec<PatternID>>,
                    ) -> Result<MatchStates<Vec<u32>>, BuildError> 
                    { MatchStates::new(matches, self.pattern_len) }
                }

                impl<T: AsRef<[u32]>> MatchStates<T>
                {
                    /// Writes a serialized form of these match states to the buffer given.
                    fn write_to<E: Endian>( &self, mut dst: &mut [u8] ) -> Result<usize, SerializeError>
                    {
                        let nwrite = self.write_to_len();
                        
                        if dst.len() < nwrite
                        {
                            return Err(SerializeError::buffer_too_small("match states"));
                        }
                        
                        dst = &mut dst[..nwrite];
                        
                        E::write_u32(u32::try_from(self.len()).unwrap(), dst);
                        dst = &mut dst[size_of::<u32>()..];
                        
                        for &pid in self.slices()
                        
                            let n = wire::write_pattern_id::<E>(pid, &mut dst);
                            dst = &mut dst[n..];
                        }
                        
                        E::write_u32(u32::try_from(self.pattern_len).unwrap(), dst);
                        dst = &mut dst[size_of::<u32>()..];
                        
                        E::write_u32(u32::try_from(self.pattern_ids().len()).unwrap(), dst);
                        dst = &mut dst[size_of::<u32>()..];
                        
                        for &pid in self.pattern_ids()
                        {
                            let n = wire::write_pattern_id::<E>(pid, &mut dst);
                            dst = &mut dst[n..];
                        }

                        Ok(nwrite)
                    }
                    /// Returns the number of bytes the serialized form of these match states will use.
                    fn write_to_len(&self) -> usize
                    {
                        size_of::<u32>()   // match state length
                        + (self.slices().len() * PatternID::SIZE)
                        + size_of::<u32>() // unique pattern ID length
                        + size_of::<u32>() // pattern ID length
                        + (self.pattern_ids().len() * PatternID::SIZE)
                    }
                    /// Validates that the match state info is itself internally consistent and
                    /// consistent with the recorded match state region in the given DFA.
                    fn validate(&self, dfa: &DFA<T>) -> Result<(), DeserializeError>
                    {
                        if self.len() != dfa.special.match_len(dfa.stride())
                        {
                            return Err(DeserializeError::generic(
                                "match state length mismatch",
                            ));
                        }

                        for si in 0..self.len()
                        {
                            let start = self.slices()[si * 2].as_usize();
                            let len = self.slices()[si * 2 + 1].as_usize();
                            if start >= self.pattern_ids().len()
                            {
                                return Err(DeserializeError::generic( "invalid pattern ID start offset", ));
                            }
                            
                            if start + len > self.pattern_ids().len()
                            {
                                return Err(DeserializeError::generic( "invalid pattern ID length", ));
                            }

                            for mi in 0..len
                            {
                                let pid = self.pattern_id(si, mi);
                                if pid.as_usize() >= self.pattern_len
                                {
                                    return Err(DeserializeError::generic( "invalid pattern ID", ));
                                }
                            }
                        }

                        Ok(())
                    }

                    /// Converts these match states back into their map form.
                    fn to_map(&self, dfa: &DFA<T>) -> BTreeMap<StateID, Vec<PatternID>>
                    {
                        let mut map = BTreeMap::new();
                        for i in 0..self.len()
                        {
                            let mut pids = vec![];
                            for j in 0..self.pattern_len(i)
                            {
                                pids.push(self.pattern_id(i, j));
                            }

                            map.insert(self.match_state_id(dfa, i), pids);
                        }

                        map
                    }
                    /// Converts these match states to a borrowed value.
                    fn as_ref(&self) -> MatchStates<&'_ [u32]>
                    {
                        MatchStates
                        {
                            slices: self.slices.as_ref(),
                            pattern_ids: self.pattern_ids.as_ref(),
                            pattern_len: self.pattern_len,
                        }
                    }
                    /// Converts these match states to an owned value.
                    fn to_owned(&self) -> MatchStates<::vec::Vec<u32>>
                    {
                        MatchStates
                        {
                            slices: self.slices.as_ref().to_vec(),
                            pattern_ids: self.pattern_ids.as_ref().to_vec(),
                            pattern_len: self.pattern_len,
                        }
                    }
                    /// Returns the match state ID given the match state index.
                    fn match_state_id(&self, dfa: &DFA<T>, index: usize) -> StateID
                    {
                        assert!(dfa.special.matches(), "no match states to index");
                        
                        let stride2 = u32::try_from(dfa.stride2()).unwrap();
                        let offset = index.checked_shl(stride2).unwrap();
                        let id = dfa.special.min_match.as_usize().checked_add(offset).unwrap();
                        let sid = StateID::new(id).unwrap();
                        assert!(dfa.is_match_state(sid));
                        sid
                    }
                    /// Returns the pattern ID at the given match index for the given match state.
                    fn pattern_id(&self, state_index: usize, match_index: usize) -> PatternID { self.pattern_id_slice(state_index)[match_index] }
                    /// Returns the number of patterns in the given match state.
                    fn pattern_len(&self, state_index: usize) -> usize { self.slices()[state_index * 2 + 1].as_usize() }
                    /// Returns all of the pattern IDs for the given match state index.
                    fn pattern_id_slice(&self, state_index: usize) -> &[PatternID]
                    {
                        let start = self.slices()[state_index * 2].as_usize();
                        let len = self.pattern_len(state_index);
                        &self.pattern_ids()[start..start + len]
                    }
                    /// Returns the pattern ID offset slice of u32 as a slice of PatternID.
                    fn slices(&self) -> &[PatternID] { wire::u32s_to_pattern_ids(self.slices.as_ref()) }
                    /// Returns the total number of match states.
                    fn len(&self) -> usize
                    {
                        assert_eq!(0, self.slices().len() % 2);
                        self.slices().len() / 2
                    }
                    /// Returns the pattern ID slice of u32 as a slice of PatternID.
                    fn pattern_ids(&self) -> &[PatternID] { wire::u32s_to_pattern_ids(self.pattern_ids.as_ref()) }
                    /// Return the memory usage, in bytes, of these match pairs.
                    fn memory_usage(&self) -> usize { (self.slices().len() + self.pattern_ids().len()) * PatternID::SIZE }
                }
                /// A common set of flags for both dense and sparse DFAs.
                #[derive(Clone, Copy, Debug)]
                pub struct Flags
                {
                    /// Whether the DFA can match the empty string.
                    pub has_empty: bool,
                    /// Whether the DFA should only produce matches with spans that correspond to valid UTF-8.
                    pub is_utf8: bool,
                    /// Whether the DFA is always anchored or not, regardless of `Input` configuration.
                    pub is_always_start_anchored: bool,
                }

                impl Flags
                {
                    /// Creates a set of flags for a DFA from an NFA.
                    #[cfg(feature = "dfa-build")]
                    fn from_nfa(nfa: &thompson::NFA) -> Flags
                    {
                        Flags
                        {
                            has_empty: nfa.has_empty(),
                            is_utf8: nfa.is_utf8(),
                            is_always_start_anchored: nfa.is_always_start_anchored(),
                        }
                    }

                    /// Deserializes the flags from the given slice.
                    pub fn from_bytes( slice: &[u8], ) -> Result<(Flags, usize), DeserializeError>
                    {
                        let (bits, nread) = wire::try_read_u32(slice, "flag bitset")?;
                        let flags = Flags
                        {
                            has_empty: bits & (1 << 0) != 0,
                            is_utf8: bits & (1 << 1) != 0,
                            is_always_start_anchored: bits & (1 << 2) != 0,
                        };

                        Ok((flags, nread))
                    }
                    /// Writes these flags to the given byte slice.
                    pub fn write_to<E: Endian>( &self, dst: &mut [u8] ) -> Result<usize, SerializeError> 
                    {
                        fn bool_to_int(b: bool) -> u32
                        {
                            if b { 1 } else {  0 }
                        }

                        let nwrite = self.write_to_len();

                        if dst.len() < nwrite  { return Err(SerializeError::buffer_too_small("flag bitset")); }

                        let bits = (bool_to_int(self.has_empty) << 0)
                        | (bool_to_int(self.is_utf8) << 1)
                        | (bool_to_int(self.is_always_start_anchored) << 2);

                        E::write_u32(bits, dst);
                        Ok(nwrite)
                    }

                    /// Returns the number of bytes the serialized form of these flags will use.
                    pub fn write_to_len(&self) -> usize { size_of::<u32>() }
                }
                /// An iterator over all states in a DFA.
                pub struct StateIter<'a, T>
                {
                    tt: &'a TransitionTable<T>,
                    it: iter::Enumerate<slice::Chunks<'a, StateID>>,
                }

                impl<'a, T: AsRef<[u32]>> Iterator for StateIter<'a, T>
                {
                    type Item = State<'a>;
                    fn next(&mut self) -> Option<State<'a>>
                    {
                        self.it.next().map(|(index, _)|
                        {
                            let id = self.tt.to_state_id(index);
                            self.tt.state(id)
                        })
                    }
                }
                /// An immutable representation of a single DFA state.
                pub struct State<'a>
                {
                    id: StateID,
                    stride2: usize,
                    transitions: &'a [StateID],
                }

                impl<'a> State<'a>
                {
                    /// Return an iterator over all transitions in this state.
                    pub fn transitions(&self) -> StateTransitionIter<'_>
                    {
                        StateTransitionIter
                        {
                            len: self.transitions.len(),
                            it: self.transitions.iter().enumerate(),
                        }
                    }
                    /// Return an iterator over a sparse representation of the transitions in this state.
                    pub fn sparse_transitions(&self) -> StateSparseTransitionIter<'_> { StateSparseTransitionIter { dense: self.transitions(), cur: None } }
                    /// Returns the identifier for this state.
                    pub fn id(&self) -> StateID { self.id }
                    /// Analyzes this state to determine whether it can be accelerated.
                    fn accelerate(&self, classes: &ByteClasses) -> Option<Accel>
                    {
                        let mut accel = Accel::new();
                        
                        for (class, id) in self.transitions()
                        {
                            if id == self.id() { continue; }

                            for unit in classes.elements(class)
                            {
                                if let Some(byte) = unit.as_u8()
                                {
                                    if !accel.add(byte) { return None; }
                                }
                            }
                        }

                        if accel.is_empty() { None }

                        else { Some(accel) }
                    }
                }

                impl<'a> fmt::Debug for State<'a>
                {
                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                    {
                        for (i, (start, end, sid)) in self.sparse_transitions().enumerate()
                        {
                            let id = if f.alternate()
                            {
                                sid.as_usize()
                            }

                            else { sid.as_usize() >> self.stride2 };
                            
                            if i > 0 { write!(f, ", ")?; }

                            if start == end { write!(f, "{start:?} => {id:?}")?; }
                            else { write!(f, "{start:?}-{end:?} => {id:?}")?; }
                        }
                        Ok(())
                    }
                }
                /// An iterator over all transitions in a single DFA state.
                #[derive(Debug)]
                pub struct StateTransitionIter<'a>
                {
                    len: usize,
                    it: iter::Enumerate<slice::Iter<'a, StateID>>,
                }

                impl<'a> Iterator for StateTransitionIter<'a>
                {
                    type Item = (alphabet::Unit, StateID);
                    fn next(&mut self) -> Option<(alphabet::Unit, StateID)>
                    {
                        self.it.next().map(|(i, &id)|
                        {
                            let unit = if i + 1 == self.len
                            {
                                alphabet::Unit::eoi(i)
                            }
                            else
                            {
                                let b = u8::try_from(i)
                                    .expect("raw byte alphabet is never exceeded");
                                alphabet::Unit::u8(b)
                            };

                            (unit, id)
                        })
                    }
                }

                /// An iterator over all non-DEAD transitions in a single DFA state using a sparse representation.
                #[derive(Debug)]
                pub struct StateSparseTransitionIter<'a>
                {
                    dense: StateTransitionIter<'a>,
                    cur: Option<(alphabet::Unit, alphabet::Unit, StateID)>,
                }

                impl<'a> Iterator for StateSparseTransitionIter<'a>
                {
                    type Item = (alphabet::Unit, alphabet::Unit, StateID);
                    fn next(&mut self) -> Option<(alphabet::Unit, alphabet::Unit, StateID)>
                    {
                        while let Some((unit, next)) = self.dense.next()
                        {
                            let (prev_start, prev_end, prev_next) = match self.cur
                            {
                                Some(t) => t,
                                None =>
                                {
                                    self.cur = Some((unit, unit, next));
                                    continue;
                                }
                            };

                            if prev_next == next && !unit.is_eoi()
                            {
                                self.cur = Some((prev_start, unit, prev_next));
                            }
                            
                            else
                            {
                                self.cur = Some((unit, unit, next));
                                if prev_next != DEAD { return Some((prev_start, prev_end, prev_next)); }
                            }
                        }
                        
                        if let Some((start, end, next)) = self.cur.take()
                        {
                            if next != DEAD { return Some((start, end, next)); }
                        }

                        None
                    }
                }

                /// An error that occurred during the construction of a DFA.
                #[derive(Clone, Debug)]
                pub struct BuildError
                {
                    kind: BuildErrorKind,
                }
                
                impl BuildError
                {
                    /// Returns true if this error corresponds to an error with DFA construction that occurred because of exceeding a size limit.
                    #[inline] pub fn is_size_limit_exceeded(&self) -> bool
                    {
                        use self::BuildErrorKind::*;

                        match self.kind
                        {
                            NFA(_) | Unsupported(_) => false,
                            TooManyStates
                            | TooManyStartStates
                            | TooManyMatchPatternIDs
                            | DFAExceededSizeLimit { .. }
                            | DeterminizeExceededSizeLimit { .. } => true,
                        }
                    }
                }

                /// The kind of error that occurred during the construction of a DFA.
                #[derive(Clone, Debug)]
                enum BuildErrorKind
                {
                    /// An error that occurred while constructing an NFA as a precursor step before a DFA is compiled.
                    NFA(thompson::BuildError),
                    /// An error that occurred because an unsupported regex feature was used.
                    Unsupported(&'static str),
                    /// An error that occurs if too many states are produced while building a DFA.
                    TooManyStates,
                    /// An error that occurs if too many start states are needed while building a DFA.
                    TooManyStartStates,
                    /// This is another oddball error that can occur if there are too many patterns spread out across too many match states.
                    TooManyMatchPatternIDs,
                    /// An error that occurs if the DFA got too big during determinization.
                    DFAExceededSizeLimit { limit: usize },
                    /// An error that occurs if auxiliary storage (not the DFA) used during determinization got too big.
                    DeterminizeExceededSizeLimit { limit: usize },
                }
                
                impl BuildError
                {
                    /// Return the kind of this error.
                    fn kind(&self) -> &BuildErrorKind { &self.kind }

                    pub fn nfa(err: thompson::BuildError) -> BuildError
                    {
                        BuildError { kind: BuildErrorKind::NFA(err) }
                    }

                    pub fn unsupported_dfa_word_boundary_unicode() -> BuildError
                    {
                        let msg = "cannot build DFAs for regexes with Unicode word \
                                boundaries; switch to ASCII word boundaries, or \
                                heuristically enable Unicode word boundaries or use a \
                                different regex engine";
                        BuildError { kind: BuildErrorKind::Unsupported(msg) }
                    }

                    pub fn too_many_states() -> BuildError
                    {
                        BuildError { kind: BuildErrorKind::TooManyStates }
                    }

                    pub fn too_many_start_states() -> BuildError
                    {
                        BuildError { kind: BuildErrorKind::TooManyStartStates }
                    }

                    pub fn too_many_match_pattern_ids() -> BuildError
                    {
                        BuildError { kind: BuildErrorKind::TooManyMatchPatternIDs }
                    }

                    pub fn dfa_exceeded_size_limit(limit: usize) -> BuildError
                    {
                        BuildError { kind: BuildErrorKind::DFAExceededSizeLimit { limit } }
                    }

                    pub fn determinize_exceeded_size_limit(limit: usize) -> BuildError
                    {
                        BuildError
                        {
                            kind: BuildErrorKind::DeterminizeExceededSizeLimit { limit },
                        }
                    }
                }
                
                impl ::error::Error for BuildError
                {
                    fn source(&self) -> Option<&(dyn ::error::Error + 'static)>
                    {
                        match self.kind()
                        {
                            BuildErrorKind::NFA(ref err) => Some(err),
                            _ => None,
                        }
                    }
                }
                
                impl ::fmt::Display for BuildError
                {
                    fn fmt(&self, f: &mut ::fmt::Formatter<'_>) -> ::fmt::Result
                    {
                        match self.kind()
                        {
                            BuildErrorKind::NFA(_) => write!(f, "error building NFA"),
                            BuildErrorKind::Unsupported(ref msg) =>
                            {
                                write!(f, "unsupported regex feature for DFAs: {msg}")
                            }
                            BuildErrorKind::TooManyStates => write!
                            (
                                f,
                                "number of DFA states exceeds limit of {}",
                                StateID::LIMIT,
                            ),
                            BuildErrorKind::TooManyStartStates =>
                            {
                                let stride = Start::len();
                                let max = usize::try_from(::isize::MAX).unwrap();
                                let limit = (max - stride) / stride;
                                write!
                                (
                                    f,
                                    "compiling DFA with start states exceeds pattern \
                                    pattern limit of {}",
                                    limit,
                                )
                            }
                            BuildErrorKind::TooManyMatchPatternIDs => write!
                            (
                                f,
                                "compiling DFA with total patterns in all match states \
                                exceeds limit of {}",
                                PatternID::LIMIT,
                            ),
                            BuildErrorKind::DFAExceededSizeLimit { limit } => 
                            write!
                            (
                                f,
                                "DFA exceeded size limit of {limit:?} during determinization",
                            ),
                            BuildErrorKind::DeterminizeExceededSizeLimit { limit } =>
                            { write!(f, "determinization exceeded size limit of {limit:?}") }
                        }
                    }
                }
            }
            
            pub mod onepass
            {
                use ::
                {
                    *
                };
                /*
                */
            }
            
            pub mod regex
            {
                use ::
                {
                    *
                };
                /*
                */
            }
            
            pub mod sparse
            {
                use ::
                {
                    *
                };
                /*
                */
            }

            
            pub mod accel
            {
                use ::
                {
                    *
                };
                /*
                */
            }
            
            pub mod automaton
            {
                use ::
                {
                    *
                };
                /*
                */
            }
            
            pub mod determinize
            {
                use ::
                {
                    *
                };
                /*
                */
            }
            
            pub mod minimize
            {
                use ::
                {
                    *
                };
                /*
                */
            }
            
            mod remapper
            {
                use ::
                {
                    *
                };
                /*
                */
            }
            
            pub mod search
            {
                use ::
                {
                    *
                };
                /*
                */
            }
            
           pub mod special
            {
                use ::
                {
                    *
                };
                /*
                */
            }
            
            pub mod start
            {
                use ::
                {
                    *
                };
                /*
                */
            }
        }
        
        pub mod hybrid
        {
            use ::
            {
                *
            };
        }
        
        pub mod meta
        {
            use ::
            {
                *
            };
        }

        pub mod nfa
        {
            use ::
            {
                *
            };
        }

        pub mod util
        {
            use ::
            {
                *
            };
        }
    }

    pub mod builders
    {
        use ::
        {
            *,
        };
    }

    pub mod bytes
    {
        use ::
        {
            *,
        };
    }

    pub mod error
    {
        use ::
        {
            *,
        };
    }

    pub mod find_byte
    {
        use ::
        {
            *,
        };
    }

    pub mod pattern
    {
        use ::
        {
            *,
        };
    }

    pub mod regex
    {
        use ::
        {
            *,
        };

        pub mod bytes
        {
            use ::
            {
                *,
            };
            /*
            use alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};

            use regex_automata::{meta, util::captures, Input, PatternID};

            use crate::{bytes::RegexBuilder, error::Error};
            */
            /// A compiled regular expression for searching Unicode haystacks.
            #[derive(Clone)]
            pub struct Regex
            {
                pub meta: meta::Regex,
                pub pattern: Arc<str>,
            }

            impl ::fmt::Display for Regex 
            {
                /// Shows the original regular expression.
                fn fmt(&self, f: &mut ::fmt::Formatter<'_>) -> ::fmt::Result {
                    write!(f, "{}", self.as_str())
                }
            }

            impl ::fmt::Debug for Regex 
            {
                /// Shows the original regular expression.
                fn fmt(&self, f: &mut ::fmt::Formatter<'_>) -> ::fmt::Result {
                    f.debug_tuple("Regex").field(&self.as_str()).finish()
                }
            }

            impl ::str::FromStr for Regex 
            {
                type Err = Error;
                /// Attempts to parse a string into a regular expression
                fn from_str(s: &str) -> Result<Regex, Error> {
                    Regex::new(s)
                }
            }

            impl TryFrom<&str> for Regex 
            {
                type Error = Error;
                /// Attempts to parse a string into a regular expression
                fn try_from(s: &str) -> Result<Regex, Error> {
                    Regex::new(s)
                }
            }

            impl TryFrom<String> for Regex 
            {
                type Error = Error;
                /// Attempts to parse a string into a regular expression
                fn try_from(s: String) -> Result<Regex, Error> {
                    Regex::new(&s)
                }
            }

            /// Core regular expression methods.
            impl Regex 
            {
                /// Compiles a regular expression. Once compiled, it can be used repeatedly
                /// to search, split or replace substrings in a haystack.
                ///
                /// Note that regex compilation tends to be a somewhat expensive process,
                /// and unlike higher level environments, compilation is not automatically
                /// cached for you. One should endeavor to compile a regex once and then
                /// reuse it. For example, it's a bad idea to compile the same regex
                /// repeatedly in a loop.
                ///
                /// # Errors
                ///
                /// If an invalid pattern is given, then an error is returned.
                /// An error is also returned if the pattern is valid, but would
                /// produce a regex that is bigger than the configured size limit via
                /// [`RegexBuilder::size_limit`]. (A reasonable size limit is enabled by
                /// default.)
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// // An Invalid pattern because of an unclosed parenthesis
                /// assert!(Regex::new(r"foo(bar").is_err());
                /// // An invalid pattern because the regex would be too big
                /// // because Unicode tends to inflate things.
                /// assert!(Regex::new(r"\w{1000}").is_err());
                /// // Disabling Unicode can make the regex much smaller,
                /// // potentially by up to or more than an order of magnitude.
                /// assert!(Regex::new(r"(?-u:\w){1000}").is_ok());
                /// ```
                pub fn new(re: &str) -> Result<Regex, Error> {
                    RegexBuilder::new(re).build()
                }

                /// Returns true if and only if there is a match for the regex anywhere
                /// in the haystack given.
                ///
                /// It is recommended to use this method if all you need to do is test
                /// whether a match exists, since the underlying matching engine may be
                /// able to do less work.
                ///
                /// # Example
                ///
                /// Test if some haystack contains at least one word with exactly 13
                /// Unicode word characters:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"\b\w{13}\b").unwrap();
                /// let hay = b"I categorically deny having triskaidekaphobia.";
                /// assert!(re.is_match(hay));
                /// ```
                #[inline]
                pub fn is_match(&self, haystack: &[u8]) -> bool {
                    self.is_match_at(haystack, 0)
                }

                /// This routine searches for the first match of this regex in the
                /// haystack given, and if found, returns a [`Match`]. The `Match`
                /// provides access to both the byte offsets of the match and the actual
                /// substring that matched.
                ///
                /// Note that this should only be used if you want to find the entire
                /// match. If instead you just want to test the existence of a match,
                /// it's potentially faster to use `Regex::is_match(hay)` instead of
                /// `Regex::find(hay).is_some()`.
                ///
                /// # Example
                ///
                /// Find the first word with exactly 13 Unicode word characters:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"\b\w{13}\b").unwrap();
                /// let hay = b"I categorically deny having triskaidekaphobia.";
                /// let mat = re.find(hay).unwrap();
                /// assert_eq!(2..15, mat.range());
                /// assert_eq!(b"categorically", mat.as_bytes());
                /// ```
                #[inline]
                pub fn find<'h>(&self, haystack: &'h [u8]) -> Option<Match<'h>> {
                    self.find_at(haystack, 0)
                }

                /// Returns an iterator that yields successive non-overlapping matches in
                /// the given haystack. The iterator yields values of type [`Match`].
                ///
                /// # Time complexity
                ///
                /// Note that since `find_iter` runs potentially many searches on the
                /// haystack and since each search has worst case `O(m * n)` time
                /// complexity, the overall worst case time complexity for iteration is
                /// `O(m * n^2)`.
                ///
                /// # Example
                ///
                /// Find every word with exactly 13 Unicode word characters:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"\b\w{13}\b").unwrap();
                /// let hay = b"Retroactively relinquishing remunerations is reprehensible.";
                /// let matches: Vec<_> = re.find_iter(hay).map(|m| m.as_bytes()).collect();
                /// assert_eq!(matches, vec![
                ///     &b"Retroactively"[..],
                ///     &b"relinquishing"[..],
                ///     &b"remunerations"[..],
                ///     &b"reprehensible"[..],
                /// ]);
                /// ```
                #[inline]
                pub fn find_iter<'r, 'h>(&'r self, haystack: &'h [u8]) -> Matches<'r, 'h> {
                    Matches { haystack, it: self.meta.find_iter(haystack) }
                }

                /// This routine searches for the first match of this regex in the haystack
                /// given, and if found, returns not only the overall match but also the
                /// matches of each capture group in the regex. If no match is found, then
                /// `None` is returned.
                ///
                /// Capture group `0` always corresponds to an implicit unnamed group that
                /// includes the entire match. If a match is found, this group is always
                /// present. Subsequent groups may be named and are numbered, starting
                /// at 1, by the order in which the opening parenthesis appears in the
                /// pattern. For example, in the pattern `(?<a>.(?<b>.))(?<c>.)`, `a`,
                /// `b` and `c` correspond to capture group indices `1`, `2` and `3`,
                /// respectively.
                ///
                /// You should only use `captures` if you need access to the capture group
                /// matches. Otherwise, [`Regex::find`] is generally faster for discovering
                /// just the overall match.
                ///
                /// # Example
                ///
                /// Say you have some haystack with movie names and their release years,
                /// like "'Citizen Kane' (1941)". It'd be nice if we could search for
                /// strings looking like that, while also extracting the movie name and its
                /// release year separately. The example below shows how to do that.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"'([^']+)'\s+\((\d{4})\)").unwrap();
                /// let hay = b"Not my favorite movie: 'Citizen Kane' (1941).";
                /// let caps = re.captures(hay).unwrap();
                /// assert_eq!(caps.get(0).unwrap().as_bytes(), b"'Citizen Kane' (1941)");
                /// assert_eq!(caps.get(1).unwrap().as_bytes(), b"Citizen Kane");
                /// assert_eq!(caps.get(2).unwrap().as_bytes(), b"1941");
                /// // You can also access the groups by index using the Index notation.
                /// // Note that this will panic on an invalid index. In this case, these
                /// // accesses are always correct because the overall regex will only
                /// // match when these capture groups match.
                /// assert_eq!(&caps[0], b"'Citizen Kane' (1941)");
                /// assert_eq!(&caps[1], b"Citizen Kane");
                /// assert_eq!(&caps[2], b"1941");
                /// ```
                ///
                /// Note that the full match is at capture group `0`. Each subsequent
                /// capture group is indexed by the order of its opening `(`.
                ///
                /// We can make this example a bit clearer by using *named* capture groups:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"'(?<title>[^']+)'\s+\((?<year>\d{4})\)").unwrap();
                /// let hay = b"Not my favorite movie: 'Citizen Kane' (1941).";
                /// let caps = re.captures(hay).unwrap();
                /// assert_eq!(caps.get(0).unwrap().as_bytes(), b"'Citizen Kane' (1941)");
                /// assert_eq!(caps.name("title").unwrap().as_bytes(), b"Citizen Kane");
                /// assert_eq!(caps.name("year").unwrap().as_bytes(), b"1941");
                /// // You can also access the groups by name using the Index notation.
                /// // Note that this will panic on an invalid group name. In this case,
                /// // these accesses are always correct because the overall regex will
                /// // only match when these capture groups match.
                /// assert_eq!(&caps[0], b"'Citizen Kane' (1941)");
                /// assert_eq!(&caps["title"], b"Citizen Kane");
                /// assert_eq!(&caps["year"], b"1941");
                /// ```
                ///
                /// Here we name the capture groups, which we can access with the `name`
                /// method or the `Index` notation with a `&str`. Note that the named
                /// capture groups are still accessible with `get` or the `Index` notation
                /// with a `usize`.
                ///
                /// The `0`th capture group is always unnamed, so it must always be
                /// accessed with `get(0)` or `[0]`.
                ///
                /// Finally, one other way to get the matched substrings is with the
                /// [`Captures::extract`] API:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"'([^']+)'\s+\((\d{4})\)").unwrap();
                /// let hay = b"Not my favorite movie: 'Citizen Kane' (1941).";
                /// let (full, [title, year]) = re.captures(hay).unwrap().extract();
                /// assert_eq!(full, b"'Citizen Kane' (1941)");
                /// assert_eq!(title, b"Citizen Kane");
                /// assert_eq!(year, b"1941");
                /// ```
                #[inline]
                pub fn captures<'h>(&self, haystack: &'h [u8]) -> Option<Captures<'h>> {
                    self.captures_at(haystack, 0)
                }

                /// Returns an iterator that yields successive non-overlapping matches in
                /// the given haystack. The iterator yields values of type [`Captures`].
                ///
                /// This is the same as [`Regex::find_iter`], but instead of only providing
                /// access to the overall match, each value yield includes access to the
                /// matches of all capture groups in the regex. Reporting this extra match
                /// data is potentially costly, so callers should only use `captures_iter`
                /// over `find_iter` when they actually need access to the capture group
                /// matches.
                ///
                /// # Time complexity
                ///
                /// Note that since `captures_iter` runs potentially many searches on the
                /// haystack and since each search has worst case `O(m * n)` time
                /// complexity, the overall worst case time complexity for iteration is
                /// `O(m * n^2)`.
                ///
                /// # Example
                ///
                /// We can use this to find all movie titles and their release years in
                /// some haystack, where the movie is formatted like "'Title' (xxxx)":
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"'([^']+)'\s+\(([0-9]{4})\)").unwrap();
                /// let hay = b"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).";
                /// let mut movies = vec![];
                /// for (_, [title, year]) in re.captures_iter(hay).map(|c| c.extract()) {
                ///     // OK because [0-9]{4} can only match valid UTF-8.
                ///     let year = std::str::from_utf8(year).unwrap();
                ///     movies.push((title, year.parse::<i64>()?));
                /// }
                /// assert_eq!(movies, vec![
                ///     (&b"Citizen Kane"[..], 1941),
                ///     (&b"The Wizard of Oz"[..], 1939),
                ///     (&b"M"[..], 1931),
                /// ]);
                /// # Ok::<(), Box<dyn std::error::Error>>(())
                /// ```
                ///
                /// Or with named groups:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"'(?<title>[^']+)'\s+\((?<year>[0-9]{4})\)").unwrap();
                /// let hay = b"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).";
                /// let mut it = re.captures_iter(hay);
                ///
                /// let caps = it.next().unwrap();
                /// assert_eq!(&caps["title"], b"Citizen Kane");
                /// assert_eq!(&caps["year"], b"1941");
                ///
                /// let caps = it.next().unwrap();
                /// assert_eq!(&caps["title"], b"The Wizard of Oz");
                /// assert_eq!(&caps["year"], b"1939");
                ///
                /// let caps = it.next().unwrap();
                /// assert_eq!(&caps["title"], b"M");
                /// assert_eq!(&caps["year"], b"1931");
                /// ```
                #[inline]
                pub fn captures_iter<'r, 'h>(
                    &'r self,
                    haystack: &'h [u8],
                ) -> CaptureMatches<'r, 'h> {
                    CaptureMatches { haystack, it: self.meta.captures_iter(haystack) }
                }

                /// Returns an iterator of substrings of the haystack given, delimited by a
                /// match of the regex. Namely, each element of the iterator corresponds to
                /// a part of the haystack that *isn't* matched by the regular expression.
                ///
                /// # Time complexity
                ///
                /// Since iterators over all matches requires running potentially many
                /// searches on the haystack, and since each search has worst case
                /// `O(m * n)` time complexity, the overall worst case time complexity for
                /// this routine is `O(m * n^2)`.
                ///
                /// # Example
                ///
                /// To split a string delimited by arbitrary amounts of spaces or tabs:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"[ \t]+").unwrap();
                /// let hay = b"a b \t  c\td    e";
                /// let fields: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(fields, vec![
                ///     &b"a"[..], &b"b"[..], &b"c"[..], &b"d"[..], &b"e"[..],
                /// ]);
                /// ```
                ///
                /// # Example: more cases
                ///
                /// Basic usage:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r" ").unwrap();
                /// let hay = b"Mary had a little lamb";
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(got, vec![
                ///     &b"Mary"[..], &b"had"[..], &b"a"[..], &b"little"[..], &b"lamb"[..],
                /// ]);
                ///
                /// let re = Regex::new(r"X").unwrap();
                /// let hay = b"";
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(got, vec![&b""[..]]);
                ///
                /// let re = Regex::new(r"X").unwrap();
                /// let hay = b"lionXXtigerXleopard";
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(got, vec![
                ///     &b"lion"[..], &b""[..], &b"tiger"[..], &b"leopard"[..],
                /// ]);
                ///
                /// let re = Regex::new(r"::").unwrap();
                /// let hay = b"lion::tiger::leopard";
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(got, vec![&b"lion"[..], &b"tiger"[..], &b"leopard"[..]]);
                /// ```
                ///
                /// If a haystack contains multiple contiguous matches, you will end up
                /// with empty spans yielded by the iterator:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"X").unwrap();
                /// let hay = b"XXXXaXXbXc";
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(got, vec![
                ///     &b""[..], &b""[..], &b""[..], &b""[..],
                ///     &b"a"[..], &b""[..], &b"b"[..], &b"c"[..],
                /// ]);
                ///
                /// let re = Regex::new(r"/").unwrap();
                /// let hay = b"(///)";
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(got, vec![&b"("[..], &b""[..], &b""[..], &b")"[..]]);
                /// ```
                ///
                /// Separators at the start or end of a haystack are neighbored by empty
                /// substring.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"0").unwrap();
                /// let hay = b"010";
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(got, vec![&b""[..], &b"1"[..], &b""[..]]);
                /// ```
                ///
                /// When the regex can match the empty string, it splits at every byte
                /// position in the haystack. This includes between all UTF-8 code units.
                /// (The top-level [`Regex::split`](crate::Regex::split) will only split
                /// at valid UTF-8 boundaries.)
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"").unwrap();
                /// let hay = "☃".as_bytes();
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(got, vec![
                ///     &[][..], &[b'\xE2'][..], &[b'\x98'][..], &[b'\x83'][..], &[][..],
                /// ]);
                /// ```
                ///
                /// Contiguous separators (commonly shows up with whitespace), can lead to
                /// possibly surprising behavior. For example, this code is correct:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r" ").unwrap();
                /// let hay = b"    a  b c";
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// assert_eq!(got, vec![
                ///     &b""[..], &b""[..], &b""[..], &b""[..],
                ///     &b"a"[..], &b""[..], &b"b"[..], &b"c"[..],
                /// ]);
                /// ```
                ///
                /// It does *not* give you `["a", "b", "c"]`. For that behavior, you'd want
                /// to match contiguous space characters:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r" +").unwrap();
                /// let hay = b"    a  b c";
                /// let got: Vec<&[u8]> = re.split(hay).collect();
                /// // N.B. This does still include a leading empty span because ' +'
                /// // matches at the beginning of the haystack.
                /// assert_eq!(got, vec![&b""[..], &b"a"[..], &b"b"[..], &b"c"[..]]);
                /// ```
                #[inline]
                pub fn split<'r, 'h>(&'r self, haystack: &'h [u8]) -> Split<'r, 'h> {
                    Split { haystack, it: self.meta.split(haystack) }
                }

                /// Returns an iterator of at most `limit` substrings of the haystack
                /// given, delimited by a match of the regex. (A `limit` of `0` will return
                /// no substrings.) Namely, each element of the iterator corresponds to a
                /// part of the haystack that *isn't* matched by the regular expression.
                /// The remainder of the haystack that is not split will be the last
                /// element in the iterator.
                ///
                /// # Time complexity
                ///
                /// Since iterators over all matches requires running potentially many
                /// searches on the haystack, and since each search has worst case
                /// `O(m * n)` time complexity, the overall worst case time complexity for
                /// this routine is `O(m * n^2)`.
                ///
                /// Although note that the worst case time here has an upper bound given
                /// by the `limit` parameter.
                ///
                /// # Example
                ///
                /// Get the first two words in some haystack:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"\W+").unwrap();
                /// let hay = b"Hey! How are you?";
                /// let fields: Vec<&[u8]> = re.splitn(hay, 3).collect();
                /// assert_eq!(fields, vec![&b"Hey"[..], &b"How"[..], &b"are you?"[..]]);
                /// ```
                ///
                /// # Examples: more cases
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r" ").unwrap();
                /// let hay = b"Mary had a little lamb";
                /// let got: Vec<&[u8]> = re.splitn(hay, 3).collect();
                /// assert_eq!(got, vec![&b"Mary"[..], &b"had"[..], &b"a little lamb"[..]]);
                ///
                /// let re = Regex::new(r"X").unwrap();
                /// let hay = b"";
                /// let got: Vec<&[u8]> = re.splitn(hay, 3).collect();
                /// assert_eq!(got, vec![&b""[..]]);
                ///
                /// let re = Regex::new(r"X").unwrap();
                /// let hay = b"lionXXtigerXleopard";
                /// let got: Vec<&[u8]> = re.splitn(hay, 3).collect();
                /// assert_eq!(got, vec![&b"lion"[..], &b""[..], &b"tigerXleopard"[..]]);
                ///
                /// let re = Regex::new(r"::").unwrap();
                /// let hay = b"lion::tiger::leopard";
                /// let got: Vec<&[u8]> = re.splitn(hay, 2).collect();
                /// assert_eq!(got, vec![&b"lion"[..], &b"tiger::leopard"[..]]);
                ///
                /// let re = Regex::new(r"X").unwrap();
                /// let hay = b"abcXdef";
                /// let got: Vec<&[u8]> = re.splitn(hay, 1).collect();
                /// assert_eq!(got, vec![&b"abcXdef"[..]]);
                ///
                /// let re = Regex::new(r"X").unwrap();
                /// let hay = b"abcdef";
                /// let got: Vec<&[u8]> = re.splitn(hay, 2).collect();
                /// assert_eq!(got, vec![&b"abcdef"[..]]);
                ///
                /// let re = Regex::new(r"X").unwrap();
                /// let hay = b"abcXdef";
                /// let got: Vec<&[u8]> = re.splitn(hay, 0).collect();
                /// assert!(got.is_empty());
                /// ```
                #[inline]
                pub fn splitn<'r, 'h>(
                    &'r self,
                    haystack: &'h [u8],
                    limit: usize,
                ) -> SplitN<'r, 'h> {
                    SplitN { haystack, it: self.meta.splitn(haystack, limit) }
                }

                /// Replaces the leftmost-first match in the given haystack with the
                /// replacement provided. The replacement can be a regular string (where
                /// `$N` and `$name` are expanded to match capture groups) or a function
                /// that takes a [`Captures`] and returns the replaced string.
                ///
                /// If no match is found, then the haystack is returned unchanged. In that
                /// case, this implementation will likely return a `Cow::Borrowed` value
                /// such that no allocation is performed.
                ///
                /// When a `Cow::Borrowed` is returned, the value returned is guaranteed
                /// to be equivalent to the `haystack` given.
                ///
                /// # Replacement string syntax
                ///
                /// All instances of `$ref` in the replacement string are replaced with
                /// the substring corresponding to the capture group identified by `ref`.
                ///
                /// `ref` may be an integer corresponding to the index of the capture group
                /// (counted by order of opening parenthesis where `0` is the entire match)
                /// or it can be a name (consisting of letters, digits or underscores)
                /// corresponding to a named capture group.
                ///
                /// If `ref` isn't a valid capture group (whether the name doesn't exist or
                /// isn't a valid index), then it is replaced with the empty string.
                ///
                /// The longest possible name is used. For example, `$1a` looks up the
                /// capture group named `1a` and not the capture group at index `1`. To
                /// exert more precise control over the name, use braces, e.g., `${1}a`.
                ///
                /// To write a literal `$` use `$$`.
                ///
                /// # Example
                ///
                /// Note that this function is polymorphic with respect to the replacement.
                /// In typical usage, this can just be a normal string:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"[^01]+").unwrap();
                /// assert_eq!(re.replace(b"1078910", b""), &b"1010"[..]);
                /// ```
                ///
                /// But anything satisfying the [`Replacer`] trait will work. For example,
                /// a closure of type `|&Captures| -> String` provides direct access to the
                /// captures corresponding to a match. This allows one to access capturing
                /// group matches easily:
                ///
                /// ```
                /// use regex::bytes::{Captures, Regex};
                ///
                /// let re = Regex::new(r"([^,\s]+),\s+(\S+)").unwrap();
                /// let result = re.replace(b"Springsteen, Bruce", |caps: &Captures| {
                ///     let mut buf = vec![];
                ///     buf.extend_from_slice(&caps[2]);
                ///     buf.push(b' ');
                ///     buf.extend_from_slice(&caps[1]);
                ///     buf
                /// });
                /// assert_eq!(result, &b"Bruce Springsteen"[..]);
                /// ```
                ///
                /// But this is a bit cumbersome to use all the time. Instead, a simple
                /// syntax is supported (as described above) that expands `$name` into the
                /// corresponding capture group. Here's the last example, but using this
                /// expansion technique with named capture groups:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(?<last>[^,\s]+),\s+(?<first>\S+)").unwrap();
                /// let result = re.replace(b"Springsteen, Bruce", b"$first $last");
                /// assert_eq!(result, &b"Bruce Springsteen"[..]);
                /// ```
                ///
                /// Note that using `$2` instead of `$first` or `$1` instead of `$last`
                /// would produce the same result. To write a literal `$` use `$$`.
                ///
                /// Sometimes the replacement string requires use of curly braces to
                /// delineate a capture group replacement when it is adjacent to some other
                /// literal text. For example, if we wanted to join two words together with
                /// an underscore:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(?<first>\w+)\s+(?<second>\w+)").unwrap();
                /// let result = re.replace(b"deep fried", b"${first}_$second");
                /// assert_eq!(result, &b"deep_fried"[..]);
                /// ```
                ///
                /// Without the curly braces, the capture group name `first_` would be
                /// used, and since it doesn't exist, it would be replaced with the empty
                /// string.
                ///
                /// Finally, sometimes you just want to replace a literal string with no
                /// regard for capturing group expansion. This can be done by wrapping a
                /// string with [`NoExpand`]:
                ///
                /// ```
                /// use regex::bytes::{NoExpand, Regex};
                ///
                /// let re = Regex::new(r"(?<last>[^,\s]+),\s+(\S+)").unwrap();
                /// let result = re.replace(b"Springsteen, Bruce", NoExpand(b"$2 $last"));
                /// assert_eq!(result, &b"$2 $last"[..]);
                /// ```
                ///
                /// Using `NoExpand` may also be faster, since the replacement string won't
                /// need to be parsed for the `$` syntax.
                #[inline]
                pub fn replace<'h, R: Replacer>(
                    &self,
                    haystack: &'h [u8],
                    rep: R,
                ) -> Cow<'h, [u8]> {
                    self.replacen(haystack, 1, rep)
                }

                /// Replaces all non-overlapping matches in the haystack with the
                /// replacement provided. This is the same as calling `replacen` with
                /// `limit` set to `0`.
                ///
                /// If no match is found, then the haystack is returned unchanged. In that
                /// case, this implementation will likely return a `Cow::Borrowed` value
                /// such that no allocation is performed.
                ///
                /// When a `Cow::Borrowed` is returned, the value returned is guaranteed
                /// to be equivalent to the `haystack` given.
                ///
                /// The documentation for [`Regex::replace`] goes into more detail about
                /// what kinds of replacement strings are supported.
                ///
                /// # Time complexity
                ///
                /// Since iterators over all matches requires running potentially many
                /// searches on the haystack, and since each search has worst case
                /// `O(m * n)` time complexity, the overall worst case time complexity for
                /// this routine is `O(m * n^2)`.
                ///
                /// # Fallibility
                ///
                /// If you need to write a replacement routine where any individual
                /// replacement might "fail," doing so with this API isn't really feasible
                /// because there's no way to stop the search process if a replacement
                /// fails. Instead, if you need this functionality, you should consider
                /// implementing your own replacement routine:
                ///
                /// ```
                /// use regex::bytes::{Captures, Regex};
                ///
                /// fn replace_all<E>(
                ///     re: &Regex,
                ///     haystack: &[u8],
                ///     replacement: impl Fn(&Captures) -> Result<Vec<u8>, E>,
                /// ) -> Result<Vec<u8>, E> {
                ///     let mut new = Vec::with_capacity(haystack.len());
                ///     let mut last_match = 0;
                ///     for caps in re.captures_iter(haystack) {
                ///         let m = caps.get(0).unwrap();
                ///         new.extend_from_slice(&haystack[last_match..m.start()]);
                ///         new.extend_from_slice(&replacement(&caps)?);
                ///         last_match = m.end();
                ///     }
                ///     new.extend_from_slice(&haystack[last_match..]);
                ///     Ok(new)
                /// }
                ///
                /// // Let's replace each word with the number of bytes in that word.
                /// // But if we see a word that is "too long," we'll give up.
                /// let re = Regex::new(r"\w+").unwrap();
                /// let replacement = |caps: &Captures| -> Result<Vec<u8>, &'static str> {
                ///     if caps[0].len() >= 5 {
                ///         return Err("word too long");
                ///     }
                ///     Ok(caps[0].len().to_string().into_bytes())
                /// };
                /// assert_eq!(
                ///     Ok(b"2 3 3 3?".to_vec()),
                ///     replace_all(&re, b"hi how are you?", &replacement),
                /// );
                /// assert!(replace_all(&re, b"hi there", &replacement).is_err());
                /// ```
                ///
                /// # Example
                ///
                /// This example shows how to flip the order of whitespace (excluding line
                /// terminators) delimited fields, and normalizes the whitespace that
                /// delimits the fields:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(?m)^(\S+)[\s--\r\n]+(\S+)$").unwrap();
                /// let hay = b"
                /// Greetings  1973
                /// Wild\t1973
                /// BornToRun\t\t\t\t1975
                /// Darkness                    1978
                /// TheRiver 1980
                /// ";
                /// let new = re.replace_all(hay, b"$2 $1");
                /// assert_eq!(new, &b"
                /// 1973 Greetings
                /// 1973 Wild
                /// 1975 BornToRun
                /// 1978 Darkness
                /// 1980 TheRiver
                /// "[..]);
                /// ```
                #[inline]
                pub fn replace_all<'h, R: Replacer>(
                    &self,
                    haystack: &'h [u8],
                    rep: R,
                ) -> Cow<'h, [u8]> {
                    self.replacen(haystack, 0, rep)
                }

                /// Replaces at most `limit` non-overlapping matches in the haystack with
                /// the replacement provided. If `limit` is `0`, then all non-overlapping
                /// matches are replaced. That is, `Regex::replace_all(hay, rep)` is
                /// equivalent to `Regex::replacen(hay, 0, rep)`.
                ///
                /// If no match is found, then the haystack is returned unchanged. In that
                /// case, this implementation will likely return a `Cow::Borrowed` value
                /// such that no allocation is performed.
                ///
                /// When a `Cow::Borrowed` is returned, the value returned is guaranteed
                /// to be equivalent to the `haystack` given.
                ///
                /// The documentation for [`Regex::replace`] goes into more detail about
                /// what kinds of replacement strings are supported.
                ///
                /// # Time complexity
                ///
                /// Since iterators over all matches requires running potentially many
                /// searches on the haystack, and since each search has worst case
                /// `O(m * n)` time complexity, the overall worst case time complexity for
                /// this routine is `O(m * n^2)`.
                ///
                /// Although note that the worst case time here has an upper bound given
                /// by the `limit` parameter.
                ///
                /// # Fallibility
                ///
                /// See the corresponding section in the docs for [`Regex::replace_all`]
                /// for tips on how to deal with a replacement routine that can fail.
                ///
                /// # Example
                ///
                /// This example shows how to flip the order of whitespace (excluding line
                /// terminators) delimited fields, and normalizes the whitespace that
                /// delimits the fields. But we only do it for the first two matches.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(?m)^(\S+)[\s--\r\n]+(\S+)$").unwrap();
                /// let hay = b"
                /// Greetings  1973
                /// Wild\t1973
                /// BornToRun\t\t\t\t1975
                /// Darkness                    1978
                /// TheRiver 1980
                /// ";
                /// let new = re.replacen(hay, 2, b"$2 $1");
                /// assert_eq!(new, &b"
                /// 1973 Greetings
                /// 1973 Wild
                /// BornToRun\t\t\t\t1975
                /// Darkness                    1978
                /// TheRiver 1980
                /// "[..]);
                /// ```
                #[inline]
                pub fn replacen<'h, R: Replacer>(
                    &self,
                    haystack: &'h [u8],
                    limit: usize,
                    mut rep: R,
                ) -> Cow<'h, [u8]> {
                    // If we know that the replacement doesn't have any capture expansions,
                    // then we can use the fast path. The fast path can make a tremendous
                    // difference:
                    //
                    //   1) We use `find_iter` instead of `captures_iter`. Not asking for
                    //      captures generally makes the regex engines faster.
                    //   2) We don't need to look up all of the capture groups and do
                    //      replacements inside the replacement string. We just push it
                    //      at each match and be done with it.
                    if let Some(rep) = rep.no_expansion() {
                        let mut it = self.find_iter(haystack).enumerate().peekable();
                        if it.peek().is_none() {
                            return Cow::Borrowed(haystack);
                        }
                        let mut new = Vec::with_capacity(haystack.len());
                        let mut last_match = 0;
                        for (i, m) in it {
                            new.extend_from_slice(&haystack[last_match..m.start()]);
                            new.extend_from_slice(&rep);
                            last_match = m.end();
                            if limit > 0 && i >= limit - 1 {
                                break;
                            }
                        }
                        new.extend_from_slice(&haystack[last_match..]);
                        return Cow::Owned(new);
                    }

                    // The slower path, which we use if the replacement needs access to
                    // capture groups.
                    let mut it = self.captures_iter(haystack).enumerate().peekable();
                    if it.peek().is_none() {
                        return Cow::Borrowed(haystack);
                    }
                    let mut new = Vec::with_capacity(haystack.len());
                    let mut last_match = 0;
                    for (i, cap) in it {
                        // unwrap on 0 is OK because captures only reports matches
                        let m = cap.get(0).unwrap();
                        new.extend_from_slice(&haystack[last_match..m.start()]);
                        rep.replace_append(&cap, &mut new);
                        last_match = m.end();
                        if limit > 0 && i >= limit - 1 {
                            break;
                        }
                    }
                    new.extend_from_slice(&haystack[last_match..]);
                    Cow::Owned(new)
                }
            }

            /// A group of advanced or "lower level" search methods. Some methods permit
            /// starting the search at a position greater than `0` in the haystack. Other
            /// methods permit reusing allocations, for example, when extracting the
            /// matches for capture groups.
            impl Regex 
            {
                /// Returns the end byte offset of the first match in the haystack given.
                ///
                /// This method may have the same performance characteristics as
                /// `is_match`. Behaviorally, it doesn't just report whether it match
                /// occurs, but also the end offset for a match. In particular, the offset
                /// returned *may be shorter* than the proper end of the leftmost-first
                /// match that you would find via [`Regex::find`].
                ///
                /// Note that it is not guaranteed that this routine finds the shortest or
                /// "earliest" possible match. Instead, the main idea of this API is that
                /// it returns the offset at the point at which the internal regex engine
                /// has determined that a match has occurred. This may vary depending on
                /// which internal regex engine is used, and thus, the offset itself may
                /// change based on internal heuristics.
                ///
                /// # Example
                ///
                /// Typically, `a+` would match the entire first sequence of `a` in some
                /// haystack, but `shortest_match` *may* give up as soon as it sees the
                /// first `a`.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"a+").unwrap();
                /// let offset = re.shortest_match(b"aaaaa").unwrap();
                /// assert_eq!(offset, 1);
                /// ```
                #[inline]
                pub fn shortest_match(&self, haystack: &[u8]) -> Option<usize> {
                    self.shortest_match_at(haystack, 0)
                }

                /// Returns the same as `shortest_match`, but starts the search at the
                /// given offset.
                ///
                /// The significance of the starting point is that it takes the surrounding
                /// context into consideration. For example, the `\A` anchor can only match
                /// when `start == 0`.
                ///
                /// If a match is found, the offset returned is relative to the beginning
                /// of the haystack, not the beginning of the search.
                ///
                /// # Panics
                ///
                /// This panics when `start >= haystack.len() + 1`.
                ///
                /// # Example
                ///
                /// This example shows the significance of `start` by demonstrating how it
                /// can be used to permit look-around assertions in a regex to take the
                /// surrounding context into account.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"\bchew\b").unwrap();
                /// let hay = b"eschew";
                /// // We get a match here, but it's probably not intended.
                /// assert_eq!(re.shortest_match(&hay[2..]), Some(4));
                /// // No match because the  assertions take the context into account.
                /// assert_eq!(re.shortest_match_at(hay, 2), None);
                /// ```
                #[inline]
                pub fn shortest_match_at(
                    &self,
                    haystack: &[u8],
                    start: usize,
                ) -> Option<usize> {
                    let input =
                        Input::new(haystack).earliest(true).span(start..haystack.len());
                    self.meta.search_half(&input).map(|hm| hm.offset())
                }

                /// Returns the same as [`Regex::is_match`], but starts the search at the
                /// given offset.
                ///
                /// The significance of the starting point is that it takes the surrounding
                /// context into consideration. For example, the `\A` anchor can only
                /// match when `start == 0`.
                ///
                /// # Panics
                ///
                /// This panics when `start >= haystack.len() + 1`.
                ///
                /// # Example
                ///
                /// This example shows the significance of `start` by demonstrating how it
                /// can be used to permit look-around assertions in a regex to take the
                /// surrounding context into account.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"\bchew\b").unwrap();
                /// let hay = b"eschew";
                /// // We get a match here, but it's probably not intended.
                /// assert!(re.is_match(&hay[2..]));
                /// // No match because the  assertions take the context into account.
                /// assert!(!re.is_match_at(hay, 2));
                /// ```
                #[inline]
                pub fn is_match_at(&self, haystack: &[u8], start: usize) -> bool {
                    self.meta.is_match(Input::new(haystack).span(start..haystack.len()))
                }

                /// Returns the same as [`Regex::find`], but starts the search at the given
                /// offset.
                ///
                /// The significance of the starting point is that it takes the surrounding
                /// context into consideration. For example, the `\A` anchor can only
                /// match when `start == 0`.
                ///
                /// # Panics
                ///
                /// This panics when `start >= haystack.len() + 1`.
                ///
                /// # Example
                ///
                /// This example shows the significance of `start` by demonstrating how it
                /// can be used to permit look-around assertions in a regex to take the
                /// surrounding context into account.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"\bchew\b").unwrap();
                /// let hay = b"eschew";
                /// // We get a match here, but it's probably not intended.
                /// assert_eq!(re.find(&hay[2..]).map(|m| m.range()), Some(0..4));
                /// // No match because the  assertions take the context into account.
                /// assert_eq!(re.find_at(hay, 2), None);
                /// ```
                #[inline]
                pub fn find_at<'h>(
                    &self,
                    haystack: &'h [u8],
                    start: usize,
                ) -> Option<Match<'h>> {
                    let input = Input::new(haystack).span(start..haystack.len());
                    self.meta.find(input).map(|m| Match::new(haystack, m.start(), m.end()))
                }

                /// Returns the same as [`Regex::captures`], but starts the search at the
                /// given offset.
                ///
                /// The significance of the starting point is that it takes the surrounding
                /// context into consideration. For example, the `\A` anchor can only
                /// match when `start == 0`.
                ///
                /// # Panics
                ///
                /// This panics when `start >= haystack.len() + 1`.
                ///
                /// # Example
                ///
                /// This example shows the significance of `start` by demonstrating how it
                /// can be used to permit look-around assertions in a regex to take the
                /// surrounding context into account.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"\bchew\b").unwrap();
                /// let hay = b"eschew";
                /// // We get a match here, but it's probably not intended.
                /// assert_eq!(&re.captures(&hay[2..]).unwrap()[0], b"chew");
                /// // No match because the  assertions take the context into account.
                /// assert!(re.captures_at(hay, 2).is_none());
                /// ```
                #[inline]
                pub fn captures_at<'h>(
                    &self,
                    haystack: &'h [u8],
                    start: usize,
                ) -> Option<Captures<'h>> {
                    let input = Input::new(haystack).span(start..haystack.len());
                    let mut caps = self.meta.create_captures();
                    self.meta.captures(input, &mut caps);
                    if caps.is_match() {
                        let static_captures_len = self.static_captures_len();
                        Some(Captures { haystack, caps, static_captures_len })
                    } else {
                        None
                    }
                }

                /// This is like [`Regex::captures`], but writes the byte offsets of each
                /// capture group match into the locations given.
                ///
                /// A [`CaptureLocations`] stores the same byte offsets as a [`Captures`],
                /// but does *not* store a reference to the haystack. This makes its API
                /// a bit lower level and less convenient. But in exchange, callers
                /// may allocate their own `CaptureLocations` and reuse it for multiple
                /// searches. This may be helpful if allocating a `Captures` shows up in a
                /// profile as too costly.
                ///
                /// To create a `CaptureLocations` value, use the
                /// [`Regex::capture_locations`] method.
                ///
                /// This also returns the overall match if one was found. When a match is
                /// found, its offsets are also always stored in `locs` at index `0`.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"^([a-z]+)=(\S*)$").unwrap();
                /// let mut locs = re.capture_locations();
                /// assert!(re.captures_read(&mut locs, b"id=foo123").is_some());
                /// assert_eq!(Some((0, 9)), locs.get(0));
                /// assert_eq!(Some((0, 2)), locs.get(1));
                /// assert_eq!(Some((3, 9)), locs.get(2));
                /// ```
                #[inline]
                pub fn captures_read<'h>(
                    &self,
                    locs: &mut CaptureLocations,
                    haystack: &'h [u8],
                ) -> Option<Match<'h>> {
                    self.captures_read_at(locs, haystack, 0)
                }

                /// Returns the same as [`Regex::captures_read`], but starts the search at
                /// the given offset.
                ///
                /// The significance of the starting point is that it takes the surrounding
                /// context into consideration. For example, the `\A` anchor can only
                /// match when `start == 0`.
                ///
                /// # Panics
                ///
                /// This panics when `start >= haystack.len() + 1`.
                ///
                /// # Example
                ///
                /// This example shows the significance of `start` by demonstrating how it
                /// can be used to permit look-around assertions in a regex to take the
                /// surrounding context into account.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"\bchew\b").unwrap();
                /// let hay = b"eschew";
                /// let mut locs = re.capture_locations();
                /// // We get a match here, but it's probably not intended.
                /// assert!(re.captures_read(&mut locs, &hay[2..]).is_some());
                /// // No match because the  assertions take the context into account.
                /// assert!(re.captures_read_at(&mut locs, hay, 2).is_none());
                /// ```
                #[inline]
                pub fn captures_read_at<'h>(
                    &self,
                    locs: &mut CaptureLocations,
                    haystack: &'h [u8],
                    start: usize,
                ) -> Option<Match<'h>> {
                    let input = Input::new(haystack).span(start..haystack.len());
                    self.meta.search_captures(&input, &mut locs.0);
                    locs.0.get_match().map(|m| Match::new(haystack, m.start(), m.end()))
                }

                /// An undocumented alias for `captures_read_at`.
                ///
                /// The `regex-capi` crate previously used this routine, so to avoid
                /// breaking that crate, we continue to provide the name as an undocumented
                /// alias.
                #[doc(hidden)]
                #[inline]
                pub fn read_captures_at<'h>(
                    &self,
                    locs: &mut CaptureLocations,
                    haystack: &'h [u8],
                    start: usize,
                ) -> Option<Match<'h>> {
                    self.captures_read_at(locs, haystack, start)
                }
            }

            /// Auxiliary methods.
            impl Regex 
            {
                /// Returns the original string of this regex.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"foo\w+bar").unwrap();
                /// assert_eq!(re.as_str(), r"foo\w+bar");
                /// ```
                #[inline]
                pub fn as_str(&self) -> &str {
                    &self.pattern
                }

                /// Returns an iterator over the capture names in this regex.
                ///
                /// The iterator returned yields elements of type `Option<&str>`. That is,
                /// the iterator yields values for all capture groups, even ones that are
                /// unnamed. The order of the groups corresponds to the order of the group's
                /// corresponding opening parenthesis.
                ///
                /// The first element of the iterator always yields the group corresponding
                /// to the overall match, and this group is always unnamed. Therefore, the
                /// iterator always yields at least one group.
                ///
                /// # Example
                ///
                /// This shows basic usage with a mix of named and unnamed capture groups:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(?<a>.(?<b>.))(.)(?:.)(?<c>.)").unwrap();
                /// let mut names = re.capture_names();
                /// assert_eq!(names.next(), Some(None));
                /// assert_eq!(names.next(), Some(Some("a")));
                /// assert_eq!(names.next(), Some(Some("b")));
                /// assert_eq!(names.next(), Some(None));
                /// // the '(?:.)' group is non-capturing and so doesn't appear here!
                /// assert_eq!(names.next(), Some(Some("c")));
                /// assert_eq!(names.next(), None);
                /// ```
                ///
                /// The iterator always yields at least one element, even for regexes with
                /// no capture groups and even for regexes that can never match:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"").unwrap();
                /// let mut names = re.capture_names();
                /// assert_eq!(names.next(), Some(None));
                /// assert_eq!(names.next(), None);
                ///
                /// let re = Regex::new(r"[a&&b]").unwrap();
                /// let mut names = re.capture_names();
                /// assert_eq!(names.next(), Some(None));
                /// assert_eq!(names.next(), None);
                /// ```
                #[inline]
                pub fn capture_names(&self) -> CaptureNames<'_> {
                    CaptureNames(self.meta.group_info().pattern_names(PatternID::ZERO))
                }

                /// Returns the number of captures groups in this regex.
                ///
                /// This includes all named and unnamed groups, including the implicit
                /// unnamed group that is always present and corresponds to the entire
                /// match.
                ///
                /// Since the implicit unnamed group is always included in this length, the
                /// length returned is guaranteed to be greater than zero.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"foo").unwrap();
                /// assert_eq!(1, re.captures_len());
                ///
                /// let re = Regex::new(r"(foo)").unwrap();
                /// assert_eq!(2, re.captures_len());
                ///
                /// let re = Regex::new(r"(?<a>.(?<b>.))(.)(?:.)(?<c>.)").unwrap();
                /// assert_eq!(5, re.captures_len());
                ///
                /// let re = Regex::new(r"[a&&b]").unwrap();
                /// assert_eq!(1, re.captures_len());
                /// ```
                #[inline]
                pub fn captures_len(&self) -> usize {
                    self.meta.group_info().group_len(PatternID::ZERO)
                }

                /// Returns the total number of capturing groups that appear in every
                /// possible match.
                ///
                /// If the number of capture groups can vary depending on the match, then
                /// this returns `None`. That is, a value is only returned when the number
                /// of matching groups is invariant or "static."
                ///
                /// Note that like [`Regex::captures_len`], this **does** include the
                /// implicit capturing group corresponding to the entire match. Therefore,
                /// when a non-None value is returned, it is guaranteed to be at least `1`.
                /// Stated differently, a return value of `Some(0)` is impossible.
                ///
                /// # Example
                ///
                /// This shows a few cases where a static number of capture groups is
                /// available and a few cases where it is not.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let len = |pattern| {
                ///     Regex::new(pattern).map(|re| re.static_captures_len())
                /// };
                ///
                /// assert_eq!(Some(1), len("a")?);
                /// assert_eq!(Some(2), len("(a)")?);
                /// assert_eq!(Some(2), len("(a)|(b)")?);
                /// assert_eq!(Some(3), len("(a)(b)|(c)(d)")?);
                /// assert_eq!(None, len("(a)|b")?);
                /// assert_eq!(None, len("a|(b)")?);
                /// assert_eq!(None, len("(b)*")?);
                /// assert_eq!(Some(2), len("(b)+")?);
                ///
                /// # Ok::<(), Box<dyn std::error::Error>>(())
                /// ```
                #[inline]
                pub fn static_captures_len(&self) -> Option<usize> {
                    self.meta.static_captures_len()
                }

                /// Returns a fresh allocated set of capture locations that can
                /// be reused in multiple calls to [`Regex::captures_read`] or
                /// [`Regex::captures_read_at`].
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(.)(.)(\w+)").unwrap();
                /// let mut locs = re.capture_locations();
                /// assert!(re.captures_read(&mut locs, b"Padron").is_some());
                /// assert_eq!(locs.get(0), Some((0, 6)));
                /// assert_eq!(locs.get(1), Some((0, 1)));
                /// assert_eq!(locs.get(2), Some((1, 2)));
                /// assert_eq!(locs.get(3), Some((2, 6)));
                /// ```
                #[inline]
                pub fn capture_locations(&self) -> CaptureLocations {
                    CaptureLocations(self.meta.create_captures())
                }

                /// An alias for `capture_locations` to preserve backward compatibility.
                ///
                /// The `regex-capi` crate uses this method, so to avoid breaking that
                /// crate, we continue to export it as an undocumented API.
                #[doc(hidden)]
                #[inline]
                pub fn locations(&self) -> CaptureLocations {
                    self.capture_locations()
                }
            }

            /// Represents a single match of a regex in a haystack.
            ///
            /// A `Match` contains both the start and end byte offsets of the match and the
            /// actual substring corresponding to the range of those byte offsets. It is
            /// guaranteed that `start <= end`. When `start == end`, the match is empty.
            ///
            /// Unlike the top-level `Match` type, this `Match` type is produced by APIs
            /// that search `&[u8]` haystacks. This means that the offsets in a `Match` can
            /// point to anywhere in the haystack, including in a place that splits the
            /// UTF-8 encoding of a Unicode scalar value.
            ///
            /// The lifetime parameter `'h` refers to the lifetime of the matched of the
            /// haystack that this match was produced from.
            ///
            /// # Numbering
            ///
            /// The byte offsets in a `Match` form a half-open interval. That is, the
            /// start of the range is inclusive and the end of the range is exclusive.
            /// For example, given a haystack `abcFOOxyz` and a match of `FOO`, its byte
            /// offset range starts at `3` and ends at `6`. `3` corresponds to `F` and
            /// `6` corresponds to `x`, which is one past the end of the match. This
            /// corresponds to the same kind of slicing that Rust uses.
            ///
            /// For more on why this was chosen over other schemes (aside from being
            /// consistent with how Rust the language works), see [this discussion] and
            /// [Dijkstra's note on a related topic][note].
            ///
            /// [this discussion]: https://github.com/rust-lang/regex/discussions/866
            /// [note]: https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html
            ///
            /// # Example
            ///
            /// This example shows the value of each of the methods on `Match` for a
            /// particular search.
            ///
            /// ```
            /// use regex::bytes::Regex;
            ///
            /// let re = Regex::new(r"\p{Greek}+").unwrap();
            /// let hay = "Greek: αβγδ".as_bytes();
            /// let m = re.find(hay).unwrap();
            /// assert_eq!(7, m.start());
            /// assert_eq!(15, m.end());
            /// assert!(!m.is_empty());
            /// assert_eq!(8, m.len());
            /// assert_eq!(7..15, m.range());
            /// assert_eq!("αβγδ".as_bytes(), m.as_bytes());
            /// ```
            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct Match<'h>
            {
                haystack: &'h [u8],
                start: usize,
                end: usize,
            }

            impl<'h> Match<'h> 
            {
                /// Returns the byte offset of the start of the match in the haystack. The
                /// start of the match corresponds to the position where the match begins
                /// and includes the first byte in the match.
                ///
                /// It is guaranteed that `Match::start() <= Match::end()`.
                ///
                /// Unlike the top-level `Match` type, the start offset may appear anywhere
                /// in the haystack. This includes between the code units of a UTF-8
                /// encoded Unicode scalar value.
                #[inline]
                pub fn start(&self) -> usize {
                    self.start
                }

                /// Returns the byte offset of the end of the match in the haystack. The
                /// end of the match corresponds to the byte immediately following the last
                /// byte in the match. This means that `&slice[start..end]` works as one
                /// would expect.
                ///
                /// It is guaranteed that `Match::start() <= Match::end()`.
                ///
                /// Unlike the top-level `Match` type, the start offset may appear anywhere
                /// in the haystack. This includes between the code units of a UTF-8
                /// encoded Unicode scalar value.
                #[inline]
                pub fn end(&self) -> usize {
                    self.end
                }

                /// Returns true if and only if this match has a length of zero.
                ///
                /// Note that an empty match can only occur when the regex itself can
                /// match the empty string. Here are some examples of regexes that can
                /// all match the empty string: `^`, `^$`, `\b`, `a?`, `a*`, `a{0}`,
                /// `(foo|\d+|quux)?`.
                #[inline]
                pub fn is_empty(&self) -> bool {
                    self.start == self.end
                }

                /// Returns the length, in bytes, of this match.
                #[inline]
                pub fn len(&self) -> usize {
                    self.end - self.start
                }

                /// Returns the range over the starting and ending byte offsets of the
                /// match in the haystack.
                #[inline]
                pub fn range(&self) -> ::ops::Range<usize> {
                    self.start..self.end
                }

                /// Returns the substring of the haystack that matched.
                #[inline]
                pub fn as_bytes(&self) -> &'h [u8] {
                    &self.haystack[self.range()]
                }

                /// Creates a new match from the given haystack and byte offsets.
                #[inline]
                fn new(haystack: &'h [u8], start: usize, end: usize) -> Match<'h> {
                    Match { haystack, start, end }
                }
            }

            impl<'h> ::fmt::Debug for Match<'h> 
            {
                fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {
                    use regex_automata::util::escape::DebugHaystack;

                    let mut fmt = f.debug_struct("Match");
                    fmt.field("start", &self.start)
                        .field("end", &self.end)
                        .field("bytes", &DebugHaystack(&self.as_bytes()));

                    fmt.finish()
                }
            }

            impl<'h> From<Match<'h>> for &'h [u8] {
                fn from(m: Match<'h>) -> &'h [u8] {
                    m.as_bytes()
                }
            }

            impl<'h> From<Match<'h>> for ::ops::Range<usize> {
                fn from(m: Match<'h>) -> ::ops::Range<usize> {
                    m.range()
                }
            }

            /// Represents the capture groups for a single match.
            ///
            /// Capture groups refer to parts of a regex enclosed in parentheses. They
            /// can be optionally named. The purpose of capture groups is to be able to
            /// reference different parts of a match based on the original pattern. In
            /// essence, a `Captures` is a container of [`Match`] values for each group
            /// that participated in a regex match. Each `Match` can be looked up by either
            /// its capture group index or name (if it has one).
            ///
            /// For example, say you want to match the individual letters in a 5-letter
            /// word:
            ///
            /// ```text
            /// (?<first>\w)(\w)(?:\w)\w(?<last>\w)
            /// ```
            ///
            /// This regex has 4 capture groups:
            ///
            /// * The group at index `0` corresponds to the overall match. It is always
            /// present in every match and never has a name.
            /// * The group at index `1` with name `first` corresponding to the first
            /// letter.
            /// * The group at index `2` with no name corresponding to the second letter.
            /// * The group at index `3` with name `last` corresponding to the fifth and
            /// last letter.
            ///
            /// Notice that `(?:\w)` was not listed above as a capture group despite it
            /// being enclosed in parentheses. That's because `(?:pattern)` is a special
            /// syntax that permits grouping but *without* capturing. The reason for not
            /// treating it as a capture is that tracking and reporting capture groups
            /// requires additional state that may lead to slower searches. So using as few
            /// capture groups as possible can help performance. (Although the difference
            /// in performance of a couple of capture groups is likely immaterial.)
            ///
            /// Values with this type are created by [`Regex::captures`] or
            /// [`Regex::captures_iter`].
            ///
            /// `'h` is the lifetime of the haystack that these captures were matched from.
            ///
            /// # Example
            ///
            /// ```
            /// use regex::bytes::Regex;
            ///
            /// let re = Regex::new(r"(?<first>\w)(\w)(?:\w)\w(?<last>\w)").unwrap();
            /// let caps = re.captures(b"toady").unwrap();
            /// assert_eq!(b"toady", &caps[0]);
            /// assert_eq!(b"t", &caps["first"]);
            /// assert_eq!(b"o", &caps[2]);
            /// assert_eq!(b"y", &caps["last"]);
            /// ```
            pub struct Captures<'h> {
                haystack: &'h [u8],
                caps: captures::Captures,
                static_captures_len: Option<usize>,
            }

            impl<'h> Captures<'h> {
                /// Returns the `Match` associated with the capture group at index `i`. If
                /// `i` does not correspond to a capture group, or if the capture group did
                /// not participate in the match, then `None` is returned.
                ///
                /// When `i == 0`, this is guaranteed to return a non-`None` value.
                ///
                /// # Examples
                ///
                /// Get the substring that matched with a default of an empty string if the
                /// group didn't participate in the match:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"[a-z]+(?:([0-9]+)|([A-Z]+))").unwrap();
                /// let caps = re.captures(b"abc123").unwrap();
                ///
                /// let substr1 = caps.get(1).map_or(&b""[..], |m| m.as_bytes());
                /// let substr2 = caps.get(2).map_or(&b""[..], |m| m.as_bytes());
                /// assert_eq!(substr1, b"123");
                /// assert_eq!(substr2, b"");
                /// ```
                #[inline]
                pub fn get(&self, i: usize) -> Option<Match<'h>> {
                    self.caps
                        .get_group(i)
                        .map(|sp| Match::new(self.haystack, sp.start, sp.end))
                }

                /// Returns the `Match` associated with the capture group named `name`. If
                /// `name` isn't a valid capture group or it refers to a group that didn't
                /// match, then `None` is returned.
                ///
                /// Note that unlike `caps["name"]`, this returns a `Match` whose lifetime
                /// matches the lifetime of the haystack in this `Captures` value.
                /// Conversely, the substring returned by `caps["name"]` has a lifetime
                /// of the `Captures` value, which is likely shorter than the lifetime of
                /// the haystack. In some cases, it may be necessary to use this method to
                /// access the matching substring instead of the `caps["name"]` notation.
                ///
                /// # Examples
                ///
                /// Get the substring that matched with a default of an empty string if the
                /// group didn't participate in the match:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(
                ///     r"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))",
                /// ).unwrap();
                /// let caps = re.captures(b"abc123").unwrap();
                ///
                /// let numbers = caps.name("numbers").map_or(&b""[..], |m| m.as_bytes());
                /// let letters = caps.name("letters").map_or(&b""[..], |m| m.as_bytes());
                /// assert_eq!(numbers, b"123");
                /// assert_eq!(letters, b"");
                /// ```
                #[inline]
                pub fn name(&self, name: &str) -> Option<Match<'h>> {
                    self.caps
                        .get_group_by_name(name)
                        .map(|sp| Match::new(self.haystack, sp.start, sp.end))
                }

                /// This is a convenience routine for extracting the substrings
                /// corresponding to matching capture groups.
                ///
                /// This returns a tuple where the first element corresponds to the full
                /// substring of the haystack that matched the regex. The second element is
                /// an array of substrings, with each corresponding to the substring that
                /// matched for a particular capture group.
                ///
                /// # Panics
                ///
                /// This panics if the number of possible matching groups in this
                /// `Captures` value is not fixed to `N` in all circumstances.
                /// More precisely, this routine only works when `N` is equivalent to
                /// [`Regex::static_captures_len`].
                ///
                /// Stated more plainly, if the number of matching capture groups in a
                /// regex can vary from match to match, then this function always panics.
                ///
                /// For example, `(a)(b)|(c)` could produce two matching capture groups
                /// or one matching capture group for any given match. Therefore, one
                /// cannot use `extract` with such a pattern.
                ///
                /// But a pattern like `(a)(b)|(c)(d)` can be used with `extract` because
                /// the number of capture groups in every match is always equivalent,
                /// even if the capture _indices_ in each match are not.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"([0-9]{4})-([0-9]{2})-([0-9]{2})").unwrap();
                /// let hay = b"On 2010-03-14, I became a Tennessee lamb.";
                /// let Some((full, [year, month, day])) =
                ///     re.captures(hay).map(|caps| caps.extract()) else { return };
                /// assert_eq!(b"2010-03-14", full);
                /// assert_eq!(b"2010", year);
                /// assert_eq!(b"03", month);
                /// assert_eq!(b"14", day);
                /// ```
                ///
                /// # Example: iteration
                ///
                /// This example shows how to use this method when iterating over all
                /// `Captures` matches in a haystack.
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"([0-9]{4})-([0-9]{2})-([0-9]{2})").unwrap();
                /// let hay = b"1973-01-05, 1975-08-25 and 1980-10-18";
                ///
                /// let mut dates: Vec<(&[u8], &[u8], &[u8])> = vec![];
                /// for (_, [y, m, d]) in re.captures_iter(hay).map(|c| c.extract()) {
                ///     dates.push((y, m, d));
                /// }
                /// assert_eq!(dates, vec![
                ///     (&b"1973"[..], &b"01"[..], &b"05"[..]),
                ///     (&b"1975"[..], &b"08"[..], &b"25"[..]),
                ///     (&b"1980"[..], &b"10"[..], &b"18"[..]),
                /// ]);
                /// ```
                ///
                /// # Example: parsing different formats
                ///
                /// This API is particularly useful when you need to extract a particular
                /// value that might occur in a different format. Consider, for example,
                /// an identifier that might be in double quotes or single quotes:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r#"id:(?:"([^"]+)"|'([^']+)')"#).unwrap();
                /// let hay = br#"The first is id:"foo" and the second is id:'bar'."#;
                /// let mut ids = vec![];
                /// for (_, [id]) in re.captures_iter(hay).map(|c| c.extract()) {
                ///     ids.push(id);
                /// }
                /// assert_eq!(ids, vec![b"foo", b"bar"]);
                /// ```
                pub fn extract<const N: usize>(&self) -> (&'h [u8], [&'h [u8]; N]) {
                    let len = self
                        .static_captures_len
                        .expect("number of capture groups can vary in a match")
                        .checked_sub(1)
                        .expect("number of groups is always greater than zero");
                    assert_eq!(N, len, "asked for {N} groups, but must ask for {len}");
                    // The regex-automata variant of extract is a bit more permissive.
                    // It doesn't require the number of matching capturing groups to be
                    // static, and you can even request fewer groups than what's there. So
                    // this is guaranteed to never panic because we've asserted above that
                    // the user has requested precisely the number of groups that must be
                    // present in any match for this regex.
                    self.caps.extract_bytes(self.haystack)
                }

                /// Expands all instances of `$ref` in `replacement` to the corresponding
                /// capture group, and writes them to the `dst` buffer given. A `ref` can
                /// be a capture group index or a name. If `ref` doesn't refer to a capture
                /// group that participated in the match, then it is replaced with the
                /// empty string.
                ///
                /// # Format
                ///
                /// The format of the replacement string supports two different kinds of
                /// capture references: unbraced and braced.
                ///
                /// For the unbraced format, the format supported is `$ref` where `name`
                /// can be any character in the class `[0-9A-Za-z_]`. `ref` is always
                /// the longest possible parse. So for example, `$1a` corresponds to the
                /// capture group named `1a` and not the capture group at index `1`. If
                /// `ref` matches `^[0-9]+$`, then it is treated as a capture group index
                /// itself and not a name.
                ///
                /// For the braced format, the format supported is `${ref}` where `ref` can
                /// be any sequence of bytes except for `}`. If no closing brace occurs,
                /// then it is not considered a capture reference. As with the unbraced
                /// format, if `ref` matches `^[0-9]+$`, then it is treated as a capture
                /// group index and not a name.
                ///
                /// The braced format is useful for exerting precise control over the name
                /// of the capture reference. For example, `${1}a` corresponds to the
                /// capture group reference `1` followed by the letter `a`, where as `$1a`
                /// (as mentioned above) corresponds to the capture group reference `1a`.
                /// The braced format is also useful for expressing capture group names
                /// that use characters not supported by the unbraced format. For example,
                /// `${foo[bar].baz}` refers to the capture group named `foo[bar].baz`.
                ///
                /// If a capture group reference is found and it does not refer to a valid
                /// capture group, then it will be replaced with the empty string.
                ///
                /// To write a literal `$`, use `$$`.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(
                ///     r"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})",
                /// ).unwrap();
                /// let hay = b"On 14-03-2010, I became a Tennessee lamb.";
                /// let caps = re.captures(hay).unwrap();
                ///
                /// let mut dst = vec![];
                /// caps.expand(b"year=$year, month=$month, day=$day", &mut dst);
                /// assert_eq!(dst, b"year=2010, month=03, day=14");
                /// ```
                #[inline]
                pub fn expand(&self, replacement: &[u8], dst: &mut Vec<u8>) {
                    self.caps.interpolate_bytes_into(self.haystack, replacement, dst);
                }

                /// Returns an iterator over all capture groups. This includes both
                /// matching and non-matching groups.
                ///
                /// The iterator always yields at least one matching group: the first group
                /// (at index `0`) with no name. Subsequent groups are returned in the order
                /// of their opening parenthesis in the regex.
                ///
                /// The elements yielded have type `Option<Match<'h>>`, where a non-`None`
                /// value is present if the capture group matches.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(\w)(\d)?(\w)").unwrap();
                /// let caps = re.captures(b"AZ").unwrap();
                ///
                /// let mut it = caps.iter();
                /// assert_eq!(it.next().unwrap().map(|m| m.as_bytes()), Some(&b"AZ"[..]));
                /// assert_eq!(it.next().unwrap().map(|m| m.as_bytes()), Some(&b"A"[..]));
                /// assert_eq!(it.next().unwrap().map(|m| m.as_bytes()), None);
                /// assert_eq!(it.next().unwrap().map(|m| m.as_bytes()), Some(&b"Z"[..]));
                /// assert_eq!(it.next(), None);
                /// ```
                #[inline]
                pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {
                    SubCaptureMatches { haystack: self.haystack, it: self.caps.iter() }
                }

                /// Returns the total number of capture groups. This includes both
                /// matching and non-matching groups.
                ///
                /// The length returned is always equivalent to the number of elements
                /// yielded by [`Captures::iter`]. Consequently, the length is always
                /// greater than zero since every `Captures` value always includes the
                /// match for the entire regex.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(\w)(\d)?(\w)").unwrap();
                /// let caps = re.captures(b"AZ").unwrap();
                /// assert_eq!(caps.len(), 4);
                /// ```
                #[inline]
                pub fn len(&self) -> usize {
                    self.caps.group_len()
                }
            }

            impl<'h> ::fmt::Debug for Captures<'h> {
                fn fmt(&self, f: &mut ::fmt::Formatter<'_>) -> ::fmt::Result {
                    /// A little helper type to provide a nice map-like debug
                    /// representation for our capturing group spans.
                    ///
                    /// regex-automata has something similar, but it includes the pattern
                    /// ID in its debug output, which is confusing. It also doesn't include
                    /// that strings that match because a regex-automata `Captures` doesn't
                    /// borrow the haystack.
                    struct CapturesDebugMap<'a> {
                        caps: &'a Captures<'a>,
                    }

                    impl<'a> ::fmt::Debug for CapturesDebugMap<'a> {
                        fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {
                            let mut map = f.debug_map();
                            let names =
                                self.caps.caps.group_info().pattern_names(PatternID::ZERO);
                            for (group_index, maybe_name) in names.enumerate() {
                                let key = Key(group_index, maybe_name);
                                match self.caps.get(group_index) {
                                    None => map.entry(&key, &None::<()>),
                                    Some(mat) => map.entry(&key, &Value(mat)),
                                };
                            }
                            map.finish()
                        }
                    }

                    struct Key<'a>(usize, Option<&'a str>);

                    impl<'a> ::fmt::Debug for Key<'a> {
                        fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {
                            write!(f, "{}", self.0)?;
                            if let Some(name) = self.1 {
                                write!(f, "/{name:?}")?;
                            }
                            Ok(())
                        }
                    }

                    struct Value<'a>(Match<'a>);

                    impl<'a> ::fmt::Debug for Value<'a> {
                        fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {
                            use regex_automata::util::escape::DebugHaystack;

                            write!(
                                f,
                                "{}..{}/{:?}",
                                self.0.start(),
                                self.0.end(),
                                DebugHaystack(self.0.as_bytes())
                            )
                        }
                    }

                    f.debug_tuple("Captures")
                        .field(&CapturesDebugMap { caps: self })
                        .finish()
                }
            }

            /// Get a matching capture group's haystack substring by index.
            ///
            /// The haystack substring returned can't outlive the `Captures` object if this
            /// method is used, because of how `Index` is defined (normally `a[i]` is part
            /// of `a` and can't outlive it). To work around this limitation, do that, use
            /// [`Captures::get`] instead.
            ///
            /// `'h` is the lifetime of the matched haystack, but the lifetime of the
            /// `&str` returned by this implementation is the lifetime of the `Captures`
            /// value itself.
            ///
            /// # Panics
            ///
            /// If there is no matching group at the given index.
            impl<'h> ::ops::Index<usize> for Captures<'h> {
                type Output = [u8];

                // The lifetime is written out to make it clear that the &str returned
                // does NOT have a lifetime equivalent to 'h.
                fn index<'a>(&'a self, i: usize) -> &'a [u8] {
                    self.get(i)
                        .map(|m| m.as_bytes())
                        .unwrap_or_else(|| panic!("no group at index '{}'", i))
                }
            }

            /// Get a matching capture group's haystack substring by name.
            ///
            /// The haystack substring returned can't outlive the `Captures` object if this
            /// method is used, because of how `Index` is defined (normally `a[i]` is part
            /// of `a` and can't outlive it). To work around this limitation, do that, use
            /// [`Captures::name`] instead.
            ///
            /// `'h` is the lifetime of the matched haystack, but the lifetime of the
            /// `&str` returned by this implementation is the lifetime of the `Captures`
            /// value itself.
            ///
            /// `'n` is the lifetime of the group name used to index the `Captures` value.
            ///
            /// # Panics
            ///
            /// If there is no matching group at the given name.
            impl<'h, 'n> ::ops::Index<&'n str> for Captures<'h> {
                type Output = [u8];

                fn index<'a>(&'a self, name: &'n str) -> &'a [u8] {
                    self.name(name)
                        .map(|m| m.as_bytes())
                        .unwrap_or_else(|| panic!("no group named '{}'", name))
                }
            }

            /// A low level representation of the byte offsets of each capture group.
            ///
            /// You can think of this as a lower level [`Captures`], where this type does
            /// not support named capturing groups directly and it does not borrow the
            /// haystack that these offsets were matched on.
            ///
            /// Primarily, this type is useful when using the lower level `Regex` APIs such
            /// as [`Regex::captures_read`], which permits amortizing the allocation in
            /// which capture match offsets are stored.
            ///
            /// In order to build a value of this type, you'll need to call the
            /// [`Regex::capture_locations`] method. The value returned can then be reused
            /// in subsequent searches for that regex. Using it for other regexes may
            /// result in a panic or otherwise incorrect results.
            ///
            /// # Example
            ///
            /// This example shows how to create and use `CaptureLocations` in a search.
            ///
            /// ```
            /// use regex::bytes::Regex;
            ///
            /// let re = Regex::new(r"(?<first>\w+)\s+(?<last>\w+)").unwrap();
            /// let mut locs = re.capture_locations();
            /// let m = re.captures_read(&mut locs, b"Bruce Springsteen").unwrap();
            /// assert_eq!(0..17, m.range());
            /// assert_eq!(Some((0, 17)), locs.get(0));
            /// assert_eq!(Some((0, 5)), locs.get(1));
            /// assert_eq!(Some((6, 17)), locs.get(2));
            ///
            /// // Asking for an invalid capture group always returns None.
            /// assert_eq!(None, locs.get(3));
            /// # // literals are too big for 32-bit usize: #1041
            /// # #[cfg(target_pointer_width = "64")]
            /// assert_eq!(None, locs.get(34973498648));
            /// # #[cfg(target_pointer_width = "64")]
            /// assert_eq!(None, locs.get(9944060567225171988));
            /// ```
            #[derive(Clone, Debug)]
            pub struct CaptureLocations(captures::Captures);

            /// A type alias for `CaptureLocations` for backwards compatibility.
            ///
            /// Previously, we exported `CaptureLocations` as `Locations` in an
            /// undocumented API. To prevent breaking that code (e.g., in `regex-capi`),
            /// we continue re-exporting the same undocumented API.
            #[doc(hidden)]
            pub type Locations = CaptureLocations;

            impl CaptureLocations {
                /// Returns the start and end byte offsets of the capture group at index
                /// `i`. This returns `None` if `i` is not a valid capture group or if the
                /// capture group did not match.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(?<first>\w+)\s+(?<last>\w+)").unwrap();
                /// let mut locs = re.capture_locations();
                /// re.captures_read(&mut locs, b"Bruce Springsteen").unwrap();
                /// assert_eq!(Some((0, 17)), locs.get(0));
                /// assert_eq!(Some((0, 5)), locs.get(1));
                /// assert_eq!(Some((6, 17)), locs.get(2));
                /// ```
                #[inline]
                pub fn get(&self, i: usize) -> Option<(usize, usize)> {
                    self.0.get_group(i).map(|sp| (sp.start, sp.end))
                }

                /// Returns the total number of capture groups (even if they didn't match).
                /// That is, the length returned is unaffected by the result of a search.
                ///
                /// This is always at least `1` since every regex has at least `1`
                /// capturing group that corresponds to the entire match.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"(?<first>\w+)\s+(?<last>\w+)").unwrap();
                /// let mut locs = re.capture_locations();
                /// assert_eq!(3, locs.len());
                /// re.captures_read(&mut locs, b"Bruce Springsteen").unwrap();
                /// assert_eq!(3, locs.len());
                /// ```
                ///
                /// Notice that the length is always at least `1`, regardless of the regex:
                ///
                /// ```
                /// use regex::bytes::Regex;
                ///
                /// let re = Regex::new(r"").unwrap();
                /// let locs = re.capture_locations();
                /// assert_eq!(1, locs.len());
                ///
                /// // [a&&b] is a regex that never matches anything.
                /// let re = Regex::new(r"[a&&b]").unwrap();
                /// let locs = re.capture_locations();
                /// assert_eq!(1, locs.len());
                /// ```
                #[inline]
                pub fn len(&self) -> usize {
                    // self.0.group_len() returns 0 if the underlying captures doesn't
                    // represent a match, but the behavior guaranteed for this method is
                    // that the length doesn't change based on a match or not.
                    self.0.group_info().group_len(PatternID::ZERO)
                }

                /// An alias for the `get` method for backwards compatibility.
                ///
                /// Previously, we exported `get` as `pos` in an undocumented API. To
                /// prevent breaking that code (e.g., in `regex-capi`), we continue
                /// re-exporting the same undocumented API.
                #[doc(hidden)]
                #[inline]
                pub fn pos(&self, i: usize) -> Option<(usize, usize)> {
                    self.get(i)
                }
            }

            /// An iterator over all non-overlapping matches in a haystack.
            ///
            /// This iterator yields [`Match`] values. The iterator stops when no more
            /// matches can be found.
            ///
            /// `'r` is the lifetime of the compiled regular expression and `'h` is the
            /// lifetime of the haystack.
            ///
            /// This iterator is created by [`Regex::find_iter`].
            ///
            /// # Time complexity
            ///
            /// Note that since an iterator runs potentially many searches on the haystack
            /// and since each search has worst case `O(m * n)` time complexity, the
            /// overall worst case time complexity for iteration is `O(m * n^2)`.
            #[derive(Debug)]
            pub struct Matches<'r, 'h> {
                haystack: &'h [u8],
                it: meta::FindMatches<'r, 'h>,
            }

            impl<'r, 'h> Iterator for Matches<'r, 'h> {
                type Item = Match<'h>;

                #[inline]
                fn next(&mut self) -> Option<Match<'h>> {
                    self.it
                        .next()
                        .map(|sp| Match::new(self.haystack, sp.start(), sp.end()))
                }

                #[inline]
                fn count(self) -> usize {
                    // This can actually be up to 2x faster than calling `next()` until
                    // completion, because counting matches when using a DFA only requires
                    // finding the end of each match. But returning a `Match` via `next()`
                    // requires the start of each match which, with a DFA, requires a
                    // reverse forward scan to find it.
                    self.it.count()
                }
            }

            impl<'r, 'h> ::iter::FusedIterator for Matches<'r, 'h> {}

            /// An iterator over all non-overlapping capture matches in a haystack.
            ///
            /// This iterator yields [`Captures`] values. The iterator stops when no more
            /// matches can be found.
            ///
            /// `'r` is the lifetime of the compiled regular expression and `'h` is the
            /// lifetime of the matched string.
            ///
            /// This iterator is created by [`Regex::captures_iter`].
            ///
            /// # Time complexity
            ///
            /// Note that since an iterator runs potentially many searches on the haystack
            /// and since each search has worst case `O(m * n)` time complexity, the
            /// overall worst case time complexity for iteration is `O(m * n^2)`.
            #[derive(Debug)]
            pub struct CaptureMatches<'r, 'h> {
                haystack: &'h [u8],
                it: meta::CapturesMatches<'r, 'h>,
            }

            impl<'r, 'h> Iterator for CaptureMatches<'r, 'h> {
                type Item = Captures<'h>;

                #[inline]
                fn next(&mut self) -> Option<Captures<'h>> {
                    let static_captures_len = self.it.regex().static_captures_len();
                    self.it.next().map(|caps| Captures {
                        haystack: self.haystack,
                        caps,
                        static_captures_len,
                    })
                }

                #[inline]
                fn count(self) -> usize {
                    // This can actually be up to 2x faster than calling `next()` until
                    // completion, because counting matches when using a DFA only requires
                    // finding the end of each match. But returning a `Match` via `next()`
                    // requires the start of each match which, with a DFA, requires a
                    // reverse forward scan to find it.
                    self.it.count()
                }
            }

            impl<'r, 'h> ::iter::FusedIterator for CaptureMatches<'r, 'h> {}

            /// An iterator over all substrings delimited by a regex match.
            ///
            /// `'r` is the lifetime of the compiled regular expression and `'h` is the
            /// lifetime of the byte string being split.
            ///
            /// This iterator is created by [`Regex::split`].
            ///
            /// # Time complexity
            ///
            /// Note that since an iterator runs potentially many searches on the haystack
            /// and since each search has worst case `O(m * n)` time complexity, the
            /// overall worst case time complexity for iteration is `O(m * n^2)`.
            #[derive(Debug)]
            pub struct Split<'r, 'h> {
                haystack: &'h [u8],
                it: meta::Split<'r, 'h>,
            }

            impl<'r, 'h> Iterator for Split<'r, 'h> {
                type Item = &'h [u8];

                #[inline]
                fn next(&mut self) -> Option<&'h [u8]> {
                    self.it.next().map(|span| &self.haystack[span])
                }
            }

            impl<'r, 'h> ::iter::FusedIterator for Split<'r, 'h> {}

            /// An iterator over at most `N` substrings delimited by a regex match.
            ///
            /// The last substring yielded by this iterator will be whatever remains after
            /// `N-1` splits.
            ///
            /// `'r` is the lifetime of the compiled regular expression and `'h` is the
            /// lifetime of the byte string being split.
            ///
            /// This iterator is created by [`Regex::splitn`].
            ///
            /// # Time complexity
            ///
            /// Note that since an iterator runs potentially many searches on the haystack
            /// and since each search has worst case `O(m * n)` time complexity, the
            /// overall worst case time complexity for iteration is `O(m * n^2)`.
            ///
            /// Although note that the worst case time here has an upper bound given
            /// by the `limit` parameter to [`Regex::splitn`].
            #[derive(Debug)]
            pub struct SplitN<'r, 'h> {
                haystack: &'h [u8],
                it: meta::SplitN<'r, 'h>,
            }

            impl<'r, 'h> Iterator for SplitN<'r, 'h> {
                type Item = &'h [u8];

                #[inline]
                fn next(&mut self) -> Option<&'h [u8]> {
                    self.it.next().map(|span| &self.haystack[span])
                }

                #[inline]
                fn size_hint(&self) -> (usize, Option<usize>) {
                    self.it.size_hint()
                }
            }

            impl<'r, 'h> ::iter::FusedIterator for SplitN<'r, 'h> {}

            /// An iterator over the names of all capture groups in a regex.
            ///
            /// This iterator yields values of type `Option<&str>` in order of the opening
            /// capture group parenthesis in the regex pattern. `None` is yielded for
            /// groups with no name. The first element always corresponds to the implicit
            /// and unnamed group for the overall match.
            ///
            /// `'r` is the lifetime of the compiled regular expression.
            ///
            /// This iterator is created by [`Regex::capture_names`].
            #[derive(Clone, Debug)]
            pub struct CaptureNames<'r>(captures::GroupInfoPatternNames<'r>);

            impl<'r> Iterator for CaptureNames<'r> {
                type Item = Option<&'r str>;

                #[inline]
                fn next(&mut self) -> Option<Option<&'r str>> {
                    self.0.next()
                }

                #[inline]
                fn size_hint(&self) -> (usize, Option<usize>) {
                    self.0.size_hint()
                }

                #[inline]
                fn count(self) -> usize {
                    self.0.count()
                }
            }

            impl<'r> ExactSizeIterator for CaptureNames<'r> {}

            impl<'r> ::iter::FusedIterator for CaptureNames<'r> {}

            /// An iterator over all group matches in a [`Captures`] value.
            ///
            /// This iterator yields values of type `Option<Match<'h>>`, where `'h` is the
            /// lifetime of the haystack that the matches are for. The order of elements
            /// yielded corresponds to the order of the opening parenthesis for the group
            /// in the regex pattern. `None` is yielded for groups that did not participate
            /// in the match.
            ///
            /// The first element always corresponds to the implicit group for the overall
            /// match. Since this iterator is created by a [`Captures`] value, and a
            /// `Captures` value is only created when a match occurs, it follows that the
            /// first element yielded by this iterator is guaranteed to be non-`None`.
            ///
            /// The lifetime `'c` corresponds to the lifetime of the `Captures` value that
            /// created this iterator, and the lifetime `'h` corresponds to the originally
            /// matched haystack.
            #[derive(Clone, Debug)]
            pub struct SubCaptureMatches<'c, 'h> {
                haystack: &'h [u8],
                it: captures::CapturesPatternIter<'c>,
            }

            impl<'c, 'h> Iterator for SubCaptureMatches<'c, 'h> {
                type Item = Option<Match<'h>>;

                #[inline]
                fn next(&mut self) -> Option<Option<Match<'h>>> {
                    self.it.next().map(|group| {
                        group.map(|sp| Match::new(self.haystack, sp.start, sp.end))
                    })
                }

                #[inline]
                fn size_hint(&self) -> (usize, Option<usize>) {
                    self.it.size_hint()
                }

                #[inline]
                fn count(self) -> usize {
                    self.it.count()
                }
            }

            impl<'c, 'h> ExactSizeIterator for SubCaptureMatches<'c, 'h> {}

            impl<'c, 'h> ::iter::FusedIterator for SubCaptureMatches<'c, 'h> {}

            /// A trait for types that can be used to replace matches in a haystack.
            ///
            /// In general, users of this crate shouldn't need to implement this trait,
            /// since implementations are already provided for `&[u8]` along with other
            /// variants of byte string types, as well as `FnMut(&Captures) -> Vec<u8>` (or
            /// any `FnMut(&Captures) -> T` where `T: AsRef<[u8]>`). Those cover most use
            /// cases, but callers can implement this trait directly if necessary.
            ///
            /// # Example
            ///
            /// This example shows a basic implementation of the `Replacer` trait. This can
            /// be done much more simply using the replacement byte string interpolation
            /// support (e.g., `$first $last`), but this approach avoids needing to parse
            /// the replacement byte string at all.
            ///
            /// ```
            /// use regex::bytes::{Captures, Regex, Replacer};
            ///
            /// struct NameSwapper;
            ///
            /// impl Replacer for NameSwapper {
            ///     fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
            ///         dst.extend_from_slice(&caps["first"]);
            ///         dst.extend_from_slice(b" ");
            ///         dst.extend_from_slice(&caps["last"]);
            ///     }
            /// }
            ///
            /// let re = Regex::new(r"(?<last>[^,\s]+),\s+(?<first>\S+)").unwrap();
            /// let result = re.replace(b"Springsteen, Bruce", NameSwapper);
            /// assert_eq!(result, &b"Bruce Springsteen"[..]);
            /// ```
            pub trait Replacer {
                /// Appends possibly empty data to `dst` to replace the current match.
                ///
                /// The current match is represented by `caps`, which is guaranteed to have
                /// a match at capture group `0`.
                ///
                /// For example, a no-op replacement would be
                /// `dst.extend_from_slice(&caps[0])`.
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>);
                /// Return a fixed unchanging replacement byte string.
                ///
                /// When doing replacements, if access to [`Captures`] is not needed (e.g.,
                /// the replacement byte string does not need `$` expansion), then it can
                /// be beneficial to avoid finding sub-captures.
                ///
                /// In general, this is called once for every call to a replacement routine
                /// such as [`Regex::replace_all`].
                fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, [u8]>> {
                    None
                }

                /// Returns a type that implements `Replacer`, but that borrows and wraps
                /// this `Replacer`.
                ///
                /// This is useful when you want to take a generic `Replacer` (which might
                /// not be cloneable) and use it without consuming it, so it can be used
                /// more than once.
                ///
                /// # Example
                ///
                /// ```
                /// use regex::bytes::{Regex, Replacer};
                ///
                /// fn replace_all_twice<R: Replacer>(
                ///     re: Regex,
                ///     src: &[u8],
                ///     mut rep: R,
                /// ) -> Vec<u8> {
                ///     let dst = re.replace_all(src, rep.by_ref());
                ///     let dst = re.replace_all(&dst, rep.by_ref());
                ///     dst.into_owned()
                /// }
                /// ```
                fn by_ref<'r>(&'r mut self) -> ReplacerRef<'r, Self> {
                    ReplacerRef(self)
                }
            }

            impl<'a, const N: usize> Replacer for &'a [u8; N] {
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
                    caps.expand(&**self, dst);
                }

                fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {
                    no_expansion(self)
                }
            }

            impl<const N: usize> Replacer for [u8; N] {
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
                    caps.expand(&*self, dst);
                }

                fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {
                    no_expansion(self)
                }
            }

            impl<'a> Replacer for &'a [u8] {
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
                    caps.expand(*self, dst);
                }

                fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {
                    no_expansion(self)
                }
            }

            impl<'a> Replacer for &'a Vec<u8> {
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
                    caps.expand(*self, dst);
                }

                fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {
                    no_expansion(self)
                }
            }

            impl Replacer for Vec<u8> {
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
                    caps.expand(self, dst);
                }

                fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {
                    no_expansion(self)
                }
            }

            impl<'a> Replacer for Cow<'a, [u8]> {
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
                    caps.expand(self.as_ref(), dst);
                }

                fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {
                    no_expansion(self)
                }
            }

            impl<'a> Replacer for &'a Cow<'a, [u8]> {
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
                    caps.expand(self.as_ref(), dst);
                }

                fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {
                    no_expansion(self)
                }
            }

            impl<F, T> Replacer for F
            where
                F: FnMut(&Captures<'_>) -> T,
                T: AsRef<[u8]>,
            {
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
                    dst.extend_from_slice((*self)(caps).as_ref());
                }
            }

            /// A by-reference adaptor for a [`Replacer`].
            ///
            /// This permits reusing the same `Replacer` value in multiple calls to a
            /// replacement routine like [`Regex::replace_all`].
            ///
            /// This type is created by [`Replacer::by_ref`].
            #[derive(Debug)]
            pub struct ReplacerRef<'a, R: ?Sized>(&'a mut R);

            impl<'a, R: Replacer + ?Sized + 'a> Replacer for ReplacerRef<'a, R> {
                fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {
                    self.0.replace_append(caps, dst)
                }

                fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, [u8]>> {
                    self.0.no_expansion()
                }
            }

            /// A helper type for forcing literal string replacement.
            ///
            /// It can be used with routines like [`Regex::replace`] and
            /// [`Regex::replace_all`] to do a literal string replacement without expanding
            /// `$name` to their corresponding capture groups. This can be both convenient
            /// (to avoid escaping `$`, for example) and faster (since capture groups
            /// don't need to be found).
            ///
            /// `'s` is the lifetime of the literal string to use.
            ///
            /// # Example
            ///
            /// ```
            /// use regex::bytes::{NoExpand, Regex};
            ///
            /// let re = Regex::new(r"(?<last>[^,\s]+),\s+(\S+)").unwrap();
            /// let result = re.replace(b"Springsteen, Bruce", NoExpand(b"$2 $last"));
            /// assert_eq!(result, &b"$2 $last"[..]);
            /// ```
            #[derive(Clone, Debug)]
            pub struct NoExpand<'s>(pub &'s [u8]);

            impl<'s> Replacer for NoExpand<'s> {
                fn replace_append(&mut self, _: &Captures<'_>, dst: &mut Vec<u8>) {
                    dst.extend_from_slice(self.0);
                }

                fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {
                    Some(Cow::Borrowed(self.0))
                }
            }

            /// Quickly checks the given replacement string for whether interpolation
            /// should be done on it. It returns `None` if a `$` was found anywhere in the
            /// given string, which suggests interpolation needs to be done. But if there's
            /// no `$` anywhere, then interpolation definitely does not need to be done. In
            /// that case, the given string is returned as a borrowed `Cow`.
            ///
            /// This is meant to be used to implement the `Replacer::no_expansion` method
            /// in its various trait impls.
            fn no_expansion<T: AsRef<[u8]>>(replacement: &T) -> Option<Cow<'_, [u8]>> {
                let replacement = replacement.as_ref();
                match crate::find_byte::find_byte(b'$', replacement) {
                    Some(_) => None,
                    None => Some(Cow::Borrowed(replacement)),
                }
            }
        }

        pub mod string
        {
            use ::
            {
                *,
            };
        }
        
    }

    pub mod regexset
    {
        use ::
        {
            *,
        };

        pub mod bytes
        {
            use ::
            {
                *,
            };
            /*
            use alloc::string::String;
            use regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};
            use crate::{bytes::RegexSetBuilder, Error}; */
            /// Match multiple, possibly overlapping, regexes in a single search.
            #[derive(Clone)]
            pub struct RegexSet
            {
                pub meta: meta::Regex,
                pub patterns: alloc::sync::Arc<[String]>,
            }
        }

        pub mod string
        {
            use ::
            {
                *,
            };
            /*
            use alloc::string::String;

            use regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};

            use crate::{Error, RegexSetBuilder}; */
            /// Match multiple, possibly overlapping, regexes in a single search.
            #[derive(Clone)]
            pub struct RegexSet
            {
                pub meta: meta::Regex,
                pub patterns: alloc::sync::Arc<[String]>,
            }

            impl RegexSet
            {
                /// Create a new regex set with the given regular expressions.
                pub fn new<I, S>(exprs: I) -> Result<RegexSet, Error> where
                S: AsRef<str>,
                I: IntoIterator<Item = S>
                {
                    RegexSetBuilder::new(exprs).build()
                }
                /// Create a new empty regex set.
                pub fn empty() -> RegexSet
                {
                    let empty: [&str; 0] = [];
                    RegexSetBuilder::new(empty).build().unwrap()
                }
                /// Returns true if and only if one of the regexes in this set matches the haystack given.
                #[inline] pub fn is_match(&self, haystack: &str) -> bool { self.is_match_at(haystack, 0) }
                /// Returns true if and only if one of the regexes in this set matches the haystack given, 
                /// with the search starting at the offset given.
                #[inline] pub fn is_match_at(&self, haystack: &str, start: usize) -> bool
                { self.meta.is_match(Input::new(haystack).span(start..haystack.len())) }
                /// Returns the set of regexes that match in the given haystack.
                #[inline] pub fn matches(&self, haystack: &str) -> SetMatches { self.matches_at(haystack, 0) }
                /// Returns the set of regexes that match in the given haystack.
                #[inline] pub fn matches_at(&self, haystack: &str, start: usize) -> SetMatches
                {
                    let input = Input::new(haystack).span(start..haystack.len());
                    let mut patset = PatternSet::new(self.meta.pattern_len());
                    self.meta.which_overlapping_matches(&input, &mut patset);
                    SetMatches(patset)
                }
                /// Returns the same as matches, but starts the search at the given offset and stores the matches into the slice given.
                #[inline] pub fn matches_read_at
                (
                    &self,
                    matches: &mut [bool],
                    haystack: &str,
                    start: usize,
                ) -> bool
                {
                    let mut patset = PatternSet::new(self.meta.pattern_len());
                    let mut input = Input::new(haystack);
                    input.set_start(start);
                    self.meta.which_overlapping_matches(&input, &mut patset);
                    
                    for pid in patset.iter()
                    { matches[pid] = true; }

                    !patset.is_empty()
                }

                /// An alias for `matches_read_at` to preserve backward compatibility.
                #[inline] pub fn read_matches_at
                (
                    &self,
                    matches: &mut [bool],
                    haystack: &str,
                    start: usize,
                ) -> bool
                { self.matches_read_at(matches, haystack, start) }
                /// Returns the total number of regexes in this set.
                #[inline] pub fn len(&self) -> usize { self.meta.pattern_len() }
                /// Returns `true` if this set contains no regexes.
                #[inline] pub fn is_empty(&self) -> bool { self.meta.pattern_len() == 0 }
                /// Returns the regex patterns that this regex set was constructed from.
                #[inline] pub fn patterns(&self) -> &[String] { &self.patterns }
            }

            impl Default for RegexSet
            {
                fn default() -> Self { RegexSet::empty() }
            }
            /// A set of matches returned by a regex set.
            #[derive(Clone, Debug)]
            pub struct SetMatches(PatternSet);

            impl SetMatches
            {
                /// Whether this set contains any matches.
                #[inline] pub fn matched_any(&self) -> bool { !self.0.is_empty() }
                /// Whether all patterns in this set matched.
                pub fn matched_all(&self) -> bool { self.0.is_full() }
                /// Whether the regex at the given index matched.
                #[inline] pub fn matched(&self, index: usize) -> bool { self.0.contains(PatternID::new_unchecked(index)) }
                /// The total number of regexes in the set that created these matches.
                #[inline] pub fn len(&self) -> usize { self.0.capacity() }
                /// Returns an iterator over the indices of the regexes that matched.
                #[inline] pub fn iter(&self) -> SetMatchesIter<'_> { SetMatchesIter(self.0.iter()) }
            }

            impl IntoIterator for SetMatches
            {
                type IntoIter = SetMatchesIntoIter;
                type Item = usize;
                fn into_iter(self) -> Self::IntoIter
                {
                    let it = 0..self.0.capacity();
                    SetMatchesIntoIter { patset: self.0, it }
                }
            }

            impl<'a> IntoIterator for &'a SetMatches
            {
                type IntoIter = SetMatchesIter<'a>;
                type Item = usize;
                fn into_iter(self) -> Self::IntoIter { self.iter() }
            }
            /// An owned iterator over the set of matches from a regex set.
            #[derive(Debug)] pub struct SetMatchesIntoIter
            {
                patset: PatternSet,
                it: ::ops::Range<usize>,
            }

            impl Iterator for SetMatchesIntoIter
            {
                type Item = usize;
                fn next(&mut self) -> Option<usize>
                {
                    loop
                    {
                        let id = self.it.next()?;
                        if self.patset.contains(PatternID::new_unchecked(id)) { return Some(id); }
                    }
                }

                fn size_hint(&self) -> (usize, Option<usize>) { self.it.size_hint() }
            }

            impl DoubleEndedIterator for SetMatchesIntoIter
            {
                fn next_back(&mut self) -> Option<usize>
                {
                    loop
                    {
                        let id = self.it.next_back()?;
                        if self.patset.contains(PatternID::new_unchecked(id)) { return Some(id); }
                    }
                }
            }

            impl ::iter::FusedIterator for SetMatchesIntoIter {}
            /// A borrowed iterator over the set of matches from a regex set.
            #[derive(Clone, Debug)]
            pub struct SetMatchesIter<'a>(PatternSetIter<'a>);

            impl<'a> Iterator for SetMatchesIter<'a>
            {
                type Item = usize;
                fn next(&mut self) -> Option<usize> { self.0.next().map(|pid| pid.as_usize()) }
                fn size_hint(&self) -> (usize, Option<usize>) { self.0.size_hint() }
            }

            impl<'a> DoubleEndedIterator for SetMatchesIter<'a>
            {
                fn next_back(&mut self) -> Option<usize> { self.0.next_back().map(|pid| pid.as_usize()) }
            }

            impl<'a> ::iter::FusedIterator for SetMatchesIter<'a> {}

            impl ::fmt::Debug for RegexSet
            {
                fn fmt(&self, f: &mut ::fmt::Formatter<'_>) -> ::fmt::Result { write!(f, "RegexSet({:?})", self.patterns()) }
            }
        }
    }

    pub mod syntax
    {
        use ::
        {
            *
        };
    }
    /// Escapes all regular expression meta characters in `pattern`.
    pub fn escape(pattern: &str) -> ::string::String
    {
        regex_syntax::escape(pattern)
    }
}

pub mod result
{
    pub use std::result::{ * };
}

pub mod scripts
{
    use ::
    {
        fs::{ File },
        io::{ ErrorKind },
        types::{ * },
        *,
    };
    // pub fn run_script(sh: &mut shell::Shell, args: &Vec<String>) -> i32
    pub fn run( this: &mut shell::Shell, args: &Vec<String> ) -> i32
    {
        use ::path::{ * };
        let src_file = &args[1];
        let full_src_file: String;

        if src_file.contains('/')
        {
            full_src_file = src_file.clone();
        }

        else
        {
            let full_path = find_file(src_file, false);
            
            if full_path.is_empty()
            {
                if !Path::new(src_file).exists()
                {
                    println_stderr!( "::{}: No such file.", src_file );
                    return 1;
                }

                full_src_file = format!("./{}", src_file);
            }

            else { full_src_file = full_path.clone(); }
        }

        if !Path::new(&full_src_file).exists() {
            println_stderr!("cicada: {}: no such file", src_file);
            return 1;
        }
        if Path::new(&full_src_file).is_dir() {
            println_stderr!("cicada: {}: is a directory", src_file);
            return 1;
        }

        let mut file;
        match File::open(&full_src_file) {
            Ok(x) => file = x,
            Err(e) => {
                println_stderr!("cicada: {}: failed to open file - {:?}", &full_src_file, e.kind());
                return 1;
            }
        }
        let mut text = String::new();
        match file.read_to_string(&mut text) {
            Ok(_) => {}
            Err(e) => {
                match e.kind() {
                    ErrorKind::InvalidData => {
                        println_stderr!("cicada: {}: not a valid script file", &full_src_file);
                    }
                    _ => {
                        println_stderr!("cicada: {}: error: {:?}", &full_src_file, e);
                    }
                }
                return 1;
            }
        }

        if text.contains("\\\n") {
            let re = RegexBuilder::new(r#"([ \t]*\\\n[ \t]+)|([ \t]+\\\n[ \t]*)"#)
                .multi_line(true).build().unwrap();
            text = re.replace_all(&text, " ").to_string();

            let re = RegexBuilder::new(r#"\\\n"#).multi_line(true).build().unwrap();
            text = re.replace_all(&text, "").to_string();
        }

        let re_func_head = Regex::new(r"^function ([a-zA-Z_-][a-zA-Z0-9_-]*) *(?:\(\))? *\{$").unwrap();
        let re_func_tail = Regex::new(r"^\}$").unwrap();
        let mut text_new = String::new();
        let mut enter_func = false;
        let mut func_name = String::new();
        let mut func_body = String::new();
        for line in text.clone().lines() {
            if re_func_head.is_match(line.trim()) {
                enter_func = true;
                let cap = re_func_head.captures(line.trim()).unwrap();
                func_name = cap[1].to_string();
                func_body = String::new();
                continue;
            }
            if re_func_tail.is_match(line.trim()) {
                this.set_func(&func_name, &func_body);
                enter_func = false;
                continue;
            }
            if enter_func {
                func_body.push_str(line);
                func_body.push('\n');
            } else {
                text_new.push_str(line);
                text_new.push('\n');
            }
        }

        let mut status = 0;
        let cr_list = run_lines(this, &text_new, args, false);
        if let Some(last) = cr_list.last() {
            status = last.status;
        }
        
        this.exit_on_error = false;
        status
    }

    pub fn run_exp
    (
        sh: &mut shell::Shell,
        pair_in: (),//Pair<parsers::locust::Rule>,
        args: &Vec<String>,
        in_loop: bool,
        capture: bool,
    ) -> (Vec<CommandResult>, bool, bool)
    {
        let mut cr_list = Vec::new();
        /*let pairs = pair_in.into_inner();
        for pair in pairs
        {
            let line = pair.as_str().trim();
            if line.is_empty() { continue; }

            let rule = pair.as_rule();
            if rule == parsers::locust::Rule::CMD
            {
                if line == "continue"
                {
                    if in_loop
                    {
                        return (cr_list, true, false);
                    } 
                    
                    else
                    {
                        println_stderr!("cicada: continue: only meaningful in loops");
                        continue;
                    }
                }

                if line == "break"
                {
                    if in_loop { return (cr_list, false, true); } 
                    else
                    {
                        println_stderr!("cicada: break: only meaningful in loops");
                        continue;
                    }
                }

                let line_new = expand_args(line, &args[1..]);
                let mut _cr_list = execute::run_command_line(sh, &line_new, true, capture);
                cr_list.append(&mut _cr_list);
                if let Some(last) = cr_list.last()
                {
                    let status = last.status;
                    if status != 0 && sh.exit_on_error { return (cr_list, false, false); }
                }

            }
            
            else if rule == parsers::locust::Rule::EXP_IF
            {
                let (mut _cr_list, _cont, _brk) = run_exp_if(sh, pair, args, in_loop, capture);
                cr_list.append(&mut _cr_list);
                if _cont { return (cr_list, true, false); }
                if _brk { return (cr_list, false, true); }
            }

            else if rule == parsers::locust::Rule::EXP_FOR
            {
                let mut _cr_list = run_exp_for(sh, pair, args, capture);
                cr_list.append(&mut _cr_list);
            }

            else if rule == parsers::locust::Rule::EXP_WHILE
            {
                let mut _cr_list = run_exp_while(sh, pair, args, capture);
                cr_list.append(&mut _cr_list);
            }
        }*/
        (cr_list, false, false)
    }

    pub fn run_lines
    (
        sh: &mut shell::Shell,
        lines: &str,
        args: &Vec<String>,
        capture: bool,
    ) -> Vec<CommandResult>
    {
        let mut cr_list = Vec::new();
        match parsers::locust::parse_lines(lines)
        {
            Ok(pairs_exp) =>
            {
                for pair in pairs_exp
                {
                    let (mut _cr_list, _cont, _brk) = run_exp(sh, pair, args, false, capture);
                    cr_list.append(&mut _cr_list);
                }
            }

            Err(e) =>
            {
                println_stderr!("syntax error: {:?}", e);
                return cr_list;
            }
        }

        cr_list
    }

}

pub mod shell
{
    use ::
    {
        collections::{HashMap, HashSet},
        *,
    };
    /*
    use errno::errno;
    use std::collections::{HashMap, HashSet};
    use std::env;
    use std::io::Write;
    use std::mem;

    use regex::Regex;
    use uuid::Uuid;

    use crate::core;
    use crate::libs;
    use crate::parsers;
    use crate::tools;
    use crate::types::{self, CommandLine};
    */
    #[derive(Debug, Clone)]
    pub struct Shell
    {
        pub jobs: HashMap<i32, types::Job>,
        pub aliases: HashMap<String, String>,
        pub envs: HashMap<String, String>,
        pub funcs: HashMap<String, String>,
        pub cmd: String,
        pub current_dir: String,
        pub previous_dir: String,
        pub previous_cmd: String,
        pub previous_status: i32,
        pub is_login: bool,
        pub exit_on_error: bool,
        pub has_terminal: bool,
        pub paths:Vec<String>,
        pub session_id: Option<u128>,
    }

    impl Shell
    {

        pub fn create( paths:Vec<String> ) -> Self
        {
            let has_terminal = process::has_terminal();
            let current_dir = path::get_current();
            Self
            {
                jobs: HashMap::new(),
                aliases: HashMap::new(),
                envs: HashMap::new(),
                funcs: HashMap::new(),
                cmd: String::new(),
                current_dir: current_dir.clone(),
                previous_dir: String::new(),
                previous_cmd: String::new(),
                previous_status: 0,
                is_login: false,
                exit_on_error: false,
                has_terminal,
                paths,
                session_id:None,
            }
        }
    }
}

pub mod str
{
    pub use std::str::{ * };
}

pub mod string
{
    pub use std::string::{ * };
}

pub mod system
{
    use ::
    {
        *,
    };

    pub mod signal
    {
        use ::
        {
            *,
        };
    }

    pub mod prelude
    {
        pub use std::prelude::v1::{ * };
    } pub use self::prelude::{ * };
}

pub mod time
{
    pub use std::time::{ * };
    /// Returns if the provided year is a leap year in the proleptic Gregorian calendar.
    pub const fn is_leap_year(year: i32) -> bool
    {
        let d = if year % 100 == 0 { 15 } else { 3 };
        year & d == 0
    }
    /// Get the number of calendar days in a given year.
    pub const fn days_in_year(year: i32) -> u16
    {
        if is_leap_year(year) { 366 } else { 365 }
    }
}

pub mod types
{
    use ::
    {
        collections::{ HashSet },
        *,
    };
    /*
        use regex::Regex;
        use std::collections::{HashMap, HashSet};
        use std::fmt;

        use crate::parsers;
        use crate::parsers::parser_line::tokens_to_redirections;
        use crate::shell;
        use crate::libs;
        use crate::tools;
    */
    #[derive( Debug, Clone, Default )]
    pub struct Job
    {
        pub cmd:String,
        pub id:i32,
        pub gid:i32,
        pub pids:Vec<i32>,
        pub pids_stopped:HashSet<i32>,
        pub status:String,
        pub is_bg:bool,
    }
    
    #[derive( Clone, Debug, Default )]
    pub struct CommandResult
    {
        pub gid: i32,
        pub status: i32,
        pub stdout: String,
        pub stderr: String,
    }
}

unsafe fn domain() -> ::result::Result<(), Box<dyn std::error::Error>>
{
    unsafe
    {
        let mut this = shell::Shell::create( env::initialize_paths()? );
        println!( r#"{:?}"#, this );

        let args: Vec<String> = env::args().collect();
        println!( r#"{:?}"#, args );

        if is::login( &args )
        {
            //rcfile::load_rc_files(&mut sh);
            env::load_rc( &mut this );
            this.is_login = true;
        }
        
        Ok(())
    }
}

fn main() -> ::result::Result<(), Box<dyn std::error::Error>>
{
    unsafe
    {
        libc::signal(libc::SIGPIPE, libc::SIG_DFL);
        libc::signal(libc::SIGTSTP, libc::SIG_IGN);
        libc::signal(libc::SIGQUIT, libc::SIG_IGN);
        Ok( domain()? )
    }
}
// #\[stable\(feature = ".+", since = ".+"\)\]
// #\[unstable\(feature = ".+", issue = ".+"\)\]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 19738
